--------------------------------------------------------
--  文件已创建 - 星期四-十月-11-2018   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence ACTDIC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ACTDIC_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 23 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEAREA_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEAREA_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASECOMPANY_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASECOMPANY_SEQUENCE"  MINVALUE 100000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100145 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEDICTIONARY_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEDICTIONARY_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 908 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEFORMPRINT_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEFORMPRINT_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 221 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEFORMSETBASE_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEFORMSETBASE_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEFORMSET_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEFORMSET_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASELOG_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASELOG_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 28834 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEMATERIAL_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEMATERIAL_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 526121 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEOFFICESSCOPE_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEOFFICESSCOPE_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 531 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEORGANIZATION_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEORGANIZATION_SEQUENCE"  MINVALUE 200000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 200301 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEPERSONROLE_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEPERSONROLE_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 741 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEPERSON_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEPERSON_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 3661 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEPROVIDER_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEPROVIDER_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2301 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASERECEIPT_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASERECEIPT_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 422 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEROUTESTEP_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEROUTESTEP_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4217 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASESPAREPARTSCATE_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASESPAREPARTSCATE_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 76747 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEUSERSETTING_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEUSERSETTING_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASEWAREHOUSE_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASEWAREHOUSE_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 91055 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_APPLYDEP_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_APPLYDEP_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2933 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_CATEGORY_ASSET_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_CATEGORY_ASSET_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 501 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_COMPANY_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_COMPANY_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 100001 START WITH 2100121 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_COSTUPDATE_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_COSTUPDATE_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 301 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_FORMPRINT_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_FORMPRINT_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_OFFSETINFOSEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_OFFSETINFOSEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_ORGANIZATION_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_ORGANIZATION_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 200001 START WITH 4200121 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_PERSONSCOPE_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_PERSONSCOPE_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1162 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_PRINTTEMP_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_PRINTTEMP_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_ROLEMENUBUTTON_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_ROLEMENUBUTTON_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1101 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_STOCKCOSTUPDATESEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_STOCKCOSTUPDATESEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_UNITCONVERSION_EQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_UNITCONVERSION_EQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_USEDEP_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_USEDEP_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2815 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence BASE_USERROLE_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "BASE_USERROLE_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 60080 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence INF_TASKLOG_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "INF_TASKLOG_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 347641 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence INF_TASK_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "INF_TASK_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 241 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence MATERIALBILL_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "MATERIALBILL_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 23561 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence MES_CK_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "MES_CK_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence MES_RK_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "MES_RK_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SCOPE_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "SCOPE_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1347 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SYSFORMTEM_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "SYSFORMTEM_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 66 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence VRKCX_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "VRKCX_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZFILE_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZFILE_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 162 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZPDDETAIL_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZPDDETAIL_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 343 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZRECEIVINGLOG_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZRECEIVINGLOG_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 429 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZROUTEHISTORY_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZROUTEHISTORY_SEQUENCE"  MINVALUE 1 MAXVALUE 99999999 INCREMENT BY 1 START WITH 13186 CACHE 2 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZSHEETCKDETAIL_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZSHEETCKDETAIL_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1219 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZSHEETCK_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZSHEETCK_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1059 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZSHEETDETAIL_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZSHEETDETAIL_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2482 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZSHEETRKDETAIL_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZSHEETRKDETAIL_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2546 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZSHEETRKSUBDETAIL_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZSHEETRKSUBDETAIL_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 763 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZSHEETRK_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZSHEETRK_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1127 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZSHEET_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZSHEET_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2583 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZSTOCKLOG_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZSTOCKLOG_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 111 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZSTOCK_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZSTOCK_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1745 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZTRAY_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZTRAY_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 201 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZWAITTASK_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZWAITTASK_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2107 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZ_ORDERINFO_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZ_ORDERINFO_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5228 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZ_PLANTOAPPLY_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZ_PLANTOAPPLY_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZ_PURCHASEPLAN_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZ_PURCHASEPLAN_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2968 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZ_SECONDARYSTOCK_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZ_SECONDARYSTOCK_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZ_SHEETCKSUBDETAILSEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZ_SHEETCKSUBDETAILSEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZ_SHEETRKSUBDETAILSEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZ_SHEETRKSUBDETAILSEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZ_SHEETSUBDETAIL_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZ_SHEETSUBDETAIL_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WZ_TRAYBACK_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "WZ_TRAYBACK_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 10 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table ACT_EVT_LOG
--------------------------------------------------------



  CREATE TABLE "ACT_EVT_LOG" 
   (	"LOG_NR_" NUMBER(19,0), 
	"TYPE_" NVARCHAR2(64), 
	"PROC_DEF_ID_" NVARCHAR2(64), 
	"PROC_INST_ID_" NVARCHAR2(64), 
	"EXECUTION_ID_" NVARCHAR2(64), 
	"TASK_ID_" NVARCHAR2(64), 
	"TIME_STAMP_" TIMESTAMP (6), 
	"USER_ID_" NVARCHAR2(255), 
	"DATA_" BLOB, 
	"LOCK_OWNER_" NVARCHAR2(255), 
	"LOCK_TIME_" TIMESTAMP (6), 
	"IS_PROCESSED_" NUMBER(3,0) DEFAULT 0
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  TABLESPACE "EWMSDB" 
 LOB ("DATA_") STORE AS BASICFILE (
  TABLESPACE "EWMSDB" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING ) ;
--------------------------------------------------------
--  DDL for Table ACT_GE_BYTEARRAY
--------------------------------------------------------

  CREATE TABLE "ACT_GE_BYTEARRAY" 
   (	"ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"NAME_" NVARCHAR2(255), 
	"DEPLOYMENT_ID_" NVARCHAR2(64), 
	"BYTES_" BLOB, 
	"GENERATED_" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB" 
 LOB ("BYTES_") STORE AS BASICFILE (
  TABLESPACE "EWMSDB" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table ACT_GE_PROPERTY
--------------------------------------------------------

  CREATE TABLE "ACT_GE_PROPERTY" 
   (	"NAME_" NVARCHAR2(64), 
	"VALUE_" NVARCHAR2(300), 
	"REV_" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table ACT_HI_ACTINST
--------------------------------------------------------

  CREATE TABLE "ACT_HI_ACTINST" 
   (	"ID_" NVARCHAR2(64), 
	"PROC_DEF_ID_" NVARCHAR2(64), 
	"PROC_INST_ID_" NVARCHAR2(64), 
	"EXECUTION_ID_" NVARCHAR2(64), 
	"ACT_ID_" NVARCHAR2(255), 
	"TASK_ID_" NVARCHAR2(64), 
	"CALL_PROC_INST_ID_" NVARCHAR2(64), 
	"ACT_NAME_" NVARCHAR2(255), 
	"ACT_TYPE_" NVARCHAR2(255), 
	"ASSIGNEE_" NVARCHAR2(255), 
	"START_TIME_" TIMESTAMP (6), 
	"END_TIME_" TIMESTAMP (6), 
	"DURATION_" NUMBER(19,0), 
	"TENANT_ID_" NVARCHAR2(255) DEFAULT ''
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table ACT_HI_ATTACHMENT
--------------------------------------------------------

  CREATE TABLE "ACT_HI_ATTACHMENT" 
   (	"ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"USER_ID_" NVARCHAR2(255), 
	"NAME_" NVARCHAR2(255), 
	"DESCRIPTION_" NVARCHAR2(2000), 
	"TYPE_" NVARCHAR2(255), 
	"TASK_ID_" NVARCHAR2(64), 
	"PROC_INST_ID_" NVARCHAR2(64), 
	"URL_" NVARCHAR2(2000), 
	"CONTENT_ID_" NVARCHAR2(64), 
	"TIME_" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING;
  
--------------------------------------------------------
--  DDL for Table ACT_HI_COMMENT
--------------------------------------------------------

  CREATE TABLE "ACT_HI_COMMENT" 
   (	"ID_" NVARCHAR2(64), 
	"TYPE_" NVARCHAR2(255), 
	"TIME_" TIMESTAMP (6), 
	"USER_ID_" NVARCHAR2(255), 
	"TASK_ID_" NVARCHAR2(64), 
	"PROC_INST_ID_" NVARCHAR2(64), 
	"ACTION_" NVARCHAR2(255), 
	"MESSAGE_" NVARCHAR2(2000), 
	"FULL_MSG_" BLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB" 
 LOB ("FULL_MSG_") STORE AS BASICFILE (
  TABLESPACE "EWMSDB" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table ACT_HI_DETAIL
--------------------------------------------------------

  CREATE TABLE "ACT_HI_DETAIL" 
   (	"ID_" NVARCHAR2(64), 
	"TYPE_" NVARCHAR2(255), 
	"PROC_INST_ID_" NVARCHAR2(64), 
	"EXECUTION_ID_" NVARCHAR2(64), 
	"TASK_ID_" NVARCHAR2(64), 
	"ACT_INST_ID_" NVARCHAR2(64), 
	"NAME_" NVARCHAR2(255), 
	"VAR_TYPE_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"TIME_" TIMESTAMP (6), 
	"BYTEARRAY_ID_" NVARCHAR2(64), 
	"DOUBLE_" NUMBER(*,10), 
	"LONG_" NUMBER(19,0), 
	"TEXT_" NVARCHAR2(2000), 
	"TEXT2_" NVARCHAR2(2000)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING;
  
--------------------------------------------------------
--  DDL for Table ACT_HI_IDENTITYLINK
--------------------------------------------------------

  CREATE TABLE "ACT_HI_IDENTITYLINK" 
   (	"ID_" NVARCHAR2(64), 
	"GROUP_ID_" NVARCHAR2(255), 
	"TYPE_" NVARCHAR2(255), 
	"USER_ID_" NVARCHAR2(255), 
	"TASK_ID_" NVARCHAR2(64), 
	"PROC_INST_ID_" NVARCHAR2(64)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table ACT_HI_PROCINST
--------------------------------------------------------

  CREATE TABLE "ACT_HI_PROCINST" 
   (	"ID_" NVARCHAR2(64), 
	"PROC_INST_ID_" NVARCHAR2(64), 
	"BUSINESS_KEY_" NVARCHAR2(255), 
	"PROC_DEF_ID_" NVARCHAR2(64), 
	"START_TIME_" TIMESTAMP (6), 
	"END_TIME_" TIMESTAMP (6), 
	"DURATION_" NUMBER(19,0), 
	"START_USER_ID_" NVARCHAR2(255), 
	"START_ACT_ID_" NVARCHAR2(255), 
	"END_ACT_ID_" NVARCHAR2(255), 
	"SUPER_PROCESS_INSTANCE_ID_" NVARCHAR2(64), 
	"DELETE_REASON_" NVARCHAR2(2000), 
	"TENANT_ID_" NVARCHAR2(255) DEFAULT '', 
	"NAME_" NVARCHAR2(255)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table ACT_HI_TASKINST
--------------------------------------------------------

  CREATE TABLE "ACT_HI_TASKINST" 
   (	"ID_" NVARCHAR2(64), 
	"PROC_DEF_ID_" NVARCHAR2(64), 
	"TASK_DEF_KEY_" NVARCHAR2(255), 
	"PROC_INST_ID_" NVARCHAR2(64), 
	"EXECUTION_ID_" NVARCHAR2(64), 
	"PARENT_TASK_ID_" NVARCHAR2(64), 
	"NAME_" NVARCHAR2(255), 
	"DESCRIPTION_" NVARCHAR2(2000), 
	"OWNER_" NVARCHAR2(255), 
	"ASSIGNEE_" NVARCHAR2(255), 
	"START_TIME_" TIMESTAMP (6), 
	"CLAIM_TIME_" TIMESTAMP (6), 
	"END_TIME_" TIMESTAMP (6), 
	"DURATION_" NUMBER(19,0), 
	"DELETE_REASON_" NVARCHAR2(2000), 
	"PRIORITY_" NUMBER(*,0), 
	"DUE_DATE_" TIMESTAMP (6), 
	"FORM_KEY_" NVARCHAR2(255), 
	"CATEGORY_" NVARCHAR2(255), 
	"TENANT_ID_" NVARCHAR2(255) DEFAULT ''
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table ACT_HI_VARINST
--------------------------------------------------------

  CREATE TABLE "ACT_HI_VARINST" 
   (	"ID_" NVARCHAR2(64), 
	"PROC_INST_ID_" NVARCHAR2(64), 
	"EXECUTION_ID_" NVARCHAR2(64), 
	"TASK_ID_" NVARCHAR2(64), 
	"NAME_" NVARCHAR2(255), 
	"VAR_TYPE_" NVARCHAR2(100), 
	"REV_" NUMBER(*,0), 
	"BYTEARRAY_ID_" NVARCHAR2(64), 
	"DOUBLE_" NUMBER(*,10), 
	"LONG_" NUMBER(19,0), 
	"TEXT_" NVARCHAR2(2000), 
	"TEXT2_" NVARCHAR2(2000), 
	"CREATE_TIME_" TIMESTAMP (6), 
	"LAST_UPDATED_TIME_" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table ACT_ID_GROUP
--------------------------------------------------------

  CREATE TABLE "ACT_ID_GROUP" 
   (	"ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"NAME_" NVARCHAR2(255), 
	"TYPE_" NVARCHAR2(255)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING;
  
--------------------------------------------------------
--  DDL for Table ACT_ID_INFO
--------------------------------------------------------

  CREATE TABLE "ACT_ID_INFO" 
   (	"ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"USER_ID_" NVARCHAR2(64), 
	"TYPE_" NVARCHAR2(64), 
	"KEY_" NVARCHAR2(255), 
	"VALUE_" NVARCHAR2(255), 
	"PASSWORD_" BLOB, 
	"PARENT_ID_" NVARCHAR2(255)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  TABLESPACE "EWMSDB" 
 LOB ("PASSWORD_") STORE AS BASICFILE (
  TABLESPACE "EWMSDB" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING ) ;
--------------------------------------------------------
--  DDL for Table ACT_ID_MEMBERSHIP
--------------------------------------------------------

  CREATE TABLE "ACT_ID_MEMBERSHIP" 
   (	"USER_ID_" NVARCHAR2(64), 
	"GROUP_ID_" NVARCHAR2(64)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING;
  
--------------------------------------------------------
--  DDL for Table ACT_ID_USER
--------------------------------------------------------

  CREATE TABLE "ACT_ID_USER" 
   (	"ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"FIRST_" NVARCHAR2(255), 
	"LAST_" NVARCHAR2(255), 
	"EMAIL_" NVARCHAR2(255), 
	"PWD_" NVARCHAR2(255), 
	"PICTURE_ID_" NVARCHAR2(64)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING;
  
--------------------------------------------------------
--  DDL for Table ACT_PROCDEF_INFO
--------------------------------------------------------

  CREATE TABLE "ACT_PROCDEF_INFO" 
   (	"ID_" NVARCHAR2(64), 
	"PROC_DEF_ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"INFO_JSON_ID_" NVARCHAR2(64)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING;
  
--------------------------------------------------------
--  DDL for Table ACT_RE_DEPLOYMENT
--------------------------------------------------------

  CREATE TABLE "ACT_RE_DEPLOYMENT" 
   (	"ID_" NVARCHAR2(64), 
	"NAME_" NVARCHAR2(255), 
	"CATEGORY_" NVARCHAR2(255), 
	"TENANT_ID_" NVARCHAR2(255) DEFAULT '', 
	"DEPLOY_TIME_" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table ACT_RE_MODEL
--------------------------------------------------------

  CREATE TABLE "ACT_RE_MODEL" 
   (	"ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"NAME_" NVARCHAR2(255), 
	"KEY_" NVARCHAR2(255), 
	"CATEGORY_" NVARCHAR2(255), 
	"CREATE_TIME_" TIMESTAMP (6), 
	"LAST_UPDATE_TIME_" TIMESTAMP (6), 
	"VERSION_" NUMBER(*,0), 
	"META_INFO_" NVARCHAR2(2000), 
	"DEPLOYMENT_ID_" NVARCHAR2(64), 
	"EDITOR_SOURCE_VALUE_ID_" NVARCHAR2(64), 
	"EDITOR_SOURCE_EXTRA_VALUE_ID_" NVARCHAR2(64), 
	"TENANT_ID_" NVARCHAR2(255) DEFAULT ''
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table ACT_RE_PROCDEF
--------------------------------------------------------

  CREATE TABLE "ACT_RE_PROCDEF" 
   (	"ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"CATEGORY_" NVARCHAR2(255), 
	"NAME_" NVARCHAR2(255), 
	"KEY_" NVARCHAR2(255), 
	"VERSION_" NUMBER(*,0), 
	"DEPLOYMENT_ID_" NVARCHAR2(64), 
	"RESOURCE_NAME_" NVARCHAR2(2000), 
	"DGRM_RESOURCE_NAME_" VARCHAR2(4000 BYTE), 
	"DESCRIPTION_" NVARCHAR2(2000), 
	"HAS_START_FORM_KEY_" NUMBER(1,0), 
	"HAS_GRAPHICAL_NOTATION_" NUMBER(1,0), 
	"SUSPENSION_STATE_" NUMBER(*,0), 
	"TENANT_ID_" NVARCHAR2(255) DEFAULT ''
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table ACT_RU_EVENT_SUBSCR
--------------------------------------------------------

  CREATE TABLE "ACT_RU_EVENT_SUBSCR" 
   (	"ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"EVENT_TYPE_" NVARCHAR2(255), 
	"EVENT_NAME_" NVARCHAR2(255), 
	"EXECUTION_ID_" NVARCHAR2(64), 
	"PROC_INST_ID_" NVARCHAR2(64), 
	"ACTIVITY_ID_" NVARCHAR2(64), 
	"CONFIGURATION_" NVARCHAR2(255), 
	"CREATED_" TIMESTAMP (6), 
	"PROC_DEF_ID_" NVARCHAR2(64), 
	"TENANT_ID_" NVARCHAR2(255) DEFAULT ''
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING;
  
--------------------------------------------------------
--  DDL for Table ACT_RU_EXECUTION
--------------------------------------------------------

  CREATE TABLE "ACT_RU_EXECUTION" 
   (	"ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"PROC_INST_ID_" NVARCHAR2(64), 
	"BUSINESS_KEY_" NVARCHAR2(255), 
	"PARENT_ID_" NVARCHAR2(64), 
	"PROC_DEF_ID_" NVARCHAR2(64), 
	"SUPER_EXEC_" NVARCHAR2(64), 
	"ACT_ID_" NVARCHAR2(255), 
	"IS_ACTIVE_" NUMBER(1,0), 
	"IS_CONCURRENT_" NUMBER(1,0), 
	"IS_SCOPE_" NUMBER(1,0), 
	"IS_EVENT_SCOPE_" NUMBER(1,0), 
	"SUSPENSION_STATE_" NUMBER(*,0), 
	"CACHED_ENT_STATE_" NUMBER(*,0), 
	"TENANT_ID_" NVARCHAR2(255) DEFAULT '', 
	"NAME_" NVARCHAR2(255), 
	"LOCK_TIME_" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table ACT_RU_IDENTITYLINK
--------------------------------------------------------

  CREATE TABLE "ACT_RU_IDENTITYLINK" 
   (	"ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"GROUP_ID_" NVARCHAR2(255), 
	"TYPE_" NVARCHAR2(255), 
	"USER_ID_" NVARCHAR2(255), 
	"TASK_ID_" NVARCHAR2(64), 
	"PROC_INST_ID_" NVARCHAR2(64), 
	"PROC_DEF_ID_" NVARCHAR2(64)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table ACT_RU_JOB
--------------------------------------------------------

  CREATE TABLE "ACT_RU_JOB" 
   (	"ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"TYPE_" NVARCHAR2(255), 
	"LOCK_EXP_TIME_" TIMESTAMP (6), 
	"LOCK_OWNER_" NVARCHAR2(255), 
	"EXCLUSIVE_" NUMBER(1,0), 
	"EXECUTION_ID_" NVARCHAR2(64), 
	"PROCESS_INSTANCE_ID_" NVARCHAR2(64), 
	"PROC_DEF_ID_" NVARCHAR2(64), 
	"RETRIES_" NUMBER(*,0), 
	"EXCEPTION_STACK_ID_" NVARCHAR2(64), 
	"EXCEPTION_MSG_" NVARCHAR2(2000), 
	"DUEDATE_" TIMESTAMP (6), 
	"REPEAT_" NVARCHAR2(255), 
	"HANDLER_TYPE_" NVARCHAR2(255), 
	"HANDLER_CFG_" NVARCHAR2(2000), 
	"TENANT_ID_" NVARCHAR2(255) DEFAULT ''
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING;
  
--------------------------------------------------------
--  DDL for Table ACT_RU_TASK
--------------------------------------------------------

  CREATE TABLE "ACT_RU_TASK" 
   (	"ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"EXECUTION_ID_" NVARCHAR2(64), 
	"PROC_INST_ID_" NVARCHAR2(64), 
	"PROC_DEF_ID_" NVARCHAR2(64), 
	"NAME_" NVARCHAR2(255), 
	"PARENT_TASK_ID_" NVARCHAR2(64), 
	"DESCRIPTION_" NVARCHAR2(2000), 
	"TASK_DEF_KEY_" NVARCHAR2(255), 
	"OWNER_" NVARCHAR2(255), 
	"ASSIGNEE_" NVARCHAR2(255), 
	"DELEGATION_" NVARCHAR2(64), 
	"PRIORITY_" NUMBER(*,0), 
	"CREATE_TIME_" TIMESTAMP (6), 
	"DUE_DATE_" TIMESTAMP (6), 
	"CATEGORY_" NVARCHAR2(255), 
	"SUSPENSION_STATE_" NUMBER(*,0), 
	"TENANT_ID_" NVARCHAR2(255) DEFAULT '', 
	"FORM_KEY_" NVARCHAR2(255)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table ACT_RU_VARIABLE
--------------------------------------------------------

  CREATE TABLE "ACT_RU_VARIABLE" 
   (	"ID_" NVARCHAR2(64), 
	"REV_" NUMBER(*,0), 
	"TYPE_" NVARCHAR2(255), 
	"NAME_" NVARCHAR2(255), 
	"EXECUTION_ID_" NVARCHAR2(64), 
	"PROC_INST_ID_" NVARCHAR2(64), 
	"TASK_ID_" NVARCHAR2(64), 
	"BYTEARRAY_ID_" NVARCHAR2(64), 
	"DOUBLE_" NUMBER(*,10), 
	"LONG_" NUMBER(19,0), 
	"TEXT_" NVARCHAR2(2000), 
	"TEXT2_" NVARCHAR2(2000)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_APPLYDEP
--------------------------------------------------------

  CREATE TABLE "BASE_APPLYDEP" 
   (	"ID" NUMBER(*,0), 
	"ERPID" NVARCHAR2(20), 
	"CODE" NVARCHAR2(50), 
	"NAME" NVARCHAR2(200), 
	"DEMO" NVARCHAR2(255), 
	"ZTID" NUMBER(*,0), 
	"SUBJECTSGROUP" NVARCHAR2(200) DEFAULT '', 
	"SUBJECTSGROUPDESCRIPTION" NVARCHAR2(200), 
	"STATUS" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"CREATE_DATE" DATE, 
	"CREATOR" NUMBER(*,0), 
	"ADD_TYPE" NUMBER(*,0), 
	"DELETED" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_BUTTON
--------------------------------------------------------

  CREATE TABLE "BASE_BUTTON" 
   (	"CODE" VARCHAR2(64 BYTE), 
	"NAME" VARCHAR2(64 BYTE), 
	"BUTTONTYPE" NUMBER(*,0), 
	"ICON" VARCHAR2(128 BYTE), 
	"ICONURL" VARCHAR2(256 BYTE), 
	"SORT" NUMBER(*,0), 
	"JSEVENT" VARCHAR2(64 BYTE), 
	"SPLIT" NUMBER(*,0), 
	"STATUS" NUMBER(*,0), 
	"MEMO" VARCHAR2(128 BYTE), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATER" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"MENUCODE" NVARCHAR2(64), 
	"URL" NVARCHAR2(128), 
	"AUTHIDENTITY" NVARCHAR2(128)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_CATEGORY_ASSET
--------------------------------------------------------

  CREATE TABLE "BASE_CATEGORY_ASSET" 
   (	"ID" NUMBER(*,0), 
	"CATEGORYID" NUMBER(*,0), 
	"CATEGORYCODE" NVARCHAR2(50), 
	"ASSETCODE" NVARCHAR2(50), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_COMPANY
--------------------------------------------------------

  CREATE TABLE "BASE_COMPANY" 
   (	"COMPANYID" NUMBER(*,0), 
	"COMPANYCODE" NVARCHAR2(16), 
	"COMPANYNAME" NVARCHAR2(128), 
	"SHORTNAME" VARCHAR2(64 BYTE), 
	"COMPANYTYPE" NUMBER(*,0), 
	"SORT" NUMBER(*,0), 
	"ENABLED" NUMBER(*,0), 
	"REMARK" NVARCHAR2(200), 
	"MANAGER" VARCHAR2(64 BYTE), 
	"TEL" VARCHAR2(64 BYTE), 
	"PHONE" VARCHAR2(64 BYTE), 
	"FAX" VARCHAR2(64 BYTE), 
	"EMAIL" VARCHAR2(64 BYTE), 
	"ZIPCODE" VARCHAR2(64 BYTE), 
	"WEBSITE" VARCHAR2(128 BYTE), 
	"CREATOR" NUMBER(*,0), 
	"ZTID" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"PARENTID" NUMBER(*,0), 
	"LEVELCOUNT" NUMBER(*,0), 
	"LEVELCODE" NVARCHAR2(64)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_COSTUPDATE
--------------------------------------------------------

  CREATE TABLE "BASE_COSTUPDATE" 
   (	"ID" NUMBER(*,0), 
	"ORGANZATIONID" NUMBER(*,0), 
	"MATERIALCODE" NVARCHAR2(50), 
	"OLDCOST" NUMBER(18,9), 
	"NEWCOST" NUMBER(18,9), 
	"UOM" NVARCHAR2(10), 
	"QUANTITY" NUMBER(18,9), 
	"AMOUNT" NUMBER(18,9), 
	"UPDATEDATE" DATE, 
	"TRANSCATIONID" NUMBER(*,0), 
	"INTERFACECODE" NVARCHAR2(50), 
	"HEADERID" NUMBER(*,0), 
	"LINEID" NUMBER(*,0), 
	"DOCNUM" NVARCHAR2(50), 
	"TRANSDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_DICTIONARY
--------------------------------------------------------

  CREATE TABLE "BASE_DICTIONARY" 
   (	"ID" NUMBER(*,0), 
	"GUID" VARCHAR2(64 BYTE), 
	"CODE" VARCHAR2(64 BYTE), 
	"NAME" VARCHAR2(64 BYTE), 
	"PARENTID" NUMBER(*,0), 
	"LEVELCOUNT" NUMBER(*,0), 
	"LEVELCODE" VARCHAR2(64 BYTE), 
	"ENDFLAG" NUMBER(*,0), 
	"STATUS" NUMBER(*,0), 
	"SORT" NUMBER(*,0), 
	"MEMO" VARCHAR2(200 BYTE), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDINT9" NUMBER(*,0), 
	"EXTENDINT10" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDSTRING1" VARCHAR2(200 BYTE), 
	"EXTENDSTRING2" VARCHAR2(200 BYTE), 
	"EXTENDSTRING3" VARCHAR2(200 BYTE), 
	"EXTENDSTRING4" VARCHAR2(200 BYTE), 
	"EXTENDSTRING5" VARCHAR2(200 BYTE), 
	"EXTENDSTRING6" VARCHAR2(200 BYTE), 
	"EXTENDSTRING7" VARCHAR2(200 BYTE), 
	"EXTENDSTRING8" VARCHAR2(200 BYTE), 
	"EXTENDSTRING9" VARCHAR2(200 BYTE), 
	"EXTENDSTRING10" VARCHAR2(200 BYTE), 
	"ADDTYPE" NUMBER(*,0) DEFAULT 0, 
	"BTNFUN" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_DIC_ACT
--------------------------------------------------------

  CREATE TABLE "BASE_DIC_ACT" 
   (	"ID" NUMBER, 
	"DICID" NUMBER, 
	"MODELID" NUMBER, 
	"DEPID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_FORMPRINT
--------------------------------------------------------

  CREATE TABLE "BASE_FORMPRINT" 
   (	"ID" NUMBER(*,0), 
	"REPORTPARENTTYPE" NUMBER(*,0), 
	"REPORTNAME" NVARCHAR2(128), 
	"REPORTMEMO" NVARCHAR2(256), 
	"REPORTUSER" NVARCHAR2(32), 
	"REPORTDATA" BLOB, 
	"SHEETDATASET" NVARCHAR2(128), 
	"DETAILDATASET" NVARCHAR2(128), 
	"ADUITDATASET" NVARCHAR2(128), 
	"REPORTSTATUS" NUMBER(*,0), 
	"ORDERNUM" NUMBER(*,0), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"EXTENDSTRING1" NVARCHAR2(128), 
	"EXTENDSTRING2" NVARCHAR2(128), 
	"EXTENDSTRING3" NVARCHAR2(128), 
	"EXTENDSTRING4" NVARCHAR2(128), 
	"REPORTCODE" NVARCHAR2(32), 
	"SORT" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB" 
 LOB ("REPORTDATA") STORE AS BASICFILE (
  TABLESPACE "EWMSDB" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
 

   COMMENT ON COLUMN "BASE_FORMPRINT"."REPORTPARENTTYPE" IS '报表父级类型';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."REPORTNAME" IS '报表名称';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."REPORTMEMO" IS '报表备注';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."REPORTUSER" IS '报表用户';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."REPORTDATA" IS '报表数据';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."SHEETDATASET" IS '单据数据集';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."DETAILDATASET" IS '明细数据集';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."ADUITDATASET" IS '审核数据集';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."REPORTSTATUS" IS '报表状态';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."ORDERNUM" IS '排序';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."CREATOR" IS '创建人';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."CREATEDATE" IS '创建日期';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."UPDATOR" IS '更新人';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."UPDATEDATE" IS '更新日期';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."EXTENDSTRING1" IS '扩展字段';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."EXTENDSTRING2" IS '扩展字段';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."EXTENDSTRING3" IS '扩展字段';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."EXTENDSTRING4" IS '扩展字段';
 
   COMMENT ON COLUMN "BASE_FORMPRINT"."REPORTCODE" IS 'CODE';
--------------------------------------------------------
--  DDL for Table BASE_FORMSET
--------------------------------------------------------

  CREATE TABLE "BASE_FORMSET" 
   (	"FORMDATA_ID" NUMBER(*,0), 
	"FORMDATA_BASEID" NUMBER(*,0), 
	"FORMLABELCAPTION" NVARCHAR2(255), 
	"FORMFIELDNAME" NVARCHAR2(255), 
	"FORMFIELDTYPE" NUMBER(*,0), 
	"FORMFIELDDICTIONARYID" NUMBER(*,0), 
	"FORMCARDTYPEID" NUMBER(*,0), 
	"FORMFIELDSTATUS" NUMBER(*,0), 
	"FORMFIELDCONTROLINIT" NUMBER(*,0), 
	"FORMFIELDDEFAULT" NUMBER(*,0), 
	"FORMFIELDGROUP" NUMBER(*,0), 
	"FORMFIELDISONLY" NUMBER(*,0), 
	"FORMFIELDISHAND" NUMBER(*,0), 
	"FORMFIELDISMUST" NUMBER(*,0), 
	"FORMFIELDLEFT" NUMBER(*,0), 
	"FORMFIELDTOP" NUMBER(*,0), 
	"FORMFIELDWIDTH" NUMBER(*,0), 
	"FORMFIELDPOSLEFTORTOP" NUMBER(*,0), 
	"FORMDATATYPE" NUMBER(*,0), 
	"FORMSETNAME" NVARCHAR2(255), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_FORMSET_BASE
--------------------------------------------------------

  CREATE TABLE "BASE_FORMSET_BASE" 
   (	"ID" NUMBER(*,0), 
	"FORMDATA_BASEID" NUMBER(*,0), 
	"FORMDATA_CHINESENAME" NVARCHAR2(255), 
	"FORMDATANAME" NVARCHAR2(255), 
	"FORMDATATYPE" NVARCHAR2(255), 
	"FORMDATAJUMPPATH" NVARCHAR2(255)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_LOG
--------------------------------------------------------

  CREATE TABLE "BASE_LOG" 
   (	"ID" NUMBER(*,0), 
	"LOGTYPE" NUMBER(*,0), 
	"LOGOBJECT" NVARCHAR2(255), 
	"LOGACTION" NVARCHAR2(2000), 
	"LOGDESC" NVARCHAR2(2000), 
	"SHEETKINDID" NUMBER(*,0), 
	"SHEETID" NUMBER(*,0), 
	"SHEETDETAILID" NUMBER(*,0), 
	"OPERATECOUNT" NUMBER(*,0), 
	"TRAYCODE" NVARCHAR2(255), 
	"GOODCODE" NVARCHAR2(255), 
	"LOGTIME" DATE, 
	"LOGIP" NVARCHAR2(64), 
	"OPERATOR" NUMBER(*,0), 
	"REMARK" NVARCHAR2(255), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"CREATE_DATE" DATE, 
	"CREATOR" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 4194304 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_MAPPING
--------------------------------------------------------

  CREATE TABLE "BASE_MAPPING" 
   (	"ID" NUMBER(*,0), 
	"SQLTABLENAME" VARCHAR2(50 BYTE), 
	"SQLCOLUMN" VARCHAR2(50 BYTE), 
	"SQLCOLUMNNAME" VARCHAR2(50 BYTE), 
	"SQLCOLUMNTYPE" VARCHAR2(50 BYTE), 
	"MAPPINGCOLUMNS" VARCHAR2(50 BYTE), 
	"CREATER" VARCHAR2(50 BYTE), 
	"CREATERTIME" DATE DEFAULT sysdate, 
	"ORDERBY" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_MATERIAL
--------------------------------------------------------

  CREATE TABLE "BASE_MATERIAL" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"NAME" NVARCHAR2(200), 
	"MODEL" NVARCHAR2(200), 
	"BRAND" NVARCHAR2(200), 
	"SPARESCATEID" NUMBER(*,0), 
	"PRICE" NUMBER(18,9), 
	"STATUS" NUMBER(*,0), 
	"CONFIGMEMO" NVARCHAR2(1024), 
	"PROVIDERID" NUMBER(*,0), 
	"MEMO" NVARCHAR2(1024), 
	"SORT" NUMBER(*,0), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATER" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"ZTID" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"CODE" NVARCHAR2(64), 
	"SPECIFICATIONS" NVARCHAR2(255), 
	"MODELS" NVARCHAR2(255), 
	"UNIT" NVARCHAR2(64), 
	"STOCKUP" NUMBER(18,9), 
	"STOCKDOWN" NUMBER(18,9), 
	"ISUSEALARM" NUMBER(*,0), 
	"DESCRIPTION" NVARCHAR2(500), 
	"ENABLESN" NUMBER(*,0), 
	"ADDTYPE" NUMBER(*,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 327680 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
 

   COMMENT ON COLUMN "BASE_MATERIAL"."ADDTYPE" IS '新增类型';
--------------------------------------------------------
--  DDL for Table BASE_MENU
--------------------------------------------------------

  CREATE TABLE "BASE_MENU" 
   (	"CODE" VARCHAR2(64 BYTE), 
	"NAME" VARCHAR2(64 BYTE), 
	"PARENTCODE" VARCHAR2(64 BYTE) DEFAULT '0', 
	"TYPE" NUMBER(*,0), 
	"BUTTONMODE" NUMBER(*,0), 
	"URL" VARCHAR2(256 BYTE), 
	"ICON" VARCHAR2(64 BYTE), 
	"ICONURL" VARCHAR2(128 BYTE), 
	"SORT" NUMBER(*,0), 
	"STATUS" NUMBER(*,0), 
	"MEMO" VARCHAR2(128 BYTE), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATER" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"AUTHIDENTITY" NVARCHAR2(128)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_MENUBUTTON
--------------------------------------------------------

  CREATE TABLE "BASE_MENUBUTTON" 
   (	"MENUCODE" VARCHAR2(32 BYTE), 
	"BUTTONCODE" VARCHAR2(32 BYTE), 
	"BUTTONSORT" NUMBER(*,0), 
	"BUTTONTEXT" VARCHAR2(32 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_OFFICES_SCOPE
--------------------------------------------------------

  CREATE TABLE "BASE_OFFICES_SCOPE" 
   (	"ID" NUMBER(*,0), 
	"GUID" VARCHAR2(36 BYTE), 
	"OFFICESID" NUMBER(*,0), 
	"SCOPETYPE" NUMBER(*,0), 
	"SCOPEID" NUMBER(*,0), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"ZTID" NUMBER(*,0), 
	"ADD_TYPE" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
 

   COMMENT ON COLUMN "BASE_OFFICES_SCOPE"."SCOPETYPE" IS '1：管理分类范围';
--------------------------------------------------------
--  DDL for Table BASE_OFFSETINFO
--------------------------------------------------------

  CREATE TABLE "BASE_OFFSETINFO" 
   (	"ID" NUMBER(*,0), 
	"SHEETID" NUMBER(*,0), 
	"SHEETCODE" NVARCHAR2(50), 
	"DETAILID" NUMBER(*,0), 
	"INTERFACETYPE" NVARCHAR2(50), 
	"CREATEDATE" DATE, 
	"UPDATEDATE" DATE, 
	"PROVIDERID" NUMBER(*,0), 
	"PROVIDERCODE" NVARCHAR2(50), 
	"PROVIDERNAME" NVARCHAR2(200), 
	"PROVIDERPLACEID" NUMBER(*,0), 
	"PROVIDERPLACECODE" NVARCHAR2(50), 
	"TRANSID" NUMBER(*,0), 
	"ORGANIZATIONID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_ORGANIZATION
--------------------------------------------------------

  CREATE TABLE "BASE_ORGANIZATION" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"CODE" NVARCHAR2(16), 
	"NAME" NVARCHAR2(128), 
	"PARENTID" NUMBER(*,0), 
	"LEVELCOUNT" NUMBER(*,0), 
	"LEVELCODE" NVARCHAR2(64), 
	"ENDFLAG" NUMBER(*,0), 
	"STATUS" NUMBER(*,0), 
	"SORT" NUMBER(*,0), 
	"MEMO" NVARCHAR2(200), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATER" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDINT9" NUMBER(*,0), 
	"EXTENDINT10" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDSTRING1" VARCHAR2(200 BYTE), 
	"EXTENDSTRING2" VARCHAR2(200 BYTE), 
	"EXTENDSTRING3" VARCHAR2(200 BYTE), 
	"EXTENDSTRING4" VARCHAR2(200 BYTE), 
	"EXTENDSTRING5" VARCHAR2(200 BYTE), 
	"EXTENDSTRING6" VARCHAR2(200 BYTE), 
	"EXTENDSTRING7" VARCHAR2(200 BYTE), 
	"EXTENDSTRING8" VARCHAR2(200 BYTE), 
	"EXTENDSTRING9" VARCHAR2(200 BYTE), 
	"EXTENDSTRING10" VARCHAR2(200 BYTE), 
	"COMPANYID" NUMBER(*,0), 
	"ZTID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_PERSON
--------------------------------------------------------

  CREATE TABLE "BASE_PERSON" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"USERTYPE" NUMBER(*,0), 
	"CODE" NVARCHAR2(16), 
	"SPELL" NVARCHAR2(16), 
	"NAME" NVARCHAR2(64), 
	"SEX" CHAR(10 BYTE), 
	"EMAIL" NVARCHAR2(64), 
	"PHONE" NVARCHAR2(16), 
	"QQ" VARCHAR2(64 BYTE), 
	"PASSWORD" NVARCHAR2(128), 
	"SECRETKEY" NVARCHAR2(64), 
	"DEPARTID" NUMBER(*,0), 
	"COMPANYID" NUMBER(*,0), 
	"STATUS" NUMBER(*,0), 
	"SORT" NUMBER(*,0), 
	"MEMO" NVARCHAR2(200), 
	"ISAUDIT" NUMBER(*,0), 
	"AUDITBY" NUMBER(*,0), 
	"AUDITTIME" DATE, 
	"ISSINGLELOGIN" NUMBER(*,0), 
	"ISONLINE" NUMBER(*,0), 
	"LOGINCOUNT" NUMBER(*,0), 
	"LOGINTIME" DATE, 
	"LOGINIP" VARCHAR2(64 BYTE), 
	"LOGINCITY" VARCHAR2(64 BYTE), 
	"LASTCHANGEPASSWORD" DATE, 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATER" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"ZTID" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDSTRING1" NVARCHAR2(200), 
	"EXTENDSTRING2" NVARCHAR2(200), 
	"EXTENDSTRING3" NVARCHAR2(200), 
	"EXTENDSTRING4" NVARCHAR2(200), 
	"OFFICESID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 393216 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_PERSON_SCOPE
--------------------------------------------------------

  CREATE TABLE "BASE_PERSON_SCOPE" 
   (	"ID" NUMBER(*,0), 
	"PERSONID" NUMBER(*,0), 
	"SCOPETYPE" NUMBER(*,0), 
	"SCOPEID" NUMBER(*,0), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"ZTID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 131072 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_PRINTTEMP
--------------------------------------------------------

  CREATE TABLE "BASE_PRINTTEMP" 
   (	"ID" NUMBER(*,0), 
	"NAME" NVARCHAR2(128), 
	"WIDTH" NUMBER(*,0), 
	"HEIGHT" NUMBER(*,0), 
	"DATASOURCE" NVARCHAR2(500), 
	"BGIMAGE" BLOB, 
	"ITEMS" BLOB, 
	"ELEMENTS" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB" 
 LOB ("BGIMAGE") STORE AS BASICFILE (
  TABLESPACE "EWMSDB" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("ITEMS") STORE AS BASICFILE (
  TABLESPACE "EWMSDB" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("ELEMENTS") STORE AS BASICFILE (
  TABLESPACE "EWMSDB" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
 

   COMMENT ON COLUMN "BASE_PRINTTEMP"."NAME" IS '模板名称';
 
   COMMENT ON COLUMN "BASE_PRINTTEMP"."WIDTH" IS '模板宽度';
 
   COMMENT ON COLUMN "BASE_PRINTTEMP"."HEIGHT" IS '模板高度';
 
   COMMENT ON COLUMN "BASE_PRINTTEMP"."DATASOURCE" IS '数据源（表、视图名称）';
 
   COMMENT ON COLUMN "BASE_PRINTTEMP"."BGIMAGE" IS '背景图片';
 
   COMMENT ON COLUMN "BASE_PRINTTEMP"."ITEMS" IS '模板内容';
 
   COMMENT ON TABLE "BASE_PRINTTEMP"  IS '打印模板';
--------------------------------------------------------
--  DDL for Table BASE_PROVIDER
--------------------------------------------------------

  CREATE TABLE "BASE_PROVIDER" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"CODE" NVARCHAR2(200), 
	"NAME" NVARCHAR2(200), 
	"ADDRESS" NVARCHAR2(200), 
	"ZIPCODE" NUMBER(*,0), 
	"CONTACTPERSON" NVARCHAR2(64), 
	"CONTRACTPHONE" NVARCHAR2(64), 
	"FAX" NVARCHAR2(64), 
	"EMAIL" NVARCHAR2(64), 
	"STATUS" NUMBER(*,0), 
	"SORT" NUMBER(*,0), 
	"ZTID" NUMBER(*,0), 
	"MEMO" NVARCHAR2(200), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATER" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDINT9" NUMBER(*,0), 
	"EXTENDINT10" NUMBER(*,0), 
	"EXTENDSTRING1" VARCHAR2(200 BYTE), 
	"EXTENDSTRING2" VARCHAR2(200 BYTE), 
	"EXTENDSTRING3" VARCHAR2(200 BYTE), 
	"EXTENDSTRING4" VARCHAR2(200 BYTE), 
	"EXTENDSTRING5" VARCHAR2(200 BYTE), 
	"EXTENDSTRING6" VARCHAR2(200 BYTE), 
	"EXTENDSTRING7" VARCHAR2(200 BYTE), 
	"EXTENDSTRING8" VARCHAR2(200 BYTE), 
	"EXTENDSTRING9" VARCHAR2(200 BYTE), 
	"EXTENDSTRING10" VARCHAR2(200 BYTE), 
	"ADD_TYPE" NUMBER(*,0), 
	"DELETED" NUMBER(*,0) DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_RECEIPT
--------------------------------------------------------

  CREATE TABLE "BASE_RECEIPT" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"RECEIPTCODE" NVARCHAR2(64), 
	"RECEIPTNAME" NVARCHAR2(64), 
	"PREFIX" NVARCHAR2(16), 
	"PROCESSID" NUMBER(*,0), 
	"REPORTNAME" NVARCHAR2(128), 
	"RECEIPTSORT" NUMBER(*,0), 
	"RECEIPTSTATUS" NUMBER(*,0), 
	"RECEIPTMEMO" NVARCHAR2(255), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATER" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"RECEIPTTYPE" NUMBER(*,0), 
	"MENUCODE" NVARCHAR2(64)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_ROLE
--------------------------------------------------------

  CREATE TABLE "BASE_ROLE" 
   (	"ROLECODE" VARCHAR2(64 BYTE), 
	"ROLENAME" VARCHAR2(64 BYTE), 
	"ROLETYPE" NUMBER(*,0), 
	"SORT" NUMBER(*,0), 
	"ENABLED" NUMBER(*,0), 
	"REMARK" VARCHAR2(128 BYTE), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_ROLEMENU
--------------------------------------------------------

  CREATE TABLE "BASE_ROLEMENU" 
   (	"ROLECODE" VARCHAR2(64 BYTE), 
	"MENUCODE" VARCHAR2(64 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_ROLEMENUBUTTON
--------------------------------------------------------

  CREATE TABLE "BASE_ROLEMENUBUTTON" 
   (	"ROLECODE" VARCHAR2(64 BYTE), 
	"MENUCODE" VARCHAR2(64 BYTE), 
	"BUTTONCODE" VARCHAR2(64 BYTE), 
	"ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_ROUTESTEP
--------------------------------------------------------

  CREATE TABLE "BASE_ROUTESTEP" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"CODE" NVARCHAR2(50), 
	"NAME" NVARCHAR2(50), 
	"ROUTEID" NUMBER(*,0), 
	"PREVID" NUMBER(*,0), 
	"NEXTID" NUMBER(*,0), 
	"ROLEID" NVARCHAR2(64), 
	"PERSONID" NUMBER(*,0), 
	"ROUTETYPE" NUMBER(*,0), 
	"INPUTCONDITION" NVARCHAR2(255), 
	"INPUTPROCEDURE" NVARCHAR2(255), 
	"OPERPROCEDURE" NVARCHAR2(255), 
	"SHEETSTATUS" NUMBER(*,0), 
	"OPERBUTTONS" NVARCHAR2(2000), 
	"OPERFORMFIEDLS" NVARCHAR2(2000), 
	"DEVICESTATUS" NUMBER(*,0), 
	"FLAG1" NUMBER(*,0), 
	"FLAG2" NUMBER(*,0), 
	"STATUS" NUMBER(*,0), 
	"ORDERNUM" NUMBER(*,0), 
	"REMARK" NVARCHAR2(255), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"ZTID" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDSTRING1" VARCHAR2(200 BYTE), 
	"EXTENDSTRING2" VARCHAR2(200 BYTE), 
	"EXTENDSTRING3" VARCHAR2(200 BYTE), 
	"EXTENDSTRING4" VARCHAR2(200 BYTE), 
	"EXTENDSTRING5" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_SPAREPARTSCATE
--------------------------------------------------------

  CREATE TABLE "BASE_SPAREPARTSCATE" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"CODE" NVARCHAR2(16), 
	"NAME" NVARCHAR2(64), 
	"PARENTID" NUMBER(*,0), 
	"LEVELCOUNT" NUMBER(*,0), 
	"LEVELCODE" NVARCHAR2(64), 
	"ENDFLAG" NUMBER(*,0), 
	"STATUS" NUMBER(*,0), 
	"SORT" NUMBER(*,0), 
	"MEMO" NVARCHAR2(200), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATER" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDINT9" NUMBER(*,0), 
	"EXTENDINT10" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDSTRING1" VARCHAR2(200 BYTE), 
	"EXTENDSTRING2" VARCHAR2(200 BYTE), 
	"EXTENDSTRING3" VARCHAR2(200 BYTE), 
	"EXTENDSTRING4" VARCHAR2(200 BYTE), 
	"EXTENDSTRING5" VARCHAR2(200 BYTE), 
	"EXTENDSTRING6" VARCHAR2(200 BYTE), 
	"EXTENDSTRING7" VARCHAR2(200 BYTE), 
	"EXTENDSTRING8" VARCHAR2(200 BYTE), 
	"EXTENDSTRING9" VARCHAR2(200 BYTE), 
	"EXTENDSTRING10" VARCHAR2(200 BYTE), 
	"ADDTYPE" NUMBER(*,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
 

   COMMENT ON COLUMN "BASE_SPAREPARTSCATE"."ADDTYPE" IS '新增类型';
--------------------------------------------------------
--  DDL for Table BASE_UNITCONVERSION
--------------------------------------------------------

  CREATE TABLE "BASE_UNITCONVERSION" 
   (	"UNITID" NUMBER(*,0), 
	"BEFOREUNIT" NVARCHAR2(64), 
	"AFTERUNIT" NVARCHAR2(64), 
	"UNITRELATION" NVARCHAR2(255), 
	"UNITRATIO" NUMBER(20,8)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_USEDEP
--------------------------------------------------------

  CREATE TABLE "BASE_USEDEP" 
   (	"ID" NUMBER(*,0), 
	"ERPID" NUMBER(*,0), 
	"CODE" NVARCHAR2(50), 
	"NAME" NVARCHAR2(200), 
	"ORGANIZATIONID" NUMBER(*,0), 
	"STATUS" NUMBER(*,0), 
	"ZTID" NUMBER(*,0), 
	"ORGANIZATIONTYPE" NUMBER(*,0), 
	"MEMO" NVARCHAR2(255), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATER" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"ADD_TYPE" NUMBER(*,0), 
	"DELETED" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_USERROLE
--------------------------------------------------------

  CREATE TABLE "BASE_USERROLE" 
   (	"USERID" NUMBER(*,0), 
	"ROLECODE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_USERROLES
--------------------------------------------------------

  CREATE TABLE "BASE_USERROLES" 
   (	"USERID" NUMBER(*,0), 
	"ROLECODE" VARCHAR2(20 BYTE), 
	"ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table BASE_WAREHOUSE
--------------------------------------------------------

  CREATE TABLE "BASE_WAREHOUSE" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"CODE" NVARCHAR2(64), 
	"NAME" NVARCHAR2(64), 
	"PARENTID" NUMBER(*,0), 
	"LEVELCOUNT" NUMBER(*,0), 
	"LEVELCODE" NVARCHAR2(64), 
	"ENDFLAG" NUMBER(*,0), 
	"STATUS" NUMBER(*,0), 
	"SORT" NUMBER(*,0), 
	"MEMO" NVARCHAR2(200), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATER" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDINT9" NUMBER(*,0), 
	"EXTENDINT10" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDSTRING1" VARCHAR2(200 BYTE), 
	"EXTENDSTRING2" VARCHAR2(200 BYTE), 
	"EXTENDSTRING3" VARCHAR2(200 BYTE), 
	"EXTENDSTRING4" VARCHAR2(200 BYTE), 
	"EXTENDSTRING5" VARCHAR2(200 BYTE), 
	"EXTENDSTRING6" VARCHAR2(200 BYTE), 
	"EXTENDSTRING7" VARCHAR2(200 BYTE), 
	"EXTENDSTRING8" VARCHAR2(200 BYTE), 
	"EXTENDSTRING9" VARCHAR2(200 BYTE), 
	"EXTENDSTRING10" VARCHAR2(200 BYTE), 
	"PROPERTY" NUMBER(*,0), 
	"ZTID" NUMBER(*,0), 
	"ADDTYPE" NUMBER(*,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 196608 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
 

   COMMENT ON COLUMN "BASE_WAREHOUSE"."ADDTYPE" IS '新增类型';
--------------------------------------------------------
--  DDL for Table EQUIPMENTSTOCKPILE_TEST
--------------------------------------------------------

  CREATE TABLE "EQUIPMENTSTOCKPILE_TEST" 
   (	"EQPLIEID" NUMBER(*,0), 
	"EQPLIECODE" NVARCHAR2(128), 
	"EQPLIEMATERIEL" NUMBER(*,0), 
	"EQPLIENAME" NVARCHAR2(255), 
	"EQPLIEMODLE" NVARCHAR2(255), 
	"EQPLIECOUNT" FLOAT(126), 
	"EQPLIEPRICE" FLOAT(126), 
	"EQPLIEPURPOSEUSE" NVARCHAR2(500), 
	"EQPLIEUNIT" NVARCHAR2(255), 
	"EQPLIEOLDCOUNT" FLOAT(126), 
	"EQPLIETYPE" NUMBER(*,0), 
	"EQPLIESTOCKFRONTNUMBER" NUMBER(*,0), 
	"EQPLIEBALECODE" NVARCHAR2(255), 
	"EQPLIEBATCH" NVARCHAR2(255), 
	"EQPLIEUSERFULLIFE" NVARCHAR2(255), 
	"EQPLIEMANUAL" NVARCHAR2(1000), 
	"EQPLIERAISEWAR" NUMBER(*,0), 
	"EQPLIESANCTIFIED" NVARCHAR2(255), 
	"EQPLIEPROVIDER" NUMBER(*,0), 
	"EQPLIEMEMO" NVARCHAR2(500), 
	"CREATOR" NVARCHAR2(128), 
	"CREATEDATE" NVARCHAR2(128), 
	"UPDATER" NVARCHAR2(128), 
	"UPDATEDATE" NVARCHAR2(128), 
	"EQPLIEINT1" NUMBER(*,0), 
	"EQPLIEINT2" NUMBER(*,0), 
	"EQPLIEINT3" NUMBER(*,0), 
	"EQPLIEINT4" NUMBER(*,0), 
	"EQPLIEINT5" NUMBER(*,0), 
	"EQPLIEINT6" NUMBER(*,0), 
	"EQPLIEINT7" NUMBER(*,0), 
	"EQPLIEINT8" NUMBER(*,0), 
	"EQPLIEFLOAT1" FLOAT(126), 
	"EQPLIEFLOAT2" FLOAT(126), 
	"EQPLIEFLOAT3" FLOAT(126), 
	"EQPLIEFLOAT4" FLOAT(126), 
	"EQPLIESTRING1" NVARCHAR2(128), 
	"EQPLIESTRING2" NVARCHAR2(128), 
	"EQPLIESTRING3" NVARCHAR2(128), 
	"EQPLIESTRING4" NVARCHAR2(128), 
	"EQPLIESTRING5" NVARCHAR2(128), 
	"EQPLIESTRING6" NVARCHAR2(128), 
	"EQPLIESTRING7" NVARCHAR2(128), 
	"EQPLIESTRING8" NVARCHAR2(128), 
	"EQPLIESTRING9" NVARCHAR2(128), 
	"EQPLIESTRING10" NVARCHAR2(128), 
	"EQPLIECONTRACTSHEETID" NUMBER(*,0), 
	"EQPLIECONTRACTLISTID" NUMBER(*,0), 
	"EQPLIEINTOLISTID" NUMBER(*,0), 
	"EQPLIESTATE" NUMBER(*,0), 
	"EQPLIETYPECODE" NVARCHAR2(128)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table INF_TASK
--------------------------------------------------------

  CREATE TABLE "INF_TASK" 
   (	"ID" NUMBER(*,0), 
	"GUID" VARCHAR2(64 BYTE), 
	"INF_TASKNAME" VARCHAR2(128 BYTE), 
	"INF_TRIGGERKIND" NUMBER(*,0), 
	"INF_KIND" NUMBER(*,0), 
	"SUPPLYSYSTEM" NUMBER(*,0), 
	"CALLSYSTEM" NUMBER(*,0), 
	"SYNCKIND" NUMBER(*,0), 
	"REMARK" VARCHAR2(255 BYTE), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDSTRING1" VARCHAR2(255 BYTE), 
	"EXTENDSTRING2" VARCHAR2(255 BYTE), 
	"EXTENDSTRING3" VARCHAR2(255 BYTE), 
	"EXTENDSTRING4" VARCHAR2(255 BYTE), 
	"EXTENDSTRING5" VARCHAR2(255 BYTE), 
	"STATUS" NUMBER(*,0) DEFAULT 1, 
	"ADDTYPE" NUMBER(*,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
 

   COMMENT ON COLUMN "INF_TASK"."INF_TRIGGERKIND" IS '实时：1；手动：2；定时：3；其他：4.';
 
   COMMENT ON COLUMN "INF_TASK"."INF_KIND" IS '提供方:1;
调用方:2;
如果是调用方并且结果同步失败则可以手工触发';
 
   COMMENT ON COLUMN "INF_TASK"."SYNCKIND" IS 'webservice:1;
api:2;
FileExport:3;
dblink:4;
other:5.';
 
   COMMENT ON COLUMN "INF_TASK"."STATUS" IS '状态';
 
   COMMENT ON COLUMN "INF_TASK"."ADDTYPE" IS '新增类型';
--------------------------------------------------------
--  DDL for Table INF_TASKLOG
--------------------------------------------------------

  CREATE TABLE "INF_TASKLOG" 
   (	"ID" NUMBER(*,0), 
	"GUID" VARCHAR2(64 BYTE), 
	"INF_TASKDETAILNAME" VARCHAR2(128 BYTE), 
	"INF_TASKKIND" NUMBER(*,0), 
	"TASKID" NUMBER(*,0), 
	"SYNCRESULT" NUMBER(*,0), 
	"INF_CONTENT" VARCHAR2(4000 BYTE), 
	"INF_ERRORCONTENT" VARCHAR2(4000 BYTE), 
	"SYNCNUM" NUMBER(*,0), 
	"REMARK" VARCHAR2(255 BYTE), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,6), 
	"EXTENDFLOAT2" NUMBER(18,6), 
	"EXTENDFLOAT3" NUMBER(18,6), 
	"EXTENDFLOAT4" NUMBER(18,6), 
	"EXTENDSTRING1" VARCHAR2(128 BYTE), 
	"EXTENDSTRING2" VARCHAR2(128 BYTE), 
	"EXTENDSTRING3" VARCHAR2(128 BYTE), 
	"EXTENDSTRING4" VARCHAR2(128 BYTE), 
	"EXTENDSTRING5" VARCHAR2(128 BYTE), 
	"ADD_TYPE" NUMBER(*,0), 
	"INF_TYPE" NUMBER(*,0), 
	"INF_PUSH" NUMBER(*,0), 
	"INF_PULL" NUMBER(*,0), 
	"INF_MODE" NUMBER(*,0), 
	"INF_METHOD" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 196608 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
 

   COMMENT ON COLUMN "INF_TASKLOG"."INF_TASKKIND" IS '数据字典：组织机构、人员、入库单、出库单等';
 
   COMMENT ON COLUMN "INF_TASKLOG"."SYNCRESULT" IS '（未同步:0;同步成功:1;同步失败:2;同步异常:3）';
 
   COMMENT ON COLUMN "INF_TASKLOG"."INF_ERRORCONTENT" IS '包括错误点的类名 方法名 具体系统抛出异常内容';
--------------------------------------------------------
--  DDL for Table MES_CK
--------------------------------------------------------

  CREATE TABLE "MES_CK" 
   (	"ID" NUMBER(*,0), 
	"ASSET_NUMBER" NVARCHAR2(255), 
	"LOCATOR_CODE" NVARCHAR2(50), 
	"LOCATOR_ID" NUMBER(*,0), 
	"LOCATOR_NAME" NVARCHAR2(255), 
	"DEPT_ID" NUMBER(*,0), 
	"NOTES" NVARCHAR2(255), 
	"USE" NVARCHAR2(255), 
	"ALIAS_NAME" NVARCHAR2(255), 
	"ALIAS_ID" NUMBER(*,0), 
	"TRANS_UOM" NVARCHAR2(50), 
	"TRANS_QUANTITY" NUMBER(18,9), 
	"UOM" NVARCHAR2(50), 
	"QUANTITY" NUMBER(18,9), 
	"SUBINV_CODE" NVARCHAR2(255), 
	"ITEM_DESC" NVARCHAR2(255) DEFAULT '', 
	"ITEM_NO" NVARCHAR2(255), 
	"OWNING_ORGANIZATION_ID" NUMBER(*,0), 
	"OWNING_ORGANIZATION_NAME" NVARCHAR2(255), 
	"SERIAL_NUMBER_CONTROL_CODE" NVARCHAR2(255), 
	"SOURCE_LINE_ID" NUMBER(*,0), 
	"SOURCE_DOC_NUM" NVARCHAR2(255), 
	"SOURCE_HEADER_ID" NUMBER(*,0), 
	"SCHEDULT_LN_ID" NUMBER(*,0), 
	"SCHEDULT_HD_ID" NUMBER(*,0), 
	"SHIFTS" DATE, 
	"BATCH_NAME" NVARCHAR2(255), 
	"TRANS_DATE" DATE, 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY_ID" NUMBER(*,0), 
	"MAKER_DATE" DATE, 
	"MAKER_NAME" NVARCHAR2(255), 
	"MAKER_ID" NUMBER(*,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645);
  
--------------------------------------------------------
--  DDL for Table MES_RK
--------------------------------------------------------

  CREATE TABLE "MES_RK" 
   (	"ID" NUMBER(*,0), 
	"ASSET_NUMBER" NVARCHAR2(255), 
	"LOCATOR_CODE" NVARCHAR2(50), 
	"LOCATOR_ID" NUMBER(*,0), 
	"LOCATOR_NAME" NVARCHAR2(255), 
	"SUBINV_CODE" NVARCHAR2(255), 
	"ITEM_DESC" NVARCHAR2(255) DEFAULT '', 
	"ITEM_NO" NVARCHAR2(255), 
	"QUANTITY" NUMBER(18,9), 
	"UOM" NVARCHAR2(255), 
	"SHIFTS" DATE, 
	"BATCH_NAME" NVARCHAR2(255), 
	"UPDATE_DATE" DATE, 
	"UPDATE_BY_ID" NUMBER(*,0), 
	"PRODUCTION_ID" NUMBER(*,0), 
	"PRODUCTION_NAME" NVARCHAR2(255), 
	"MAKER_DATE" DATE, 
	"MAKER_NAME" NVARCHAR2(255), 
	"MAKER_ID" NUMBER(*,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645);
  
--------------------------------------------------------
--  DDL for Table ST_MAXCODE
--------------------------------------------------------

  CREATE TABLE "ST_MAXCODE" 
   (	"ST_MAXCODE_PREFIX" NVARCHAR2(64), 
	"ST_MAXCODE_SERIAL" NUMBER(10,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDFLOAT6" NUMBER(18,9), 
	"EXTENDFLOAT7" NUMBER(18,9), 
	"EXTENDFLOAT8" NUMBER(18,9), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table SYS_FORMTEMPLATE
--------------------------------------------------------

  CREATE TABLE "SYS_FORMTEMPLATE" 
   (	"ID" NUMBER, 
	"PROCESSDEFINITIONKEY" NVARCHAR2(100), 
	"FORMTEMCARD" NVARCHAR2(100), 
	"FORMTEMNAME" NVARCHAR2(100), 
	"FORMTEMPRE" NVARCHAR2(100), 
	"FORMTEMSTA" NUMBER, 
	"FORMTEMCOM" NVARCHAR2(100), 
	"FORMTEMMENU" NVARCHAR2(100), 
	"EXT1" NVARCHAR2(100), 
	"EXT2" NVARCHAR2(100), 
	"EXT3" NVARCHAR2(100), 
	"EXT4" NVARCHAR2(100), 
	"FORMTEMDIC" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table TEMP_DATA
--------------------------------------------------------

  CREATE TABLE "TEMP_DATA" 
   (	"ID" NUMBER(*,0), 
	"APPLICATIONNAME" VARCHAR2(256 BYTE), 
	"APPLICATIONURL" VARCHAR2(256 BYTE), 
	"MENUID" NUMBER(*,0), 
	"MENUCODE" VARCHAR2(256 BYTE), 
	"MENUNAME" VARCHAR2(256 BYTE), 
	"PARENTCODE" VARCHAR2(256 BYTE), 
	"URL" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_ATTACHFILE
--------------------------------------------------------

  CREATE TABLE "WZ_ATTACHFILE" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"FILENAME" NVARCHAR2(255), 
	"FILEALIASNAME" NVARCHAR2(255), 
	"FILEEXT" NVARCHAR2(255), 
	"FILETYPE" NVARCHAR2(32), 
	"FILEPATH" NVARCHAR2(255), 
	"MEMO" NVARCHAR2(255), 
	"STATUS" NUMBER(*,0), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"ATTACHRELATEID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_ORDERINFO
--------------------------------------------------------

  CREATE TABLE "WZ_ORDERINFO" 
   (	"ID" NUMBER(*,0), 
	"GUID" VARCHAR2(36 BYTE), 
	"ERPID" NVARCHAR2(50), 
	"ORDERID" NUMBER(*,0), 
	"ORDERNUM" NVARCHAR2(50), 
	"BUSINESSID" NUMBER(*,0), 
	"ERPSTOCKORGID" NUMBER(*,0), 
	"STOCKORGID" NUMBER(*,0), 
	"STOCKORGCODE" NVARCHAR2(50), 
	"ERPPROVIDERDEPID" NUMBER(*,0), 
	"PROVIDERDEPID" NUMBER(*,0), 
	"PROVIDERDEPCODE" NVARCHAR2(50), 
	"PROVIDERDEPNAME" NVARCHAR2(250), 
	"PROVIDERPLACEID" NUMBER(*,0), 
	"PROVIDERPLACECODE" NVARCHAR2(50), 
	"ISSUEID" NUMBER(*,0), 
	"ISSUECODE" NUMBER(*,0), 
	"FYID" NUMBER(*,0), 
	"ERPROWNUM" NVARCHAR2(50), 
	"ORDERROWID" NUMBER(*,0), 
	"MATERIALCODE" NVARCHAR2(50), 
	"DESCRIPTION" NVARCHAR2(500), 
	"DETAILUNIT" NVARCHAR2(50), 
	"DETAILCOUNT" NUMBER(18,9), 
	"NOTAXPRICE" NUMBER(18,9), 
	"NOTAXSUM" NUMBER(18,9), 
	"BASEUNIT" NVARCHAR2(50), 
	"BASEUNITCOUNT" NUMBER(18,9), 
	"BASEUNITPRICE" NUMBER(18,9), 
	"BASEUNITSUM" NUMBER(18,9), 
	"TAXRATE" NUMBER(18,9), 
	"CONSIGNMENT" NUMBER(*,0), 
	"DEPARTID" NUMBER(*,0), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDFLOAT6" NUMBER(18,9), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"EXTENDSTRING6" NVARCHAR2(255), 
	"EXTENDSTRING7" NVARCHAR2(255), 
	"EXTENDSTRING8" NVARCHAR2(255), 
	"ORDERTYPE" VARCHAR2(50 BYTE), 
	"TAXPRICE" NUMBER(18,9), 
	"BASEUNITTAXPRICE" NUMBER(18,9)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_PDDETAIL
--------------------------------------------------------

  CREATE TABLE "WZ_PDDETAIL" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"TAGCODE" NVARCHAR2(50), 
	"SHEETID" NUMBER(*,0), 
	"SHEETDETAILID" NUMBER(*,0), 
	"CATEGORYID" NUMBER(*,0), 
	"MATERIALID" NUMBER(*,0), 
	"MATERIALCODE" NVARCHAR2(50), 
	"MATERIALNAME" NVARCHAR2(255), 
	"MATERIALBRAND" NVARCHAR2(255), 
	"MATERIALMODEL" NVARCHAR2(255), 
	"MATERIALSPECIFICATION" NVARCHAR2(255), 
	"DESCRIPTION" NVARCHAR2(500), 
	"DETAILUNIT" NUMBER(*,0), 
	"CURRENCYUNIT" NVARCHAR2(20), 
	"STOREID" NUMBER(*,0), 
	"STORELOCATIONID" NUMBER(*,0), 
	"STORELOCATIONCODE" NVARCHAR2(255), 
	"STORELOCATIONNAME" NVARCHAR2(50), 
	"PROVIDERDEPID" NUMBER(*,0), 
	"PLANDEPARTID" NUMBER(*,0), 
	"NOTAXPRICE" NUMBER(18,9), 
	"TAXRATE" NUMBER(18,9), 
	"NOTAXSUM" NUMBER(18,9), 
	"TAXPRICE" NUMBER(18,9), 
	"TAXSUM" NUMBER(18,9), 
	"STATUS" NUMBER(*,0), 
	"MEMO" NVARCHAR2(255), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"EXPIRATIONTIME" DATE, 
	"STOCKSTATUS" NUMBER(*,0), 
	"STOCKRESULT" NUMBER(*,0), 
	"STOCKUNNORMALINFO" NVARCHAR2(500), 
	"ZTID" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDFLOAT6" NUMBER(18,9), 
	"EXTENDFLOAT7" NUMBER(18,9), 
	"EXTENDFLOAT8" NUMBER(18,9), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"EXTENDSTRING6" NVARCHAR2(255), 
	"EXTENDSTRING7" NVARCHAR2(255), 
	"EXTENDSTRING8" NVARCHAR2(255), 
	"EXTENDSTRING9" NVARCHAR2(255), 
	"EXTENDSTRING10" NVARCHAR2(255), 
	"EXTENDDATE1" DATE, 
	"EXTENDDATE2" DATE, 
	"EXTENDDATE3" DATE, 
	"EXTENDDATE4" DATE, 
	"STOCKDATE" DATE, 
	"STOCKMAN" NUMBER(*,0), 
	"DETAILCOUNT" NUMBER(18,9), 
	"SYSCOUNT" NUMBER(18,9), 
	"DETAILUNITNAME" NVARCHAR2(20), 
	"ISEQUIPMENT" NUMBER(*,0), 
	"OWNERTYPE" NUMBER(*,0), 
	"ENABLESN" NUMBER(*,0), 
	"SNCODE" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_PURCHASEPLAN
--------------------------------------------------------

  CREATE TABLE "WZ_PURCHASEPLAN" 
   (	"ID" NUMBER(*,0), 
	"PLANCODE" NVARCHAR2(50), 
	"CREATEDATE" DATE, 
	"NEEDDATE" DATE, 
	"APPLYDEPID" NUMBER(*,0), 
	"USEDEPID" NUMBER(*,0), 
	"MATERIALCODE" NVARCHAR2(50), 
	"MATERIALDES" NVARCHAR2(255), 
	"PURCHASETYPE" NUMBER(*,0), 
	"PLANTYPE" NUMBER(*,0), 
	"SOURCETYPE" NVARCHAR2(50), 
	"UNIT" NVARCHAR2(50), 
	"COUNT" NUMBER(18,9), 
	"PRICE" NUMBER(18,9), 
	"BASEUNIT" NVARCHAR2(50), 
	"BASECOUNT" NUMBER(18,9), 
	"BASEPRICE" NUMBER(18,9), 
	"PURCHASEMODEL" NVARCHAR2(100), 
	"MANUFACTURER" NVARCHAR2(200), 
	"UPDATEDATE" DATE, 
	"ERPID" NUMBER(*,0), 
	"ORDERTYPE" NVARCHAR2(100), 
	"CONSIGNMENT" NUMBER(*,0), 
	"ZTID" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDFLOAT6" NUMBER(18,9), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"EXTENDSTRING6" NVARCHAR2(255), 
	"EXTENDSTRING7" NVARCHAR2(255), 
	"EXTENDSTRING8" NVARCHAR2(255), 
	"ERPDETAILID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_RECEIVINGLOG
--------------------------------------------------------

  CREATE TABLE "WZ_RECEIVINGLOG" 
   (	"ID" NUMBER(*,0), 
	"GUID" VARCHAR2(36 BYTE), 
	"ORDERID" NUMBER(*,0), 
	"RELATIONGUID" VARCHAR2(36 BYTE), 
	"CONTENT" VARCHAR2(200 BYTE), 
	"CREATEDATE" DATE, 
	"CREATER" NUMBER(*,0), 
	"COUNT" NUMBER(18,9), 
	"OPERATIONTYPE" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDSTRING1" VARCHAR2(255 BYTE), 
	"EXTENDSTRING2" VARCHAR2(255 BYTE), 
	"EXTENDSTRING3" VARCHAR2(255 BYTE), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_ROUTEHISTORY
--------------------------------------------------------

  CREATE TABLE "WZ_ROUTEHISTORY" 
   (	"ID" NUMBER, 
	"SHEETID" NUMBER(*,0), 
	"ROUTEID" NUMBER(*,0), 
	"ROUTESTEPID" NUMBER(*,0), 
	"NEXTID" NUMBER(*,0), 
	"PREVID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 131072 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_SHEET
--------------------------------------------------------

  CREATE TABLE "WZ_SHEET" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"NAME" NVARCHAR2(255), 
	"CODE" NVARCHAR2(50), 
	"KINDID" NUMBER(*,0), 
	"TYPEID" NUMBER(*,0), 
	"DUTYID" NUMBER(*,0), 
	"DEPARTID" NUMBER(*,0), 
	"ROUTEID" NUMBER(*,0), 
	"ROUTE_STEPID" NUMBER(*,0), 
	"ROLEID" NUMBER(*,0), 
	"RELATESHEET" NUMBER(*,0), 
	"SUBMITMANID" NUMBER(*,0), 
	"SUBMITTIME" DATE, 
	"STATUS" NUMBER(*,0), 
	"MEMO" NVARCHAR2(255), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"ZTID" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDFLOAT6" NUMBER(18,9), 
	"EXTENDFLOAT7" NUMBER(18,9), 
	"EXTENDFLOAT8" NUMBER(18,9), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"EXTENDSTRING6" NVARCHAR2(255), 
	"EXTENDSTRING7" NVARCHAR2(255), 
	"EXTENDSTRING8" NVARCHAR2(255), 
	"EXTENDSTRING9" NVARCHAR2(255), 
	"EXTENDSTRING10" NVARCHAR2(255), 
	"ORDERNUM" NVARCHAR2(200), 
	"RECEIVENUM" NVARCHAR2(200), 
	"USEDDEPARTID" NUMBER(*,0), 
	"STOREMANID" NUMBER(*,0), 
	"USEDMANID" NUMBER(*,0), 
	"PROVIDERDEPID" NUMBER(*,0), 
	"OWNERDEP" NUMBER(*,0), 
	"ORDERTYPE" VARCHAR2(50 BYTE), 
	"OFFICESID" NUMBER(*,0), 
	"FUNDSSOURCE" NUMBER(*,0), 
	"APPLYDEPARTID" NUMBER(*,0), 
	"URL" NVARCHAR2(255)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_SHEETCKDETAIL
--------------------------------------------------------

  CREATE TABLE "WZ_SHEETCKDETAIL" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"SHEETID" NUMBER(*,0), 
	"SHEETDETAILID" NUMBER(*,0), 
	"CATEGORYID" NUMBER(*,0), 
	"MATERIALID" NUMBER(*,0), 
	"MATERIALCODE" NVARCHAR2(50), 
	"MATERIALNAME" NVARCHAR2(255), 
	"MATERIALBRAND" NVARCHAR2(255), 
	"MATERIALMODEL" NVARCHAR2(255), 
	"DETAILUNIT" NUMBER(*,0), 
	"CURRENCYUNIT" NVARCHAR2(20), 
	"STOREID" NUMBER(*,0), 
	"PROVIDERDEPID" NUMBER(*,0), 
	"STATUS" NUMBER(*,0), 
	"MEMO" NVARCHAR2(255), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"ZTID" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDFLOAT6" NUMBER(18,9), 
	"EXTENDFLOAT7" NUMBER(18,9), 
	"EXTENDFLOAT8" NUMBER(18,9), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"EXTENDSTRING6" NVARCHAR2(255), 
	"EXTENDSTRING7" NVARCHAR2(255), 
	"EXTENDSTRING8" NVARCHAR2(255), 
	"EXTENDSTRING9" NVARCHAR2(255), 
	"EXTENDSTRING10" NVARCHAR2(255), 
	"EXTENDDATE1" DATE, 
	"EXTENDDATE2" DATE, 
	"EXTENDDATE3" DATE, 
	"EXTENDDATE4" DATE, 
	"NOTAXPRICE" NUMBER(18,9), 
	"TAXRATE" NUMBER(18,9), 
	"NOTAXSUM" NUMBER(18,9), 
	"MATERIALSPECIFICATION" NVARCHAR2(255), 
	"DESCRIPTION" NVARCHAR2(500), 
	"EXPIRATIONTIME" DATE, 
	"STORELOCATIONCODE" NVARCHAR2(255), 
	"TAGCODE" NVARCHAR2(50), 
	"TAXPRICE" NUMBER(18,9), 
	"TAXSUM" NUMBER(18,9), 
	"STORELOCATIONID" NUMBER(*,0), 
	"PLANDEPARTID" NUMBER(*,0), 
	"STORELOCATIONNAME" NVARCHAR2(50), 
	"DETAILCOUNT" NUMBER(18,9), 
	"ISEQUIPMENT" NUMBER(*,0), 
	"OWNERTYPE" NUMBER(*,0), 
	"ENABLESN" NUMBER(*,0), 
	"SNCODE" NVARCHAR2(50), 
	"DETAILUNITNAME" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_SHEETDETAIL
--------------------------------------------------------

  CREATE TABLE "WZ_SHEETDETAIL" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"SHEETID" NUMBER(*,0), 
	"SHEETDETAILID" NUMBER(*,0), 
	"CATEGORYID" NUMBER(*,0), 
	"MATERIALID" NUMBER(*,0), 
	"MATERIALCODE" NVARCHAR2(50), 
	"MATERIALNAME" NVARCHAR2(255), 
	"MATERIALBRAND" NVARCHAR2(255), 
	"MATERIALMODEL" NVARCHAR2(255), 
	"DETAILUNIT" NUMBER(*,0), 
	"CURRENCYUNIT" NVARCHAR2(20), 
	"STOREID" NUMBER(*,0), 
	"PROVIDERDEPID" NUMBER(*,0), 
	"STATUS" NUMBER(*,0), 
	"MEMO" NVARCHAR2(255), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"ZTID" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDFLOAT6" NUMBER(18,9), 
	"EXTENDFLOAT7" NUMBER(18,9), 
	"EXTENDFLOAT8" NUMBER(18,9), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"EXTENDSTRING6" NVARCHAR2(255), 
	"EXTENDSTRING7" NVARCHAR2(255), 
	"EXTENDSTRING8" NVARCHAR2(255), 
	"EXTENDSTRING9" NVARCHAR2(255), 
	"EXTENDSTRING10" NVARCHAR2(255), 
	"EXTENDDATE1" DATE, 
	"EXTENDDATE2" DATE, 
	"EXTENDDATE3" DATE, 
	"EXTENDDATE4" DATE, 
	"NOTAXPRICE" NUMBER(18,9), 
	"TAXRATE" NUMBER(18,9), 
	"NOTAXSUM" NUMBER(18,9), 
	"MATERIALSPECIFICATION" NVARCHAR2(255), 
	"DESCRIPTION" NVARCHAR2(500), 
	"EXPIRATIONTIME" DATE, 
	"STORELOCATIONCODE" NVARCHAR2(255), 
	"TAGCODE" NVARCHAR2(50), 
	"TAXPRICE" NUMBER(18,9), 
	"TAXSUM" NUMBER(18,9), 
	"STORELOCATIONID" NUMBER(*,0), 
	"PLANDEPARTID" NUMBER(*,0), 
	"STORELOCATIONNAME" NVARCHAR2(50), 
	"DETAILCOUNT" NUMBER(18,9), 
	"ISEQUIPMENT" NUMBER(*,0), 
	"OWNERTYPE" NUMBER(*,0), 
	"ENABLESN" NUMBER(*,0), 
	"SNCODE" NVARCHAR2(50), 
	"DETAILUNITNAME" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_SHEETRKDETAIL
--------------------------------------------------------

  CREATE TABLE "WZ_SHEETRKDETAIL" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"SHEETID" NUMBER(*,0), 
	"SHEETDETAILID" NUMBER(*,0), 
	"CATEGORYID" NUMBER(*,0), 
	"MATERIALID" NUMBER(*,0), 
	"MATERIALCODE" NVARCHAR2(50), 
	"MATERIALNAME" NVARCHAR2(255), 
	"MATERIALBRAND" NVARCHAR2(255), 
	"MATERIALMODEL" NVARCHAR2(255), 
	"DETAILUNIT" NUMBER(*,0), 
	"CURRENCYUNIT" NVARCHAR2(20), 
	"STOREID" NUMBER(*,0), 
	"PROVIDERDEPID" NUMBER(*,0), 
	"STATUS" NUMBER(*,0), 
	"MEMO" NVARCHAR2(255), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"ZTID" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDFLOAT6" NUMBER(18,9), 
	"EXTENDFLOAT7" NUMBER(18,9), 
	"EXTENDFLOAT8" NUMBER(18,9), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"EXTENDSTRING6" NVARCHAR2(255), 
	"EXTENDSTRING7" NVARCHAR2(255), 
	"EXTENDSTRING8" NVARCHAR2(255), 
	"EXTENDSTRING9" NVARCHAR2(255), 
	"EXTENDSTRING10" NVARCHAR2(255), 
	"EXTENDDATE1" DATE, 
	"EXTENDDATE2" DATE, 
	"EXTENDDATE3" DATE, 
	"EXTENDDATE4" DATE, 
	"NOTAXPRICE" NUMBER(18,9), 
	"TAXRATE" NUMBER(18,9), 
	"NOTAXSUM" NUMBER(18,9), 
	"MATERIALSPECIFICATION" NVARCHAR2(255), 
	"DESCRIPTION" NVARCHAR2(500), 
	"EXPIRATIONTIME" DATE, 
	"STORELOCATIONCODE" NVARCHAR2(255), 
	"TAGCODE" NVARCHAR2(50), 
	"TAXPRICE" NUMBER(18,9), 
	"TAXSUM" NUMBER(18,9), 
	"STORELOCATIONID" NUMBER(*,0), 
	"PLANDEPARTID" NUMBER(*,0), 
	"STORELOCATIONNAME" NVARCHAR2(50), 
	"DETAILCOUNT" NUMBER(18,9), 
	"ISEQUIPMENT" NUMBER(*,0), 
	"OWNERTYPE" NUMBER(*,0), 
	"ENABLESN" NUMBER(*,0), 
	"SNCODE" NVARCHAR2(50), 
	"DETAILUNITNAME" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_SHEETRKSUBDETAIL
--------------------------------------------------------

  CREATE TABLE "WZ_SHEETRKSUBDETAIL" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"DETAILID" NUMBER(*,0), 
	"TAGCODE" NVARCHAR2(50), 
	"SUBSTOCK" NUMBER(*,0), 
	"SUBDETAILCOUNT" NUMBER(18,9), 
	"UNIT" NUMBER(*,0), 
	"STOREID" NUMBER(*,0), 
	"STORELOCATIONCODE" NVARCHAR2(255), 
	"STORELOCATIONNAME" NVARCHAR2(255), 
	"ADDTIME" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"EXTENDSTRING6" NVARCHAR2(255), 
	"STORELOCATIONID" NUMBER(*,0), 
	"UNITNAME" NVARCHAR2(20), 
	"SNCODE" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_SHEETSUBDETAIL
--------------------------------------------------------

  CREATE TABLE "WZ_SHEETSUBDETAIL" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"DETAILID" NUMBER(*,0), 
	"TAGCODE" NVARCHAR2(50), 
	"SUBSTOCK" NUMBER(*,0), 
	"SUBDETAILCOUNT" NUMBER(18,9), 
	"UNIT" NUMBER(*,0), 
	"STOREID" NUMBER(*,0), 
	"STORELOCATIONCODE" NVARCHAR2(255), 
	"STORELOCATIONNAME" NVARCHAR2(255), 
	"ADDTIME" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"EXTENDSTRING6" NVARCHAR2(255), 
	"STORELOCATIONID" NUMBER(*,0), 
	"UNITNAME" NVARCHAR2(20), 
	"SNCODE" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 8192 MINEXTENTS 1
  FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_SHEET_CK
--------------------------------------------------------

  CREATE TABLE "WZ_SHEET_CK" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"NAME" NVARCHAR2(255), 
	"CODE" NVARCHAR2(50), 
	"KINDID" NUMBER(*,0), 
	"TYPEID" NUMBER(*,0), 
	"DUTYID" NUMBER(*,0), 
	"DEPARTID" NUMBER(*,0), 
	"ROUTEID" NUMBER(*,0), 
	"ROUTE_STEPID" NUMBER(*,0), 
	"ROLEID" NUMBER(*,0), 
	"RELATESHEET" NUMBER(*,0), 
	"SUBMITMANID" NUMBER(*,0), 
	"SUBMITTIME" DATE, 
	"STATUS" NUMBER(*,0), 
	"MEMO" NVARCHAR2(255), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"ZTID" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDFLOAT6" NUMBER(18,9), 
	"EXTENDFLOAT7" NUMBER(18,9), 
	"EXTENDFLOAT8" NUMBER(18,9), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"EXTENDSTRING6" NVARCHAR2(255), 
	"EXTENDSTRING7" NVARCHAR2(255), 
	"EXTENDSTRING8" NVARCHAR2(255), 
	"EXTENDSTRING9" NVARCHAR2(255), 
	"EXTENDSTRING10" NVARCHAR2(255), 
	"ORDERNUM" NVARCHAR2(200), 
	"RECEIVENUM" NVARCHAR2(200), 
	"USEDDEPARTID" NUMBER(*,0), 
	"STOREMANID" NUMBER(*,0), 
	"USEDMANID" NUMBER(*,0), 
	"PROVIDERDEPID" NUMBER(*,0), 
	"OWNERDEP" NUMBER(*,0), 
	"ORDERTYPE" VARCHAR2(50 BYTE), 
	"OFFICESID" NUMBER(*,0), 
	"FUNDSSOURCE" NUMBER(*,0), 
	"APPLYDEPARTID" NUMBER(*,0), 
	"URL" NVARCHAR2(255)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_SHEET_RK
--------------------------------------------------------

  CREATE TABLE "WZ_SHEET_RK" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"NAME" NVARCHAR2(255), 
	"CODE" NVARCHAR2(50), 
	"KINDID" NUMBER(*,0), 
	"TYPEID" NUMBER(*,0), 
	"DUTYID" NUMBER(*,0), 
	"DEPARTID" NUMBER(*,0), 
	"ROUTEID" NUMBER(*,0), 
	"ROUTE_STEPID" NUMBER(*,0), 
	"ROLEID" NUMBER(*,0), 
	"RELATESHEET" NUMBER(*,0), 
	"SUBMITMANID" NUMBER(*,0), 
	"SUBMITTIME" DATE, 
	"STATUS" NUMBER(*,0), 
	"MEMO" NVARCHAR2(255), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"ZTID" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDFLOAT6" NUMBER(18,9), 
	"EXTENDFLOAT7" NUMBER(18,9), 
	"EXTENDFLOAT8" NUMBER(18,9), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"EXTENDSTRING6" NVARCHAR2(255), 
	"EXTENDSTRING7" NVARCHAR2(255), 
	"EXTENDSTRING8" NVARCHAR2(255), 
	"EXTENDSTRING9" NVARCHAR2(255), 
	"EXTENDSTRING10" NVARCHAR2(255), 
	"ORDERNUM" NVARCHAR2(200), 
	"RECEIVENUM" NVARCHAR2(200), 
	"USEDDEPARTID" NUMBER(*,0), 
	"STOREMANID" NUMBER(*,0), 
	"USEDMANID" NUMBER(*,0), 
	"PROVIDERDEPID" NUMBER(*,0), 
	"OWNERDEP" NUMBER(*,0), 
	"ORDERTYPE" VARCHAR2(50 BYTE), 
	"OFFICESID" NUMBER(*,0), 
	"FUNDSSOURCE" NUMBER(*,0), 
	"APPLYDEPARTID" NUMBER(*,0), 
	"URL" NVARCHAR2(255)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_STOCK
--------------------------------------------------------

  CREATE TABLE "WZ_STOCK" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"SHEETID" NUMBER(*,0), 
	"SHEETDETAILID" NUMBER(*,0), 
	"MATERIALID" NUMBER(*,0), 
	"MATERIALCODE" NVARCHAR2(50), 
	"MATERIALNAME" NVARCHAR2(255), 
	"MATERIALBRAND" NVARCHAR2(255), 
	"MATERIALMODEL" NVARCHAR2(255), 
	"DETAILUNIT" NVARCHAR2(20), 
	"CURRENCYUNIT" NVARCHAR2(20), 
	"STOREID" NUMBER(*,0), 
	"PROVIDERDEPID" NUMBER(*,0), 
	"STATUS" NUMBER(*,0), 
	"MEMO" NVARCHAR2(255), 
	"CREATOR" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATOR" NUMBER(*,0), 
	"UPDATEDATE" DATE, 
	"ZTID" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"EXTENDSTRING6" NVARCHAR2(255), 
	"EXTENDSTRING7" NVARCHAR2(255), 
	"EXTENDSTRING8" NVARCHAR2(255), 
	"EXTENDSTRING9" NVARCHAR2(255), 
	"EXTENDSTRING10" NVARCHAR2(255), 
	"MATERIALSPECIFICATION" NVARCHAR2(255), 
	"DESCRIPTION" NVARCHAR2(500), 
	"EXPIRATIONTIME" DATE, 
	"ORDERNUM" NVARCHAR2(200), 
	"RECEIVENUM" NVARCHAR2(200), 
	"STORELOCATIONCODE" NVARCHAR2(255), 
	"TAGCODE" NVARCHAR2(50), 
	"STORELOCATIONNAME" NVARCHAR2(255), 
	"PLANDEPARTID" NUMBER(*,0), 
	"STORELOCATIONID" NUMBER(*,0), 
	"CATEGORYID" NUMBER(*,0), 
	"OWNERDEP" NUMBER(*,0), 
	"PURCHASETYPE" NUMBER(*,0), 
	"ISEQUIPMENT" NUMBER(*,0), 
	"OWNERTYPE" NUMBER(*,0), 
	"ENABLESN" NUMBER(*,0), 
	"SNCODE" NVARCHAR2(50), 
	"DETAILUNITNAME" NVARCHAR2(20), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDFLOAT5" NUMBER(18,9), 
	"EXTENDFLOAT6" NUMBER(18,9), 
	"EXTENDFLOAT7" NUMBER(18,9), 
	"EXTENDFLOAT8" NUMBER(18,9), 
	"NOTAXPRICE" NUMBER(18,9), 
	"TAXPRICE" NUMBER(18,9), 
	"TAXRATE" NUMBER(18,9), 
	"DETAILPRICE" NUMBER(18,9), 
	"DETAILSUM" NUMBER(18,9), 
	"STORECOUNT" NUMBER(18,9), 
	"EXTENDDATE2" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_STOCKSUBDETAIL
--------------------------------------------------------

  CREATE TABLE "WZ_STOCKSUBDETAIL" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"DETAILID" NUMBER(*,0), 
	"TAGCODE" NVARCHAR2(50), 
	"SUBDETAILCOUNT" NUMBER(18,9), 
	"UNIT" NUMBER(*,0), 
	"STOREID" NUMBER(*,0), 
	"STORELOCATIONCODE" NVARCHAR2(255), 
	"STORELOCATIONNAME" NVARCHAR2(255), 
	"ADDTIME" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"EXTENDSTRING6" NVARCHAR2(255), 
	"STORELOCATIONID" NUMBER(*,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 8192 MINEXTENTS 1
  FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_STORELOG
--------------------------------------------------------

  CREATE TABLE "WZ_STORELOG" 
   (	"ID" NUMBER(*,0), 
	"STORECONTENTDES" NVARCHAR2(255), 
	"SHEETTYPEID" NUMBER(*,0), 
	"SHEETDETAILID" NUMBER(*,0), 
	"PRODUCTCOUNT" NUMBER(*,0), 
	"CREATEMANID" NUMBER(*,0), 
	"EXECUTETIME" DATE, 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDFLOAT1" NUMBER(18,9), 
	"EXTENDFLOAT2" NUMBER(18,9), 
	"EXTENDFLOAT3" NUMBER(18,9), 
	"EXTENDFLOAT4" NUMBER(18,9), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255), 
	"SHEETSUBDETAILID" NUMBER(*,0), 
	"PRODUCTPRICE" NUMBER(18,9), 
	"TAXRATE" NUMBER(18,9), 
	"PRODUCTUNIT" NVARCHAR2(50), 
	"STORELOCATIONCODE" NVARCHAR2(50), 
	"STORELOCATIONID" NUMBER(*,0), 
	"TAGCODE" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  
--------------------------------------------------------
--  DDL for Table WZ_WAITTASK
--------------------------------------------------------

  CREATE TABLE "WZ_WAITTASK" 
   (	"ID" NUMBER(*,0), 
	"GUID" NVARCHAR2(64), 
	"ROUTESTEPID" NUMBER(*,0), 
	"MENUID" VARCHAR2(64 BYTE), 
	"SHEETID" NUMBER(*,0), 
	"HANDINGMANID" NUMBER(*,0), 
	"HANDINGTIME" DATE, 
	"PREVSUBMITMANID" NUMBER(*,0), 
	"PREVSUBMITTIME" DATE, 
	"NEXTHANDMANID" NUMBER(*,0), 
	"JUMPPATH" NVARCHAR2(255), 
	"HANDSUGGESTION" NVARCHAR2(255), 
	"HANDRESULT" NUMBER(*,0), 
	"ENCRYPTCODE" NVARCHAR2(64), 
	"STATUS" NUMBER(*,0), 
	"MEMO" NVARCHAR2(255), 
	"CREATOR" NUMBER(*,0), 
	"CREATETIME" DATE, 
	"ZTID" NUMBER(*,0), 
	"EXTENDINT1" NUMBER(*,0), 
	"EXTENDINT2" NUMBER(*,0), 
	"EXTENDINT3" NUMBER(*,0), 
	"EXTENDINT4" NUMBER(*,0), 
	"EXTENDINT5" NUMBER(*,0), 
	"EXTENDINT6" NUMBER(*,0), 
	"EXTENDINT7" NUMBER(*,0), 
	"EXTENDINT8" NUMBER(*,0), 
	"EXTENDSTRING1" NVARCHAR2(255), 
	"EXTENDSTRING2" NVARCHAR2(255), 
	"EXTENDSTRING3" NVARCHAR2(255), 
	"EXTENDSTRING4" NVARCHAR2(255), 
	"EXTENDSTRING5" NVARCHAR2(255)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 458752 NEXT 8192 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT);
  

--------------------------------------------------------
--  DDL for View V_ALLSHEET
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ALLSHEET" ("ID", "GUID", "CODE", "NAME", "RELATESHEET", "DUTYID", "TYPEID", "DEPARTID", "PROVIDERDEPID", "SUBMITMANID", "SUBMITTIME", "STATUS", "ORDERNUM", "RECEIVENUM", "STOREMANID", "USEDMANID", "ROUTEID", "REPORTNAME", "PREFIX", "KINDID", "DEPARTNAME", "DEPARTLEVELCODE", "DEPARTCODE", "CREATOR", "CREATEDATE", "CURRENTROUTEID", "DEPARTLEVELCOUNT") AS 
  SELECT "ID","GUID","CODE","NAME","RELATESHEET","DUTYID","TYPEID","DEPARTID","PROVIDERDEPID","SUBMITMANID","SUBMITTIME","STATUS","ORDERNUM","RECEIVENUM","STOREMANID","USEDMANID","ROUTEID","REPORTNAME","PREFIX","KINDID","DEPARTNAME","DEPARTLEVELCODE","DEPARTCODE","CREATOR","CREATEDATE","CURRENTROUTEID","DEPARTLEVELCOUNT" FROM V_SHEET_RK
UNION
SELECT "ID","GUID","CODE","NAME","RELATESHEET","DUTYID","TYPEID","DEPARTID","PROVIDERDEPID","SUBMITMANID","SUBMITTIME","STATUS","ORDERNUM","RECEIVENUM","STOREMANID","USEDMANID","ROUTEID","REPORTNAME","PREFIX","KINDID","DEPARTNAME","DEPARTLEVELCODE","DEPARTCODE","CREATOR","CREATEDATE","CURRENTROUTEID","DEPARTLEVELCOUNT" FROM V_SHEET_CK
;
--------------------------------------------------------
--  DDL for View V_ALLSONDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ALLSONDETAILS" ("ID", "GUID", "DETAILID", "TAGCODE", "SUBSTOCK", "SUBDETAILCOUNT", "STOREID", "STORELOCATIONID", "STORELOCATIONNAME", "STORELOCATIONCODE", "ADDTIME", "UNITNAME", "EXTENDINT2", "EXTENDINT3", "EXTENDSTRING1", "SNCODE", "HOUSENAME", "PERSONNAME", "SONTYPE") AS 
  SELECT
  A.ID,
  A.GUID,
  A.DETAILID,
  A.TAGCODE,
  A.SUBSTOCK,
  A.SUBDETAILCOUNT,
  A.STOREID,
  A.STORELOCATIONID,
  A.STORELOCATIONNAME,
  A.STORELOCATIONCODE,
  A.ADDTIME,
  A.UNITNAME,
  A.EXTENDINT2,
  A.EXTENDINT3,
  A.EXTENDSTRING1,
  A.SNCODE,
  B.NAME AS HOUSENAME,
  C.NAME AS PERSONNAME,
  CASE A.EXTENDINT2
        WHEN 0 THEN '出库' WHEN 1 THEN '入库'  ELSE '' END AS SONTYPE
  FROM WZ_SHEETSUBDETAIL A
  LEFT JOIN BASE_WAREHOUSE B ON A.STOREID=B.ID
  LEFT JOIN BASE_PERSON C ON A.EXTENDINT3=C.ID
  WHERE A.EXTENDINT2=0
  UNION
  --入库子明细
SELECT
    A.ID,
    A.GUID,
    A.DETAILID,
    A.TAGCODE,
    A.SUBSTOCK,
    A.SUBDETAILCOUNT,
    A.STOREID,
    A.STORELOCATIONID,
    A.STORELOCATIONNAME,
    A.STORELOCATIONCODE,
    A.ADDTIME,
    A.UNITNAME,
    A.EXTENDINT2,
    A.EXTENDINT3,
    A.EXTENDSTRING1,
    A.SNCODE,
    B.NAME AS HOUSENAME,
    C.NAME AS PERSONNAME,
     CASE A.EXTENDINT2
        WHEN 0 THEN '出库' WHEN 1 THEN '入库'  ELSE '' END AS SONTYPE
    FROM WZ_SHEETSUBDETAIL A
    LEFT JOIN BASE_WAREHOUSE B ON A.STOREID=B.ID
    LEFT JOIN BASE_PERSON C ON A.EXTENDINT3=C.ID
    WHERE A.EXTENDINT2=1
;
--------------------------------------------------------
--  DDL for View V_ALLWAITTASK
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ALLWAITTASK" ("ID", "ROUTESTEPID", "ROUTENAME", "MENUID", "URL", "SHEETID", "SHEETNAME", "SHEETCODE", "KINDID", "SHEETSTATUS", "STATUSNAME", "HANDINGMANID", "HANDINGTIME", "PREVSUBMITMANID", "PREVSUBMITMAN", "PREVSUBMITTIME", "NEXTHANDMANID", "NEXTMAN", "JUMPPATH", "HANDSUGGESTION", "HANDRESULT", "STATUS", "MEMO", "CREATOR", "CREATORNAME", "RESULTNAME", "SHEETKINDNAME", "CREATETIME") AS 
  SELECT wait.id,
       wait.routestepid,
       route.name as routename,
       wait.menuid,
       m.url,
       wait.sheetid,
       sheet.name as sheetname,
       sheet.code as sheetcode,
       sheet.kindid,
       sheet.status as sheetstatus,
       d.name as statusname,
       wait.handingmanid,
       wait.handingtime,
       wait.PrevSubmitManID,
       person.name as PrevSubmitMan,
       wait.PrevSubmitTime,
       wait.NextHandManID,
       p2.name as nextMan,
       wait.JumpPath,
       wait.HandSuggestion,
       wait.HandResult,
       wait.status,
       wait.memo,
       wait.creator,
       p1.name as creatorname,
       (CASE wait.HANDRESULT WHEN 0 THEN '未处理' WHEN 1 THEN '通过' WHEN 2 THEN '不通过' WHEN 3 THEN '驳回' ELSE '未处理' END) AS RESULTNAME,
       (CASE sheet.kindid WHEN 35 THEN 'RK'  WHEN 36 THEN 'CK' ELSE 'OTHER' END) AS SHEETKINDNAME,
 wait.createtime
  FROM wz_waittask wait
  left outer join base_routestep route on wait.routestepid = route.id
  inner join wz_sheet sheet on wait.sheetid = sheet.id
  left outer join base_dictionary d on sheet.status=d.id
  left outer join base_person person on wait.prevsubmitmanid = person.id
  left outer join base_person p1 on sheet.creator = p1.id
  left outer join base_person p2 on wait.handingmanid = p2.id
  left outer join base_menu m on wait.menuid=m.menucode
 where menuid not in ('receipt_details', 'sheet_CK')

  union
  --出库单
SELECT wait.id,
       wait.routestepid,
       route.name as routename,
       wait.menuid,
       m.url,
       wait.sheetid,
       sheet.name as sheetname,
       sheet.code as sheetcode,
       sheet.kindid,
       sheet.status as sheetstatus,
       d.name as statusname,
       wait.handingmanid,
       wait.handingtime,
       wait.PrevSubmitManID,
       person.name as PrevSubmitMan,
       wait.PrevSubmitTime,
       wait.NextHandManID,
       p2.name as nextMan,
       wait.JumpPath,
       wait.HandSuggestion,
       wait.HandResult,
       wait.status,
       wait.memo,
       wait.creator,
       p1.name as creatorname,
       (CASE wait.HANDRESULT WHEN 0 THEN '未处理' WHEN 1 THEN '通过' WHEN 2 THEN '不通过' WHEN 3 THEN '驳回' ELSE '未处理' END) AS RESULTNAME,
      (CASE sheet.kindid WHEN 35 THEN 'RK'  WHEN 36 THEN 'CK' ELSE 'OTHER' END) AS SHEETKINDNAME,
       wait.createtime
  FROM wz_waittask wait
  left outer join base_routestep route on wait.routestepid = route.id
  inner join wz_sheet_ck sheet on wait.sheetid = sheet.id
  left outer join base_dictionary d on sheet.status=d.id
  left outer join base_person person on wait.prevsubmitmanid = person.id
  left outer join base_person p1 on sheet.creator = p1.id
  left outer join base_person p2 on wait.handingmanid = p2.id
  left outer join base_menu m on wait.menuid=m.menucode
 where menuid = 'sheet_CK'
  union
  --入库单
SELECT wait.id,
       wait.routestepid,
       route.name as routename,
       wait.menuid,
       m.url,
       wait.sheetid,
       sheet.name as sheetname,
       sheet.code as sheetcode,
       sheet.kindid,
       sheet.status as sheetstatus,
       d.name as statusname,
       wait.handingmanid,
       wait.handingtime,
       wait.PrevSubmitManID,
       person.name as PrevSubmitMan,
       wait.PrevSubmitTime,
       wait.NextHandManID,
       p2.name as nextMan,
       wait.JumpPath,
       wait.HandSuggestion,
       wait.HandResult,
       wait.status,
       wait.memo,
       wait.creator,
       p1.name as creatorname,
       (CASE wait.HANDRESULT WHEN 0 THEN '未处理' WHEN 1 THEN '通过' WHEN 2 THEN '不通过' WHEN 3 THEN '驳回' ELSE '未处理' END) AS RESULTNAME,
       (CASE sheet.kindid WHEN 35 THEN 'RK'  WHEN 36 THEN 'CK' ELSE 'OTHER' END) AS SHEETKINDNAME,
       wait.createtime
  FROM wz_waittask wait
  left outer join base_routestep route on wait.routestepid = route.id
  inner join wz_sheet_rk sheet on wait.sheetid = sheet.id
  left outer join base_dictionary d on sheet.status=d.id
  left outer join base_person person on wait.prevsubmitmanid = person.id
  left outer join base_person p1 on sheet.creator = p1.id
  left outer join base_person p2 on wait.handingmanid = p2.id
  left outer join base_menu m on wait.menuid=m.menucode
 where menuid = 'receipt_details'
;
--------------------------------------------------------
--  DDL for View V_APPLYDEP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_APPLYDEP" ("ID", "ERPID", "CODE", "NAME", "DEMO", "ZTID", "SUBJECTSGROUP", "SUBJECTSGROUPDESCRIPTION", "STATUS", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDFLOAT1", "EXTENDFLOAT2", "EXTENDFLOAT3", "ZTCODE", "ZTNAME") AS 
  SElect a."ID",a."ERPID",a."CODE",a."NAME",a."DEMO",a."ZTID",a."SUBJECTSGROUP",a."SUBJECTSGROUPDESCRIPTION",a."STATUS",a."EXTENDINT1",a."EXTENDINT2",a."EXTENDINT3",a."EXTENDSTRING1",a."EXTENDSTRING2",a."EXTENDSTRING3",a."EXTENDFLOAT1",a."EXTENDFLOAT2",a."EXTENDFLOAT3",o.code as ZTCODE,o.name as ZTNAME from base_applydep a
join BASE_ORGANIZATION o on a.ztid=o.id
;
--------------------------------------------------------
--  DDL for View V_ATTACHFILE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ATTACHFILE" ("ID", "GUID", "FILENAME", "FILEALIASNAME", "FILEEXT", "FILETYPE", "FILEPATH", "MEMO", "STATUS", "CREATOR", "CREATEDATE", "ATTACHRELATEID", "PERSONNAME") AS 
  SELECT
  A.ID,
  A.GUID,
  A.FILENAME,
  A.FILEALIASNAME,
  A.FILEEXT,
  A.FILETYPE,
  A.FILEPATH,
  A.MEMO,
  A.STATUS,
  A.CREATOR,
  A.CREATEDATE,
  A.ATTACHRELATEID,
  B.NAME AS PERSONNAME
  FROM WZ_ATTACHFILE A LEFT JOIN BASE_PERSON B ON A.CREATOR=B.ID
;
--------------------------------------------------------
--  DDL for View V_BASE_DEPART
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_BASE_DEPART" ("TYPE", "ID", "CODE", "NAME", "PARENTID", "SORT", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "LEVELCOUNT", "LEVELCODE", "COMPANYID") AS 
  select "TYPE","ID","CODE","NAME","PARENTID","SORT","STATUS","MEMO","CREATOR","CREATEDATE","UPDATOR","UPDATEDATE","ZTID","LEVELCOUNT","LEVELCODE","COMPANYID"
    from
    (
select '0' as type ,companyid as id,companycode as code,companyname as name,parentid,sort,enabled as status,remark as memo,creator,createdate,updator,updatedate,ztid,levelcount,levelcode,companyid as companyid
 from base_company
union
select '1' as type, id,code,name,case parentid when 0 then companyid else parentid end,sort,status,memo,creator,createdate,updater,updatedate,ztid,levelcount,levelcode,companyid
from base_organization) t
;
--------------------------------------------------------
--  DDL for View V_BASE_MENUBUTTON
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_BASE_MENUBUTTON" ("MENUCODE", "BUTTONCODE", "BUTTONTEXT", "BUTTONSORT", "BUTTONNAME", "BUTTONTYPE", "ICONCLASS", "ICONURL", "JSEVENT", "ENABLED", "SHOWBUTTONNAME") AS 
  select
a.MenuCode,
a.ButtonCode,
a.ButtonText,
a.ButtonSort,
b.ButtonName,b.ButtonType,b.IconClass,b.IconUrl,b.JsEvent,b.enabled,
(case a.ButtonText when '' then b.ButtonName else a.ButtonText end) as ShowButtonName
from Base_MenuButton  a ,Base_Button b where  a.ButtonCode=b.ButtonCode
;
--------------------------------------------------------
--  DDL for View V_BASE_ROLEMENUBUTTON
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_BASE_ROLEMENUBUTTON" ("ROLECODE", "MENUCODE", "BUTTONCODE", "BUTTONSORT", "BUTTONNAME") AS 
  select m.RoleCode,m.MenuCode,m.ButtonCode,
k.ButtonSort,(case k.ButtonText when '' then m.ButtonName else  k.ButtonText end) as ButtonName
from
(
select a.RoleCode,a.MenuCode,a.ButtonCode,b.ButtonName
from Base_RoleMenuButton a  ,Base_Button b where a.ButtonCode=b.ButtonCode
) m , Base_MenuButton k where m.ButtonCode=k.ButtonCode
;
--------------------------------------------------------
--  DDL for View V_BGD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_BGD" ("ID", "GUID", "CODE", "NAME", "RELATESHEET", "DUTYID", "TYPEID", "DEPARTID", "PROVIDERDEPID", "SUBMITMANID", "SUBMITTIME", "STATUS", "ROUTE_STEPID", "STATUSNAME", "ROUTEID", "REPORTNAME", "PREFIX", "KINDID", "DEPARTNAME", "DEPARTLEVELCODE", "DEPARTCODE", "CREATOR", "PERSONNAME", "CREATEDATE", "CURRENTROUTEID", "DEPARTLEVELCOUNT", "MEMO") AS 
  SELECT WZ_SHEET.ID,
       WZ_SHEET.GUID,
       WZ_SHEET.CODE,
       WZ_SHEET.NAME,
       WZ_SHEET.RELATESHEET,
       WZ_SHEET.DUTYID,
       WZ_SHEET.TYPEID,
       WZ_SHEET.DEPARTID,
       WZ_SHEET.PROVIDERDEPID,
       WZ_SHEET.SUBMITMANID,
       WZ_SHEET.SUBMITTIME,
       WZ_SHEET.STATUS,
       wz_sheet.route_stepid,
       dict.name as STATUSNAME,
       BASE_DICTIONARY.ID AS ROUTEID,
       BASE_RECEIPT.REPORTNAME,
       BASE_RECEIPT.PREFIX,
       WZ_SHEET.KINDID,
       V_BASE_DEPART.NAME AS DEPARTNAME,
       V_BASE_DEPART.CODE AS DEPARTLEVELCODE,
       V_BASE_DEPART.CODE AS DEPARTCODE,
       WZ_SHEET.CREATOR,
       base_person.name as PERSONNAME,
       wz_sheet.createdate,
       WZ_SHEET.ROUTEID AS CURRENTROUTEID,
       V_BASE_DEPART.CODE AS DEPARTLEVELCOUNT,
       wz_sheet.memo
  FROM WZ_SHEET
  LEFT OUTER JOIN V_BASE_DEPART ON WZ_SHEET.DEPARTID = V_BASE_DEPART.ID
  left outer join base_person on wz_sheet.creator=base_person.id
  left outer join base_dictionary dict on WZ_SHEET.STATUS=dict.id
  LEFT OUTER JOIN BASE_DICTIONARY ON WZ_SHEET.ROUTEID =
                                     BASE_DICTIONARY.ID
  LEFT OUTER JOIN BASE_RECEIPT ON BASE_DICTIONARY.ID =
                                  BASE_RECEIPT.PROCESSID
                                  where kindid=106
;
--------------------------------------------------------
--  DDL for View V_BZQ
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_BZQ" ("ID", "MATERIALCODE", "MATERIALNAME", "DESCRIPTION", "MATERIALMODEL", "STORECOUNT", "CREATEDATE", "EXPIRATIONTIME", "SYDAY") AS 
  SELECT
w.id,
W.MaterialCode,
W.MaterialName,
W.Description,
W.MaterialModel,
W.StoreCount,
W.CreateDate,
W.ExpirationTime,
round(W.ExpirationTime-sysdate) as SYDAY
 from wz_stock W where W.ExpirationTime is not null and W.ExpirationTime <> to_date('0001-01-01','YYYY-MM-DD')
;
--------------------------------------------------------
--  DDL for View V_CKCX
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_CKCX" ("ID", "GUID", "TAGCODE", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "DESCRIPTION", "DETAILCOUNT", "DETAILUNIT", "STOREID", "STORELOCATIONID", "STORELOCATIONNAME", "STORELOCATIONCODE", "CODE", "USEDDEPARTID", "USDEDEPNAME", "ZTID", "URL") AS 
  SELECT
 A.ID,
 A.GUID,
 A.TAGCODE,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.MATERIALSPECIFICATION,
 A.DESCRIPTION,
 A.DETAILCOUNT,
 A.DETAILUNIT,
 A.STOREID,
 A.STORELOCATIONID,
 A.STORELOCATIONNAME,
 A.STORELOCATIONCODE,
 B.CODE,
 B.USEDDEPARTID,
 C.NAME AS USDEDEPNAME,
 B.ZTID,
 B.Url
 FROM WZ_SHEETCKDETAIL A LEFT JOIN WZ_SHEET_CK B ON A.SHEETID=B.ID
 LEFT JOIN BASE_USEDEP C ON B.USEDDEPARTID=C.ID WHERE B.STATUS=41
;
--------------------------------------------------------
--  DDL for View V_CKD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_CKD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "ORDERNUM", "RECEIVENUM", "USEDDEPARTID", "STOREMANID", "USEDMANID", "PROVIDERDEPID", "OWNERDEP", "EXTENDINT1", "SLCODE", "APPLYDEPARTID", "STATUSNAME", "USEDEPNAME", "STORENAME", "PERSONNAME", "OFFICESID", "DEPARTOFFICENAME", "EXTENDINT2", "REQUESTUNITNAME", "FUNDSSOURCE", "MONEYNAME", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDINT3", "DBCODE", "TYPENAME", "ORG_NAME", "CLPERSON", "CKPERSON", "BMPERSON", "ZNPERSON", "FGPERSON") AS 
  SELECT
 A.ID,
 A.GUID,
 A.NAME,
 A.CODE,
 A.KINDID,
 A.TYPEID,
 A.DUTYID,
 A.DEPARTID,
 A.ROUTEID,
 A.ROUTE_STEPID,
 A.ROLEID,
 A.RELATESHEET,
 A.SUBMITMANID,
 A.SUBMITTIME,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.UPDATOR,
 A.UPDATEDATE,
 A.ZTID,
 A.ORDERNUM,
 A.RECEIVENUM,
 A.USEDDEPARTID,
 A.STOREMANID,
 A.USEDMANID,
 A.PROVIDERDEPID,
 A.OWNERDEP,
 A.EXTENDINT1,--申请单ID
 K.CODE SLCODE,--申请单号
 A.Applydepartid,--申请单位ID
 B.NAME AS STATUSNAME,
 --C.NAME AS USEDEPNAME,
 I.NAME AS USEDEPNAME,
 D.NAME AS STORENAME,
 E.NAME AS PERSONNAME,
 A.OfficesID,--科室
 F.NAME departOfficename,
 A.EXTENDINT2,--使用单位
 G.NAME requestUnitname,
 A.FundsSource,--资金来源
 H.NAME moneyname,
 A.EXTENDSTRING1,--用途
 A.EXTENDSTRING2,--库存组织
 --(case when A.EXTENDINT3=0 then '未更新' else '已更新' end) AS EXTENDINT3
 A.EXTENDINT3,--是否已更新成本
 DB.CODE AS DBCODE,
 L.NAME AS TYPENAME, 
 M.NAME AS ORG_NAME,
 KK.NAME AS CLPERSON,--材料员
 E.NAME AS CKPERSON,--保管员
 P1.NAME AS BMPERSON,--部门领导
 P2.NAME AS ZNPERSON,--职能科室
 P3.NAME AS FGPERSON--分管矿长

FROM WZ_SHEET_CK A LEFT JOIN BASE_DICTIONARY B ON A.STATUS=B.ID
LEFT JOIN BASE_ORGANIZATION C ON A.USEDDEPARTID=C.ID
LEFT JOIN BASE_PERSON D ON A.STOREMANID=D.ID
LEFT JOIN BASE_PERSON E ON A.CREATOR=E.ID
LEFT JOIN BASE_USEDEP F ON A.OfficesID=F.ID
LEFT JOIN BASE_APPLYDEP G ON A.EXTENDINT2=G.ID
LEFT JOIN BASE_DICTIONARY H ON A.FundsSource=H.ID
LEFT JOIN BASE_USEDEP I ON A.USEDDEPARTID=I.ID
LEFT JOIN WZ_SHEET K ON A.EXTENDINT1=K.ID AND K.KINDID=650 --领料单
LEFT JOIN WZ_SHEET DB ON A.EXTENDINT2=DB.ID  AND DB.KINDID=506 --调拨单;
LEFT JOIN BASE_DICTIONARY L ON A.TYPEID=L.ID
LEFT JOIN BASE_ORGANIZATION M ON A.ZTID=M.ID
LEFT JOIN BASE_PERSON KK ON k.CREATOR=KK.ID --领料单创建人
LEFT JOIN WZ_WAITTASK W1 ON W1.SHEETID=K.ID AND W1.ROUTESTEPID=2419--流程为使用单位负责人审批
LEFT JOIN BASE_PERSON P1 ON W1.HANDINGMANID=P1.ID
LEFT JOIN WZ_WAITTASK W2 ON W2.SHEETID=K.ID AND W2.ROUTESTEPID=2964--流程为分管科室审批
LEFT JOIN BASE_PERSON P2 ON W2.HANDINGMANID=P2.ID
LEFT JOIN WZ_WAITTASK W3 ON W3.SHEETID=K.ID AND W3.ROUTESTEPID=2965--分管矿领导审批
LEFT JOIN BASE_PERSON P3 ON W3.HANDINGMANID=P3.ID
;
--------------------------------------------------------
--  DDL for View V_CKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_CKDETAILS" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "DETAILUNIT", "CURRENCYUNIT", "STOREID", "PROVIDERDEPID", "STATUS", "MEMO", "UPDATOR", "UPDATEDATE", "EXTENDINT1", "DESCRIPTION", "DETAILUNITNAME", "DETAILCOUNT", "CODE", "ZTID", "CREATOR", "CREATEDATE", "HOUSENAME", "HOUSECODE", "SNCODE", "NOTAXPRICE", "NOTAXSUM", "NAME", "EXTENDSTRING1", "USEPLACE", "USE", "SLCOUNT", "CLPERSON", "CKPERSON", "BMPERSON", "ZNPERSON", "FGPERSON") AS 
  SELECT
   A.ID,
   A.GUID,
   A.SHEETID,
   A.SHEETDETAILID,
   A.MATERIALID,
   A.MATERIALCODE,
   A.MATERIALNAME,
   A.MATERIALBRAND,
   A.DETAILUNIT,
   A.CURRENCYUNIT,
   A.STOREID,
   A.PROVIDERDEPID,
   A.STATUS,
   A.MEMO,
   A.UPDATOR,
   A.UPDATEDATE,
   A.EXTENDINT1,
   A.DESCRIPTION,
   A.DETAILUNITNAME,
   A.DETAILCOUNT,
   B.CODE,
   A.ZTID,
   A.CREATOR,
   A.CREATEDATE,
   C.NAME  AS HOUSENAME,
   C.CODE AS HOUSECODE,
   A.SNCODE,
   A.NOTAXPRICE,
   A.NOTAXSUM,
   A.STORELOCATIONNAME AS NAME, 
   A.EXTENDSTRING1, --计划编号
   D.EXTENDSTRING2 AS USEPLACE,--使用地址
   E.EXTENDSTRING1 AS USE,--用途
   NVL(D.DETAILCOUNT,A.DETAILCOUNT) AS SLCOUNT,
   F.NAME AS CLPERSON,--材料员
   G.NAME AS CKPERSON,--保管员
   P1.NAME AS BMPERSON,--部门领导
   P2.NAME AS ZNPERSON,--职能科室
   P3.NAME AS FGPERSON--分管矿长
  FROM WZ_SHEETCKDETAIL A LEFT JOIN WZ_SHEET_CK B ON A.SHEETID=B.ID
  LEFT JOIN WZ_SHEET_CK AA ON A.SHEETID=AA.ID
  LEFT JOIN BASE_WAREHOUSE C ON C.ID=A.STOREID
  LEFT JOIN WZ_SHEETDETAIL D ON A.ExtendInt1=D.ID
  LEFT JOIN WZ_SHEET E ON D.SHEETID=E.ID--领料单
  LEFT JOIN BASE_PERSON F ON E.CREATOR=F.ID
  LEFT JOIN BASE_PERSON G ON AA.CREATOR=G.ID
  LEFT JOIN WZ_WAITTASK H1 ON H1.SHEETID=E.ID AND H1.ROUTESTEPID=2419--流程为使用单位负责人审批
  LEFT JOIN BASE_PERSON P1 ON H1.HANDINGMANID=P1.ID
  LEFT JOIN WZ_WAITTASK H2 ON H2.SHEETID=E.ID AND H2.ROUTESTEPID=2964--流程为分管科室审批
  LEFT JOIN BASE_PERSON P2 ON H2.HANDINGMANID=P2.ID
  LEFT JOIN WZ_WAITTASK H3 ON H3.SHEETID=E.ID AND H3.ROUTESTEPID=2965--分管矿领导审批
  LEFT JOIN BASE_PERSON P3 ON H3.HANDINGMANID=P3.ID
;
--------------------------------------------------------
--  DDL for View V_CKDETAILSFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_CKDETAILSFORAPI" ("ID", "SHEETID", "MATERIALCODE", "DESCRIPTION", "DETAILUNITNAME", "DETAILCOUNT", "CODE", "ZTID", "CREATOR", "CREATEDATE") AS 
  SELECT
   A.ID,
   A.SHEETID,
   A.MATERIALCODE,
   A.DESCRIPTION,
   A.DETAILUNITNAME,
   A.DETAILCOUNT,
   B.CODE,
   A.ZTID,
   A.CREATOR,
   A.CREATEDATE
  FROM WZ_SHEETCKDETAIL A LEFT JOIN WZ_SHEET_CK B ON A.SHEETID=B.ID
;
--------------------------------------------------------
--  DDL for View V_CKDFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_CKDFORAPI" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "ORDERNUM", "RECEIVENUM", "USEDDEPARTID", "STOREMANID", "USEDMANID", "PROVIDERDEPID", "OWNERDEP", "EXTENDINT1", "SLCODE", "APPLYDEPARTID", "STATUSNAME", "USEDEPNAME", "STORENAME", "PERSONNAME", "OFFICESID", "DEPARTOFFICENAME", "EXTENDINT2", "REQUESTUNITNAME", "FUNDSSOURCE", "MONEYNAME", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDINT3") AS 
  SELECT
 A.ID,
 A.GUID,
 A.NAME,
 A.CODE,
 A.KINDID,
 A.TYPEID,
 A.DUTYID,
 A.DEPARTID,
 A.ROUTEID,
 A.ROUTE_STEPID,
 A.ROLEID,
 A.RELATESHEET,
 A.SUBMITMANID,
 A.SUBMITTIME,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.UPDATOR,
 A.UPDATEDATE,
 A.ZTID,
 A.ORDERNUM,
 A.RECEIVENUM,
 A.USEDDEPARTID,
 A.STOREMANID,
 A.USEDMANID,
 A.PROVIDERDEPID,
 A.OWNERDEP,
 A.EXTENDINT1,--申请单ID
 K.CODE SLCODE,--申请单号
 A.Applydepartid,--申请单位ID
 B.NAME AS STATUSNAME,
 I.NAME AS USEDEPNAME,
 D.NAME AS STORENAME,
 E.NAME AS PERSONNAME,
 A.OfficesID,--科室
 F.NAME departOfficename,
 A.EXTENDINT2,--使用单位
 G.NAME requestUnitname,
 A.FundsSource,--资金来源
 H.NAME moneyname,
 A.EXTENDSTRING1,--用途
 A.EXTENDSTRING2,--库存组织
 A.EXTENDINT3--是否已更新成本
FROM WZ_SHEET_CK A LEFT JOIN BASE_DICTIONARY B ON A.STATUS=B.ID
LEFT JOIN BASE_ORGANIZATION C ON A.USEDDEPARTID=C.ID
LEFT JOIN BASE_PERSON D ON A.STOREMANID=D.ID
LEFT JOIN BASE_PERSON E ON A.CREATOR=E.ID
LEFT JOIN BASE_USEDEP F ON A.OfficesID=F.ID
LEFT JOIN BASE_APPLYDEP G ON A.EXTENDINT2=G.ID
LEFT JOIN BASE_DICTIONARY H ON A.FundsSource=H.ID
LEFT JOIN BASE_USEDEP I ON A.USEDDEPARTID=I.ID
LEFT JOIN WZ_SHEET K ON A.EXTENDINT1=K.ID
WHERE A.KINDID=36 AND A.STATUS=39 AND A.TYPEID=449 ORDER BY A.CREATEDATE DESC
;
--------------------------------------------------------
--  DDL for View V_CKLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_CKLIST" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DETAILUNIT", "STOREID", "CREATOR", "CREATEDATE", "ZTID", "MATERIALSPECIFICATION", "DESCRIPTION", "TAGCODE", "STORELOCATIONID", "STORELOCATIONCODE", "STORECOUNT", "HOUSENAME", "UNITNAME", "CATEGORYID", "PLANDEPARTID", "NOTAXPRICE", "TAXPRICE", "TAXRATE", "ORDERNUM", "STORELOCATIONNAME", "STORELOCATIONAREANAME", "PLANNAME", "DETAILUNITNAME", "PROVIDERDEPID", "PROVIDERNAME", "UNSECOUNT", "OWNERTYPE") AS 
  select distinct
 a.id,
 a.guid,
 a.sheetid,
 a.sheetdetailid,
 a.materialid,
 a.materialcode,
 a.materialname,
 a.materialbrand,
 a.materialmodel,
 a.detailunit,
 a.storeid,
 a.creator,
 a.createdate,
 a.ztid,
 a.materialspecification,
 a.description,
 a.tagcode,
 a.storelocationid,
 a.storelocationcode,
 --a.storelocationname,
 a.storecount,
 b.name as housename,
 c.name as unitname,
 a.categoryid,
 a.plandepartid,
 a.notaxprice,
 a.taxprice,
 a.taxrate,
 a.ordernum,
 b.name storelocationname,
 e.name storelocationareaname,
 d.name as planname,
 a.detailunitname,
 a.providerdepid,--供应商ID
 f.name providername,--供应商名称
 A.Storecount-( SELECT NVL(SUM(J.DETAILCOUNT),0)
 FROM WZ_SHEETCKDETAIL J LEFT JOIN Wz_Sheet_Ck K ON J.SHEETID=K.ID WHERE J.EXTENDINT2=A.ID
 --AND K.STATUS<>41
 ) AS UNSECOUNT,
  a.ownertype
 from wz_stock a
left join base_warehouse b on a.storeid=b.id
left join base_warehouse e on a.StoreLocationID=e.id
left join base_dictionary c on a.detailunit=c.id
left join base_organization d on a.plandepartid=d.id
left join base_provider f on a.providerdepid=f.id
WHERE --A.PURCHASETYPE=0 and
A.Storecount-( SELECT NVL(SUM(J.DETAILCOUNT),0)
 FROM WZ_SHEETCKDETAIL J INNER JOIN Wz_Sheet_Ck K ON J.SHEETID=K.ID WHERE J.EXTENDINT2=A.ID
 --AND K.STATUS<>41
 ) <>0 and A.Storecount>0
;
--------------------------------------------------------
--  DDL for View V_CKLISTFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_CKLISTFORAPI" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DETAILUNIT", "STOREID", "CREATOR", "CREATEDATE", "ZTID", "MATERIALSPECIFICATION", "DESCRIPTION", "TAGCODE", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "OWNERTYPE", "HOUSENAME", "CATEGORYID", "PLANDEPARTID", "NOTAXPRICE", "TAXPRICE", "TAXRATE", "ORDERNUM", "STORECOUNT", "UNSECOUNT", "DETAILUNITNAME", "PROVIDERDEPID", "PROVIDERNAME") AS 
  select distinct
 a.id,
 a.guid,
 a.sheetid,
 a.sheetdetailid,
 a.materialid,
 a.materialcode,
 a.materialname,
 a.materialbrand,
 a.materialmodel,
 a.detailunit,
 a.storeid,
 a.creator,
 a.createdate,
 a.ztid,
 a.materialspecification,
 a.description,
 a.tagcode,
 a.storelocationid,
 a.storelocationcode,
 a.storelocationname,
 a.ownertype,
 b.name as housename,
 a.categoryid,
 a.plandepartid,
 a.notaxprice,
 a.taxprice,
 a.taxrate,
 a.ordernum,
  a.storecount,
  A.Storecount-( SELECT NVL(SUM(J.DETAILCOUNT),0)
 FROM WZ_SHEETCKDETAIL J LEFT JOIN Wz_Sheet_Ck K ON J.SHEETID=K.ID WHERE J.EXTENDINT2=A.ID AND K.STATUS<>41) AS UNSECOUNT,
 a.detailunitname,
 a.providerdepid,--供应商ID
 f.name providername--供应商名称
 from wz_stock a
left join base_warehouse b on a.storeid=b.id
left join base_provider f on a.providerdepid=f.id
WHERE --A.PURCHASETYPE=0 and
A.Storecount-( SELECT NVL(SUM(J.DETAILCOUNT),0)
 FROM WZ_SHEETCKDETAIL J INNER JOIN Wz_Sheet_Ck K ON J.SHEETID=K.ID WHERE J.EXTENDINT2=A.ID
  AND K.STATUS<>41
 ) <>0
;
--------------------------------------------------------
--  DDL for View V_CKMERGEDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_CKMERGEDETAILS" ("SHEETID", "MATERIALCODE", "STOREID", "DESCRIPTION", "DETAILUNITNAME", "DETAILCOUNT", "HOUSENAME", "EXTENDSTRING1", "NOTAXPRICE", "NOTAXSUM") AS 
  SELECT
   A.SHEETID,
   A.MATERIALCODE,
   A.STOREID,
   A.DESCRIPTION,
   A.DETAILUNITNAME,
   nvl(sum(A.DETAILCOUNT),0) as DETAILCOUNT,
   C.Code  AS HOUSENAME,
   A.ExtendString1,
   A.NOTAXPRICE,
   nvl(sum(A.NOTAXSUM),0) as NOTAXSUM
  FROM WZ_SHEETCKDETAIL A
  LEFT JOIN BASE_WAREHOUSE C ON C.ID=A.STOREID
  group by  A.SHEETID,   A.MATERIALCODE,   A.STOREID,   A.DESCRIPTION,   A.DETAILUNITNAME,  C.Code,A.ExtendString1, A.NOTAXPRICE
;
--------------------------------------------------------
--  DDL for View V_CKNUM
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_CKNUM" ("ID", "CKSHEETCODE", "USEDDEPARTID", "USEDDEPARTNAME", "OFFICESID", "OFFICESNAME", "FUNDSSOURCE", "FUNDSSOURCENAME", "EXTENDSTRING1", "CREATEDATE", "LLSHEETCODE") AS 
  select distinct a.id,
       a.code ckSheetCode,
       a.useddepartid,
       b.name useddepartname,
       a.officesid,
       d.name officesname,
       a.fundssource,
       c.name fundssourcename,
       a.extendstring1,--用途
       a.createdate,
       llsheet.code as llSheetCode
from wz_sheet_ck a
inner join wz_sheetckdetail e on a.id= e.sheetid
left join base_usedep b on a.useddepartid=b.id
left join base_dictionary c on a.fundssource=c.id
left join base_usedep d on a.officesid=d.id
left join wz_sheetdetail lldetail on e.sheetdetailid=lldetail.id
left join wz_sheet llsheet on lldetail.sheetid=llsheet.id
where a.status=41
 and  e.detailcount> (select nvl(sum(TKdetail.Detailcount),0) from wz_sheetdetail TKdetail   --如果出库单中的物资已经全部退库就不在显示
            left join wz_sheet TKsheet on TKdetail.sheetid=TKsheet.id
            where TKdetail.Sheetdetailid=e.id）
;
--------------------------------------------------------
--  DDL for View V_CKSONDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_CKSONDETAILS" ("ID", "SHEETID", "MATERIALCODE", "MATERIALNAME", "STORELOCATIONNAME", "STOREID", "DETAILCOUNT", "EXTENDSTRING1", "HOUSENAME", "PROVIDERDEPID", "PROVIDERDEPNAME", "SNCODE", "NOTAXPRICE") AS 
  SELECT
    A.ID,
    A.SHEETID,
    A.MATERIALCODE,
    A.MATERIALNAME,
    A.STORELOCATIONNAME,
    A.STOREID,
    A.DETAILCOUNT,
    A.EXTENDSTRING1,
    B.CODE AS HOUSENAME,
    A.PROVIDERDEPID,
    C.NAME PROVIDERDEPNAME,
    A.Sncode,
    A.Notaxprice
 FROM WZ_SHEETCKDETAIL A
 LEFT JOIN BASE_WAREHOUSE B ON A.STOREID=B.ID
 LEFT JOIN BASE_PROVIDER C ON A.PROVIDERDEPID=C.ID
;
--------------------------------------------------------
--  DDL for View V_DBCKLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_DBCKLIST" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DETAILUNIT", "CURRENCYUNIT", "STOREID", "PROVIDERDEPID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "NOTAXPRICE", "TAXPRICE", "TAXRATE", "MATERIALSPECIFICATION", "DESCRIPTION", "EXPIRATIONTIME", "ORDERNUM", "RECEIVENUM", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "TAGCODE", "PLANDEPARTID", "CATEGORYID", "DETAILPRICE", "DETAILSUM", "OWNERTYPE", "STORECOUNT", "ISEQUIPMENT", "OWNERDEP", "ENABLESN", "SNCODE", "DETAILUNITNAME", "HOUSENAME", "ISCOUNT") AS 
  SELECT
  A.ID,
  A.GUID,
  A.SHEETID,
  A.SHEETDETAILID,
  A.MATERIALID,
  A.MATERIALCODE,
  A.MATERIALNAME,
  A.MATERIALBRAND,
  A.MATERIALMODEL,
  A.DETAILUNIT,
  A.CURRENCYUNIT,
  A.STOREID,
  A.PROVIDERDEPID,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  A.ZTID,
  A.NOTAXPRICE,
  A.TAXPRICE,
  A.TAXRATE,
  A.MATERIALSPECIFICATION,
  A.DESCRIPTION,
  A.EXPIRATIONTIME,
  A.ORDERNUM,
  A.RECEIVENUM,
  A.STORELOCATIONID,
  A.STORELOCATIONCODE,
  A.STORELOCATIONNAME,
  A.TAGCODE,
  A.PLANDEPARTID,
  A.CATEGORYID,
  A.DETAILPRICE,
  A.DETAILSUM,
  A.OWNERTYPE,
  A.STORECOUNT,
  A.ISEQUIPMENT,
  A.OWNERDEP,
  A.ENABLESN,
  A.SNCODE,
  A.DETAILUNITNAME,
  B.NAME AS HOUSENAME,
  A.STORECOUNT- NVL((SELECT SUM(Z.SUBDETAILCOUNT) FROM WZ_SHEETSUBDETAIL Z LEFT JOIN WZ_SHEETDETAIL Y ON Z.DETAILID=Y.ID LEFT JOIN WZ_SHEET X ON Y.SHEETID=X.ID
   WHERE Z.EXTENDINT1=A.ID AND X.STATUS<>41 AND X.KINDID=506),0) AS ISCOUNT
 FROM WZ_STOCK A LEFT JOIN BASE_WAREHOUSE B ON A.STOREID=B.ID
;
--------------------------------------------------------
--  DDL for View V_DBD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_DBD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "ORDERNUM", "RECEIVENUM", "USEDDEPARTID", "STOREMANID", "USEDMANID", "PROVIDERDEPID", "EXTENDINT1", "EXTENDINT2", "OWNERDEP", "PERSONNAME", "OUTORGNAME", "INTOORGNAME", "DEPNAME", "STATUSNAME", "EXTENDINT4", "URL") AS 
  SELECT
 A.ID,
 A.GUID,
 A.NAME,
 A.CODE,
 A.KINDID,
 A.TYPEID,
 A.DUTYID,
 A.DEPARTID,
 A.ROUTEID,
 A.ROUTE_STEPID,
 A.ROLEID,
 A.RELATESHEET,
 A.SUBMITMANID,
 A.SUBMITTIME,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.UPDATOR,
 A.UPDATEDATE,
 A.ZTID,
 A.ORDERNUM,
 A.RECEIVENUM,
 A.USEDDEPARTID,
 A.STOREMANID,
 A.USEDMANID,
 A.PROVIDERDEPID,
 A.EXTENDINT1,
 A.EXTENDINT2,
 A.OWNERDEP,
 B.NAME AS PERSONNAME,
 C.NAME AS OUTORGNAME,
 D.NAME AS INTOORGNAME,
 E.NAME AS DEPNAME,
 F.NAME AS STATUSNAME,
 A.extendint4,
 A.url
 
 FROM WZ_SHEET A LEFT JOIN BASE_PERSON B ON A.CREATOR=B.ID
 LEFT JOIN BASE_ORGANIZATION C ON A.EXTENDINT1=C.ID
 LEFT JOIN BASE_ORGANIZATION D ON A.EXTENDINT2=D.ID
 LEFT JOIN BASE_ORGANIZATION E ON A.DEPARTID=E.ID
 LEFT JOIN BASE_DICTIONARY F ON A.STATUS=F.ID
 WHERE A.KINDID=506
;
--------------------------------------------------------
--  DDL for View V_DBDDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_DBDDETAILS" ("CODE", "ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "DETAILCOUNT", "STOREID", "PROVIDERDEPID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "DESCRIPTION", "DETAILUNITNAME", "PARCODE", "HOUSENAME", "HOUSECODE", "PROVIDERNAME", "STORELOCATIONCODE", "STORELOCATIONID", "EXTENDINT3", "YTCOUNT", "ISCOUNT") AS 
  SELECT
  D.CODE,
 A.ID,
 A.GUID,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.DETAILCOUNT,
 A.STOREID,
 A.PROVIDERDEPID,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.ZTID,
 A.DESCRIPTION,
 A.DETAILUNITNAME,
 SUBSTR(A.MATERIALCODE,1,2) AS PARCODE,
 C.NAME AS HOUSENAME,
 C.CODE AS HOUSECODE,
 CONCAT(P.NAME||'_',P.ExtendString1) AS PROVIDERNAME,
 A.STORELOCATIONCODE,
 A.Storelocationid,
 A.extendint3,
--已出库数量
(SELECT NVL(SUM(H.detailcount),0) FROM  wz_sheetckdetail H INNER  JOIN WZ_SHEET_CK J ON H.SHEETID=J.ID WHERE H.SheetDetailid=A.ID ) AS YTCOUNT,
--可调数量
A.DETAILCOUNT-(SELECT NVL(SUM(H.SUBDETAILCOUNT),0) FROM  WZ_SHEETSUBDETAIL H INNER JOIN WZ_SHEETDETAIL I ON H.DETAILID=I.ID LEFT JOIN WZ_SHEET J ON I.SHEETID=J.ID WHERE H.Detailid=A.ID   and J.KINDID=506 and J.STATUS<>41) AS ISCOUNT

FROM WZ_SHEETDETAIL A
LEFT JOIN BASE_WAREHOUSE C ON A.STOREID=C.ID
LEFT JOIN WZ_SHEET D ON A.SHEETID=D.ID
LEFT JOIN BASE_SPAREPARTSCATE E ON A.CATEGORYID=E.ID
LEFT JOIN BASE_DICTIONARY F ON A.OWNERTYPE=F.ID
LEFT JOIN BASE_PROVIDER P ON A.PROVIDERDEPID=P.ID
WHERE D.KINDID=506
;
--------------------------------------------------------
--  DDL for View V_DBDLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_DBDLIST" ("MATERIALCODE", "DESCRIPTION", "DETAILUNITNAME", "STORECOUNT", "STOREID", "MATERIALID", "MATERIALNAME", "ZTID", "ENABLESN", "PROVIDERDEPID", "OWNERTYPE", "WAREHOUSECODE", "PROVIDERNAME", "HOUSENAME", "ISCOUNT", "ID") AS 
  select t."MATERIALCODE",t."DESCRIPTION",t."DETAILUNITNAME",t."STORECOUNT",t."STOREID",t."MATERIALID",t."MATERIALNAME",t."ZTID",t."ENABLESN",t."PROVIDERDEPID",t."OWNERTYPE",t."WAREHOUSECODE",t."PROVIDERNAME",t."HOUSENAME",t."ISCOUNT",rownum as id
from (
SELECT
  A.MATERIALCODE,
  A.DESCRIPTION,
  A.DETAILUNITNAME,
  SUM(A.STORECOUNT) AS STORECOUNT,
  A.STOREID,
  A.MATERIALID,
  A.MATERIALNAME,
  A.ZTID,
  NVL(A.ENABLESN,0) ENABLESN,
  A.PROVIDERDEPID,
  A.OWNERTYPE,
  B.CODE AS WAREHOUSECODE,
 CONCAT( C.NAME||'_',C.ExtendString1) AS PROVIDERNAME,
  B.NAME AS HOUSENAME,
  SUM(A.STORECOUNT)-
  (SELECT NVL(SUM(DBMX.DETAILCOUNT),0) FROM WZ_SHEETDETAIL DBMX LEFT JOIN WZ_SHEET DB ON DBMX.SHEETID=DB.ID WHERE DBMX.EXTENDSTRING1=A.MATERIALCODE AND DB.KINDID=506 ) AS ISCOUNT
  FROM WZ_STOCK A LEFT JOIN BASE_WAREHOUSE B ON A.STOREID=B.ID LEFT JOIN BASE_PROVIDER C ON A.PROVIDERDEPID=C.ID
  WHERE  A.STOREID IS NOT NULL
  GROUP BY MATERIALCODE,DESCRIPTION,DETAILUNITNAME,STOREID, A.OWNERTYPE,B.NAME,B.CODE,MATERIALID,MATERIALNAME,A.ZTID,ENABLESN, A.PROVIDERDEPID,C.NAME,C.ExtendString1
  ) t
;
--------------------------------------------------------
--  DDL for View V_DBLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_DBLIST" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DETAILUNIT", "PROVIDERDEPID", "PURCHASETYPE", "STOREID", "CREATOR", "CREATEDATE", "ZTID", "MATERIALSPECIFICATION", "DESCRIPTION", "TAGCODE", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "STORECOUNT", "HOUSENAME", "UNITNAME", "CATEGORYID", "PLANDEPARTID", "NOTAXPRICE", "TAXPRICE", "TAXRATE", "EXPIRATIONTIME", "PLANNAME", "UNSECOUNT") AS 
  select distinct
 a.id,
 a.guid,
 a.sheetid,
 a.sheetdetailid,
 a.materialid,
 a.materialcode,
 a.materialname,
 a.materialbrand,
 a.materialmodel,
 a.detailunit,
 a.PROVIDERDEPID,
 a.PURCHASETYPE,
 a.storeid,
 a.creator,
 a.createdate,
 a.ztid,
 a.materialspecification,
 a.description,
 a.tagcode,
 a.storelocationid,
 a.storelocationcode,
 a.storelocationname,
 a.storecount,
 b.name as housename,
 c.name as unitname,
 a.categoryid,
 a.plandepartid,
 a.notaxprice,
 a.taxprice,
 a.taxrate,
 a.expirationtime,
 d.name as planname,
 A.Storecount-( SELECT NVL(SUM(J.DETAILCOUNT),0)
 FROM WZ_SHEETDETAIL J INNER JOIN Wz_Sheet K ON J.SHEETID=K.ID WHERE J.SHEETDETAILID=A.ID AND K.STATUS<>41) AS UNSECOUNT


 from wz_stock a

left join base_warehouse b on a.storeid=b.id
left join base_dictionary c on a.detailunit=c.id
left join base_organization d on a.plandepartid=d.id
WHERE  A.PURCHASETYPE=0 and A.Storecount-( SELECT NVL(SUM(J.DETAILCOUNT),0)
 FROM WZ_SHEETDETAIL J INNER JOIN Wz_Sheet K ON J.SHEETID=K.ID WHERE J.SHEETDETAILID=A.ID AND K.STATUS<>41) <>0
;
--------------------------------------------------------
--  DDL for View V_DDB
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_DDB" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "ORDERNUM", "RECEIVENUM", "USEDDEPARTID", "STOREMANID", "USEDMANID", "PROVIDERDEPID", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDINT4", "EXTENDSTRING6", "EXTENDSTRING8", "OWNERDEP", "PERSONNAME", "DEPNAME", "STATUSNAME", "OLDSTOCKNAME", "STORAGELOCATION") AS 
  SELECT
 A.ID,
 A.GUID,
 A.NAME,
 A.CODE,
 A.KINDID,
 A.TYPEID,
 A.DUTYID,
 A.DEPARTID,
 A.ROUTEID,
 A.ROUTE_STEPID,
 A.ROLEID,
 A.RELATESHEET,
 A.SUBMITMANID,
 A.SUBMITTIME,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.UPDATOR,
 A.UPDATEDATE,
 A.ZTID,
 A.ORDERNUM,
 A.RECEIVENUM,
 A.USEDDEPARTID,
 A.STOREMANID,
 A.USEDMANID,
 A.PROVIDERDEPID,
 A.EXTENDINT1,
 A.EXTENDINT2,
 A.EXTENDINT3,
 A.EXTENDINT4,
 A.Extendstring6,
 A.Extendstring8,
 A.OWNERDEP,
 B.NAME AS PERSONNAME,
 C.NAME AS DEPNAME,
 D.NAME AS STATUSNAME,
 E.NAME AS OLDSTOCKNAME,
 F.NAME  AS STORAGELOCATION
 FROM WZ_SHEET A LEFT JOIN BASE_PERSON B ON A.CREATOR=B.ID
 LEFT JOIN BASE_ORGANIZATION C ON A.DEPARTID=C.ID
 LEFT JOIN BASE_DICTIONARY D ON A.STATUS=D.ID
 LEFT JOIN Base_Warehouse E ON A.EXTENDINT1=E.ID
 LEFT JOIN Base_Warehouse F ON A.EXTENDINT4=F.ID
;
--------------------------------------------------------
--  DDL for View V_FETCHGOODSHEET
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_FETCHGOODSHEET" ("ID", "GUID", "NAME", "CODE", "USEDDEPARTID", "OFFICENAME", "USEDMANID", "APPLYUNITNAME", "FUNDSSOURCE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "ORDERNUM", "PERSONNAME", "STATUSNAME", "PROVIDERDEPID", "USEUNITNAME", "DEPNAME", "EXTENDINT1", "OFFICESID", "APPLYDEPARTID", "FUNDSNAME", "CLPERSON", "BMPERSON", "ZNPERSON", "FGPERSON") AS 
  SELECT 
  A.ID,
  A.GUID,
  A.NAME,
  A.CODE,
  A.UsedDepartId,
  E.NAME AS OFFICENAME,
  A.USEDMANID,
  F.NAME AS APPLYUNITNAME,
  A.FUNDSSOURCE,
  A.KINDID,
  A.TYPEID,
  A.DUTYID,
  A.DEPARTID,
  A.ROUTEID,
  A.ROUTE_STEPID,
  A.ROLEID,
  A.RELATESHEET,
  A.SUBMITMANID,
  A.SUBMITTIME,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  A.UPDATOR,
  A.UPDATEDATE,
  A.ZTID,
  A.EXTENDSTRING1,
  A.EXTENDSTRING2,
  A.EXTENDSTRING3,
  A.EXTENDSTRING4,
  A.ORDERNUM,
  B.NAME AS PERSONNAME,
  C.NAME AS STATUSNAME,
  A.PROVIDERDEPID,
  G.NAME AS USEUNITNAME,
  D.NAME AS DEPNAME,
  A.EXTENDINT1,
  A.OFFICESID,
  A.APPLYDEPARTID,
  H.NAME AS FUNDSNAME,
  A.NAME AS CLPERSON,--材料员
  P1.NAME AS BMPERSON,--部门领导
  P2.NAME AS ZNPERSON,--职能科室
  P3.NAME AS FGPERSON--分管矿长
  FROM WZ_SHEET A
  LEFT JOIN BASE_PERSON B ON A.CREATOR = B.ID
  LEFT JOIN BASE_DICTIONARY C ON A.STATUS = C.ID
  LEFT JOIN BASE_ORGANIZATION D ON A.ZTID = D.ID
  LEFT JOIN BASE_USEDEP E ON A.OFFICESID = E.ID
  LEFT JOIN BASE_APPLYDEP F ON A.Applydepartid = F.ID
  LEFT JOIN Base_Usedep G on A.Useddepartid = G.ID
  LEFT JOIN BASE_DICTIONARY H ON A.FUNDSSOURCE=H.ID
  LEFT JOIN BASE_PERSON AA ON A.CREATOR=AA.ID --领料单创建人
  LEFT JOIN WZ_WAITTASK W1 ON W1.SHEETID=A.ID AND W1.ROUTESTEPID=2419--流程为使用单位负责人审批
  LEFT JOIN BASE_PERSON P1 ON W1.HANDINGMANID=P1.ID
  LEFT JOIN WZ_WAITTASK W2 ON W2.SHEETID=A.ID AND W2.ROUTESTEPID=2964--流程为分管科室审批
  LEFT JOIN BASE_PERSON P2 ON W2.HANDINGMANID=P2.ID
  LEFT JOIN WZ_WAITTASK W3 ON W3.SHEETID=A.ID AND W3.ROUTESTEPID=2965--分管矿领导审批
  LEFT JOIN BASE_PERSON P3 ON W3.HANDINGMANID=P3.ID
  WHERE 1 = 1 AND A.KINDID = 650
;
--------------------------------------------------------
--  DDL for View V_GETDBCKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_GETDBCKDETAILS" ("ID", "SHEETID", "SHEETDETAILID", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "DC_ORG", "DR_ORG", "DB_CODE", "DBDATE", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DESCRIPTION", "CREATOR", "CREATEDATE", "ZTID", "NOTAXSUM", "DETAILCOUNT", "OWNERTYPE", "SNCODE", "DETAILUNITNAME", "NOTAXPRICE", "DBRESON", "DBZZ_PERSON", "DRZZ_PERSON", "ZXZR_PERSON", "CK_PERSON", "DB_PERSON", "DBCOUNT") AS 
  SELECT   
 B.ID
,B.SHEETID
,B.SHEETDETAILID
,B.STOREID
,B.STORELOCATIONID
,B.STORELOCATIONCODE
,B.STORELOCATIONNAME
,E.NAME AS DC_ORG
,F.NAME AS DR_ORG
,D.CODE AS DB_CODE
,D.CREATEDATE AS DBDATE
,B.CATEGORYID
,B.MATERIALID
,B.MATERIALCODE
,B.MATERIALNAME
,B.MATERIALBRAND
,B.MATERIALMODEL
,B.DESCRIPTION
,B.CREATOR
,B.CREATEDATE
,B.ZTID
,B.NOTAXSUM
,B.DETAILCOUNT
,B.OWNERTYPE
,B.SNCODE
,B.DETAILUNITNAME
,B.NOTAXPRICE
,D.MEMO AS DBRESON
,H1.NAME AS DBZZ_PERSON
,H2.NAME AS DRZZ_PERSON
,H3.NAME AS ZXZR_PERSON
,P1.NAME AS CK_PERSON
,P2.NAME AS DB_PERSON
,C.DETAILCOUNT AS DBCOUNT
FROM WZ_SHEET_CK A
INNER JOIN WZ_SHEETCKDETAIL B ON A.ID=B.SHEETID
INNER JOIN WZ_SHEETDETAIL C ON B.SHEETDETAILID=C.ID --调拨明细
INNER JOIN WZ_SHEET D ON C.SHEETID=D.ID --调拨单
INNER JOIN BASE_ORGANIZATION E ON D.EXTENDINT1=E.ID--调出库存组织
INNER JOIN BASE_ORGANIZATION F ON D.EXTENDINT2=F.ID--调入库存组织
LEFT  JOIN WZ_WAITTASK G1 ON G1.SHEETID=D.ID AND G1.ROUTESTEPID=1568 --流程为调出方站长审批
LEFT  JOIN BASE_PERSON H1 ON G1.HANDINGMANID=H1.ID
LEFT  JOIN WZ_WAITTASK G2 ON G2.SHEETID=D.ID AND G2.ROUTESTEPID=1646 --流程为调入方站长审批
LEFT  JOIN BASE_PERSON H2 ON G2.HANDINGMANID=H2.ID
LEFT  JOIN WZ_WAITTASK G3 ON G3.SHEETID=D.ID AND G3.ROUTESTEPID=2653 --流程为中心副主任审批
LEFT  JOIN BASE_PERSON H3 ON G3.HANDINGMANID=H3.ID
LEFT  JOIN BASE_PERSON P1 ON A.CREATOR=P1.ID --调拨出库单制单人
LEFT  JOIN BASE_PERSON P2 ON D.CREATOR=P2.ID --调拨单制单人
WHERE A.TYPEID=772
;
--------------------------------------------------------
--  DDL for View V_GETDBD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_GETDBD" ("ID", "CODE", "DCZTID", "DRZTID", "ZTID", "JHCOUNT", "CKCOUNT") AS 
  select a.ID,a.CODE,a.ExtendInt1 as dcZtid,a.ExtendInt2 as drZTID,a.ztid,
(select NVL(sum(NVL(detailcount,0)),0) from wz_sheetdetail dbDetail where dbDetail.sheetid=a.id)as jhCount,
(select NVL(sum(NVL(detailcount,0)),0) from wz_sheetckdetail ckDetail where ckDetail.sheetid=b.id)  as ckCount
from wz_sheet a 
left join wz_sheet_ck b on a.id=b.ExtendInt2--出库单的INT2是调拨单的ID
where a.kindid=506 and a.status in (773,774)
;
--------------------------------------------------------
--  DDL for View V_GETDBRKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_GETDBRKDETAILS" ("ID", "SHEETID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DETAILUNIT", "CURRENCYUNIT", "STOREID", "PROVIDERDEPID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDINT4", "EXTENDINT5", "EXTENDINT6", "EXTENDINT7", "EXTENDINT8", "EXTENDFLOAT1", "EXTENDFLOAT2", "EXTENDFLOAT3", "EXTENDFLOAT4", "EXTENDFLOAT5", "EXTENDFLOAT6", "EXTENDFLOAT7", "EXTENDFLOAT8", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "EXTENDSTRING6", "EXTENDSTRING7", "EXTENDSTRING8", "EXTENDSTRING9", "EXTENDSTRING10", "EXTENDDATE1", "EXTENDDATE2", "EXTENDDATE3", "EXTENDDATE4", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "MATERIALSPECIFICATION", "DESCRIPTION", "EXPIRATIONTIME", "STORELOCATIONCODE", "TAGCODE", "TAXPRICE", "TAXSUM", "STORELOCATIONID", "PLANDEPARTID", "STORELOCATIONNAME", "ISEQUIPMENT", "OWNERTYPE", "ENABLESN", "SNCODE", "DETAILUNITNAME", "DETAILCOUNT") AS 
  select 
b.ID,c.ID AS sheetid,b.CATEGORYID,b.MATERIALID,b.MATERIALCODE,b.MATERIALNAME,
b.MATERIALBRAND,b.MATERIALMODEL,b.DETAILUNIT,b.CURRENCYUNIT,b.STOREID,b.PROVIDERDEPID,
b.STATUS,b.MEMO,b.CREATOR,b.CREATEDATE,b.UPDATOR,b.UPDATEDATE,b.ZTID,b.EXTENDINT1,b.EXTENDINT2,
b.EXTENDINT3,b.EXTENDINT4,b.EXTENDINT5,b.EXTENDINT6,b.EXTENDINT7,b.EXTENDINT8,b.EXTENDFLOAT1,
b.EXTENDFLOAT2,b.EXTENDFLOAT3,b.EXTENDFLOAT4,b.EXTENDFLOAT5,b.EXTENDFLOAT6,b.EXTENDFLOAT7,
b.EXTENDFLOAT8,b.EXTENDSTRING1,b.EXTENDSTRING2,b.EXTENDSTRING3,b.EXTENDSTRING4,b.EXTENDSTRING5,
b.EXTENDSTRING6,b.EXTENDSTRING7,b.EXTENDSTRING8,b.EXTENDSTRING9,b.EXTENDSTRING10,b.EXTENDDATE1,b.EXTENDDATE2
,b.EXTENDDATE3,b.EXTENDDATE4,b.NOTAXPRICE,b.TAXRATE,b.NOTAXSUM,b.MATERIALSPECIFICATION,b.DESCRIPTION,
b.EXPIRATIONTIME,b.STORELOCATIONCODE,b.TAGCODE,b.TAXPRICE,b.TAXSUM,b.STORELOCATIONID,b.PLANDEPARTID,
b.STORELOCATIONNAME,b.ISEQUIPMENT,b.OWNERTYPE,b.ENABLESN,b.SNCODE,b.DETAILUNITNAME,
b.DETAILCOUNT 
from wz_sheet a 
inner join wz_sheetdetail e on a.id=e.sheetid
inner join wz_sheetckdetail b on e.id= b.SheetDetailId
inner join wz_sheet_rk c  on c.ExtendInt2=a.ID
where a.kindid=506
;
--------------------------------------------------------
--  DDL for View V_GETPERSON
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_GETPERSON" ("ID", "GUID", "USERTYPE", "CODE", "SPELL", "NAME", "SEX", "EMAIL", "PHONE", "QQ", "PASSWORD", "SECRETKEY", "DEPARTID", "COMPANYID", "STATUS", "SORT", "MEMO", "ISAUDIT", "AUDITBY", "AUDITTIME", "ISSINGLELOGIN", "ISONLINE", "LOGINCOUNT", "LOGINTIME", "LOGINIP", "LOGINCITY", "LASTCHANGEPASSWORD", "CREATOR", "CREATEDATE", "UPDATER", "UPDATEDATE", "ZTID", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDINT4", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "DEPARTMENTNAME", "STATUSNAME", "AUDITBYNAME", "CREATORNAME", "UPDATERNAME", "OFFICESNAME", "OFFICESID") AS 
  SELECT     p.ID, p.GUID,NVL(p.UserType,3)AS UserType , p.Code, p.Spell, p.Name, p.Sex, p.Email, p.Phone, p.QQ, p.Password,
p.Secretkey, p.DepartID, p.CompanyID,NVL(p.Status,1) AS Status, p.Sort, p.Memo, p.IsAudit, p.AuditBy,p.audittime,
NVL(p.IsSingleLogin,1) AS IsSingleLogin , p.IsOnline, p.LoginCount, p.LoginTime, p.LoginIP, p.LoginCity, p.LastChangePassword,
p.Creator, p.CreateDate, p.Updater, p.UpdateDate, p.ZTID, p.ExtendInt1, p.ExtendInt2,
p.ExtendInt3, p.ExtendInt4,   p.ExtendString1, p.ExtendString2, p.ExtendString3, p.ExtendString4,
o.Name AS departmentName, CASE WHEN p.Status = 0 THEN '禁用' ELSE '在用' END AS StatusName,p1.name as auditbyname,
p2.name as creatorname,p3.name as updatername,u.name as officesname,p.officesid
FROM         Base_Person  p
LEFT OUTER JOIN Base_Organization  o on p.DepartID = o.ID
left outer join base_person p1 on p.auditby=p1.id
left outer join base_person p2 on p.creator=p2.id
left outer join base_person p3 on p.Updater=p3.id
left outer join base_useDep u  on p.officesid=u.id
;
--------------------------------------------------------
--  DDL for View V_GETUSABLECOUNT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_GETUSABLECOUNT" ("STORECOUNT", "MATERIALCODE", "ZTID", "PROVIDERDEPID", "OCCUCOUNT", "OWNERTYPE", "DETAILUNITNAME") AS 
  select SUM(storecount) storeCount,materialcode,ztid,providerdepid, f_GetOccupyCount(a.materialcode,a.ztid) occuCount,ownertype,detailunitname
  from wz_stock  a  group by ztid, materialcode, providerdepid,ownertype,detailunitname order by materialcode
;
--------------------------------------------------------
--  DDL for View V_GIFTRKD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_GIFTRKD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "PROVIDERDEPID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "STATUSNAME", "PERSONNAME", "DEPNAME", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "ZTID", "EXTENDINT1", "PROVIDERDEPNAME") AS 
  SELECT
  A.ID,
  A.GUID,
  A.NAME,
  A.CODE,
  A.KINDID,
  A.TYPEID,
  A.DUTYID,
  A.DEPARTID,
  A.PROVIDERDEPID,
  A.ROUTEID,
  A.ROUTE_STEPID,
  A.ROLEID,
  A.RELATESHEET,
  A.SUBMITMANID,
  A.SUBMITTIME,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  B.NAME AS STATUSNAME,
  C.NAME AS PERSONNAME,
  D.NAME AS DEPNAME,
  A.EXTENDSTRING1,
  A.EXTENDSTRING2,
  A.EXTENDSTRING3,
  A.EXTENDSTRING4,
  A.ZTID,
  A.EXTENDINT1,
  E.NAME AS PROVIDERDEPNAME
  FROM WZ_SHEET_RK A
  LEFT JOIN BASE_DICTIONARY B ON A.STATUS=B.ID
  LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID
  LEFT JOIN BASE_ORGANIZATION D ON A.DEPARTID=D.ID
  LEFT JOIN BASE_PROVIDER E ON A.PROVIDERDEPID=E.ID
  LEFT JOIN BASE_DICTIONARY F ON A.KINDID=F.ID
  WHERE F.CODE='GiftRK'
;
--------------------------------------------------------
--  DDL for View V_GIFTRKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_GIFTRKDETAILS" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DETAILUNIT", "CURRENCYUNIT", "STOREID", "PROVIDERDEPID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDINT4", "EXTENDINT5", "EXTENDINT6", "EXTENDINT7", "EXTENDINT8", "EXTENDFLOAT1", "EXTENDFLOAT2", "EXTENDFLOAT3", "EXTENDFLOAT4", "EXTENDFLOAT5", "EXTENDFLOAT6", "EXTENDFLOAT7", "EXTENDFLOAT8", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "EXTENDSTRING6", "EXTENDSTRING7", "EXTENDSTRING8", "EXTENDSTRING9", "EXTENDSTRING10", "EXTENDDATE1", "EXTENDDATE2", "EXTENDDATE3", "EXTENDDATE4", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "MATERIALSPECIFICATION", "DESCRIPTION", "EXPIRATIONTIME", "STORELOCATIONCODE", "TAGCODE", "TAXPRICE", "TAXSUM", "STORELOCATIONID", "PLANDEPARTID", "STORELOCATIONNAME", "DETAILCOUNT", "ISEQUIPMENT", "OWNERTYPE", "ENABLESN", "SNCODE", "DETAILUNITNAME", "JSTYPE", "SUMCOUNT", "STORELOCATION", "STORENAME") AS 
  SELECT A."ID",A."GUID",A."SHEETID",A."SHEETDETAILID",A."CATEGORYID",A."MATERIALID",A."MATERIALCODE",A."MATERIALNAME",A."MATERIALBRAND",A."MATERIALMODEL",A."DETAILUNIT",A."CURRENCYUNIT",A."STOREID",A."PROVIDERDEPID",A."STATUS",A."MEMO",A."CREATOR",A."CREATEDATE",A."UPDATOR",A."UPDATEDATE",A."ZTID",A."EXTENDINT1",A."EXTENDINT2",A."EXTENDINT3",A."EXTENDINT4",A."EXTENDINT5",A."EXTENDINT6",A."EXTENDINT7",A."EXTENDINT8",A."EXTENDFLOAT1",A."EXTENDFLOAT2",A."EXTENDFLOAT3",A."EXTENDFLOAT4",A."EXTENDFLOAT5",A."EXTENDFLOAT6",A."EXTENDFLOAT7",A."EXTENDFLOAT8",A."EXTENDSTRING1",A."EXTENDSTRING2",A."EXTENDSTRING3",A."EXTENDSTRING4",A."EXTENDSTRING5",A."EXTENDSTRING6",A."EXTENDSTRING7",A."EXTENDSTRING8",A."EXTENDSTRING9",A."EXTENDSTRING10",A."EXTENDDATE1",A."EXTENDDATE2",A."EXTENDDATE3",A."EXTENDDATE4",A."NOTAXPRICE",A."TAXRATE",A."NOTAXSUM",A."MATERIALSPECIFICATION",A."DESCRIPTION",A."EXPIRATIONTIME",A."STORELOCATIONCODE",A."TAGCODE",A."TAXPRICE",A."TAXSUM",A."STORELOCATIONID",A."PLANDEPARTID",A."STORELOCATIONNAME",A."DETAILCOUNT",A."ISEQUIPMENT",A."OWNERTYPE",A."ENABLESN",A."SNCODE",A."DETAILUNITNAME",
       C.NAME AS JSTYPE,
       (SELECT NVL( SUM(Z.SUBDETAILCOUNT) ,0)AS Expr1 FROM WZ_SHEETRKSUBDETAIL Z WHERE (Z.DETAILID=A.ID)) AS SUMCOUNT,
       F.VALUE AS STORELOCATION,
       G.NAME AS STORENAME
  FROM WZ_SHEETRKDETAIL A
  LEFT JOIN WZ_SHEET_RK B ON A.SHEETID = B.ID
  LEFT JOIN BASE_DICTIONARY C ON A.OWNERTYPE=C.ID
  LEFT JOIN BASE_DICTIONARY E ON B.KINDID=E.ID
  LEFT JOIN (select t.*,
        (
         select  substr(max( sys_connect_by_path( STORELOCATIONNAME,',')),2,100 )result from 
                (select DETAILID,STORELOCATIONNAME,rn,lead(rn) over(partition by DETAILID order by rn) rn1 
                from (select DETAILID,STORELOCATIONNAME,row_number() over(order by DETAILID,STORELOCATIONNAME desc) rn from WZ_SHEETRKSUBDETAIL)
                )
         start with DETAILID = t.DETAILID and rn1 is null connect by rn1 = prior rn
        ) value
 from (select distinct DETAILID from WZ_SHEETRKSUBDETAIL)  t) F ON A.ID=F.DETAILID
 LEFT JOIN Base_Warehouse G ON A.STOREID=G.ID
  WHERE E.CODE='GiftRK'
;
--------------------------------------------------------
--  DDL for View V_GIFTRKREPORTDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_GIFTRKREPORTDETAILS" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DETAILUNIT", "CURRENCYUNIT", "STOREID", "PROVIDERDEPID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDINT4", "EXTENDINT5", "EXTENDINT6", "EXTENDINT7", "EXTENDINT8", "EXTENDFLOAT1", "EXTENDFLOAT2", "EXTENDFLOAT3", "EXTENDFLOAT4", "EXTENDFLOAT5", "EXTENDFLOAT6", "EXTENDFLOAT7", "EXTENDFLOAT8", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "EXTENDSTRING6", "EXTENDSTRING7", "EXTENDSTRING8", "EXTENDSTRING9", "EXTENDSTRING10", "EXTENDDATE1", "EXTENDDATE2", "EXTENDDATE3", "EXTENDDATE4", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "MATERIALSPECIFICATION", "DESCRIPTION", "EXPIRATIONTIME", "STORELOCATIONCODE", "TAGCODE", "TAXPRICE", "TAXSUM", "STORELOCATIONID", "PLANDEPARTID", "STORELOCATIONNAME", "DETAILCOUNT", "ISEQUIPMENT", "OWNERTYPE", "ENABLESN", "SNCODE", "DETAILUNITNAME", "JSTYPE", "SUMCOUNT", "STORELOCATION", "STORENAME") AS 
  SELECT A."ID",A."GUID",A."SHEETID",A."SHEETDETAILID",A."CATEGORYID",A."MATERIALID",A."MATERIALCODE",A."MATERIALNAME",A."MATERIALBRAND",A."MATERIALMODEL",A."DETAILUNIT",A."CURRENCYUNIT",A."STOREID",A."PROVIDERDEPID",A."STATUS",A."MEMO",A."CREATOR",A."CREATEDATE",A."UPDATOR",A."UPDATEDATE",A."ZTID",A."EXTENDINT1",A."EXTENDINT2",A."EXTENDINT3",A."EXTENDINT4",A."EXTENDINT5",A."EXTENDINT6",A."EXTENDINT7",A."EXTENDINT8",A."EXTENDFLOAT1",A."EXTENDFLOAT2",A."EXTENDFLOAT3",A."EXTENDFLOAT4",A."EXTENDFLOAT5",A."EXTENDFLOAT6",A."EXTENDFLOAT7",A."EXTENDFLOAT8",A."EXTENDSTRING1",A."EXTENDSTRING2",A."EXTENDSTRING3",A."EXTENDSTRING4",A."EXTENDSTRING5",A."EXTENDSTRING6",A."EXTENDSTRING7",A."EXTENDSTRING8",A."EXTENDSTRING9",A."EXTENDSTRING10",A."EXTENDDATE1",A."EXTENDDATE2",A."EXTENDDATE3",A."EXTENDDATE4",A."NOTAXPRICE",A."TAXRATE",A."NOTAXSUM",A."MATERIALSPECIFICATION",A."DESCRIPTION",A."EXPIRATIONTIME",A."STORELOCATIONCODE",A."TAGCODE",A."TAXPRICE",A."TAXSUM",A."STORELOCATIONID",A."PLANDEPARTID",A."STORELOCATIONNAME",A."DETAILCOUNT",A."ISEQUIPMENT",A."OWNERTYPE",A."ENABLESN",A."SNCODE",A."DETAILUNITNAME",
       C.NAME AS JSTYPE,
       (SELECT NVL( SUM(Z.SUBDETAILCOUNT) ,0)AS Expr1 FROM WZ_SHEETRKSUBDETAIL Z WHERE (Z.DETAILID=A.ID)) AS SUMCOUNT,
       F.STORELOCATIONNAME AS STORELOCATION,
       G.NAME AS STORENAME
  FROM WZ_SHEETRKDETAIL A
  LEFT JOIN WZ_SHEET_RK B ON A.SHEETID = B.ID
  LEFT JOIN BASE_DICTIONARY C ON A.OWNERTYPE=C.ID
  LEFT JOIN BASE_DICTIONARY E ON B.KINDID=E.ID
  LEFT JOIN WZ_SHEETRKSUBDETAIL F ON A.ID=F.DETAILID
  LEFT JOIN Base_Warehouse G ON A.STOREID=G.ID
  WHERE E.CODE='GiftRK'
;
--------------------------------------------------------
--  DDL for View V_INTOSTOCK
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_INTOSTOCK" ("MXID", "ID", "MATERIALCODE", "MATERIALNAME", "DESCRIPTION", "DETAILUNITNAME", "ISEQUIPMENT", "ENABLESN", "SNCODE", "EXTENDINT2", "SUMCKCOUNT", "ISSB", "ISSN") AS 
  SELECT
 C.ID AS MXID,
 B.ID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.DESCRIPTION,
 A.DETAILUNITNAME,
 A.ISEQUIPMENT,
 A.ENABLESN,
 A.SNCODE,
 B.EXTENDINT2,
 NVL((SELECT SUM(B.SUBDETAILCOUNT) FROM WZ_SHEETSUBDETAIL    WHERE WZ_SHEETSUBDETAIL.DETAILID=C.ID AND WZ_SHEETSUBDETAIL.EXTENDINT2=0),0) AS SUMCKCOUNT,
 CASE A.ISEQUIPMENT WHEN 0 THEN '否'　WHEN 1 THEN '是' ELSE '' END ISSB,
 CASE A.ENABLESN WHEN 0 THEN '否'　WHEN 1 THEN '是' ELSE '' END ISSN
 FROM  WZ_SHEETSUBDETAIL B  LEFT JOIN WZ_STOCK A ON A.ID=B.EXTENDINT1
 LEFT JOIN WZ_SHEETDETAIL C ON C.ID=B.DETAILID  WHERE B.EXTENDINT2=0
;
--------------------------------------------------------
--  DDL for View V_JCCKD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JCCKD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "URL", "OWNERDEP", "OWNERDEPNAME", "PERSONNAME", "STATUSNAME", "DEPNAME", "USEDMANID", "STOREMANID", "USENAME", "STOREMANNAME") AS 
  SELECT
  A.ID,
  A.GUID,
  A.NAME,
  A.CODE,
  A.KINDID,
  A.TYPEID,
  A.DUTYID,
  A.DEPARTID,
  A.ROUTEID,
  A.ROUTE_STEPID,
  A.ROLEID,
  A.RELATESHEET,
  A.SUBMITMANID,
  A.SUBMITTIME,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  A.ZTID,
  A.url,
  A.OWNERDEP,
  B.NAME AS OWNERDEPNAME,
  C.NAME AS PERSONNAME,
  D.NAME AS STATUSNAME,
  E.NAME AS DEPNAME,
  A.USEDMANID,
  A.STOREMANID,
  F.NAME AS USENAME,
  G.NAME AS STOREMANNAME
  FROM WZ_SHEET A LEFT JOIN BASE_ORGANIZATION B ON A.OWNERDEP=B.ID
  LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID LEFT JOIN BASE_DICTIONARY D ON A.STATUS=D.ID
  LEFT JOIN BASE_ORGANIZATION E ON A.DEPARTID=E.ID
  LEFT JOIN BASE_PERSON F ON A.USEDMANID=F.ID
  LEFT JOIN Base_Person G ON A.STOREMANID=G.ID
   WHERE A.KINDID=466
;
--------------------------------------------------------
--  DDL for View V_JCCKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JCCKDETAILS" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "TAGCODE", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "DETAILCOUNT", "DETAILUNITNAME", "STOREID", "STORELOCATIONID", "STORELOCATIONNAME", "STORELOCATIONCODE", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "TAXPRICE", "TAXSUM", "DESCRIPTION", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "HOUSENAME", "TYPENAME", "UNITNAME") AS 
  SELECT
  A.ID,
  A.GUID,
  A.SHEETID,
  A.SHEETDETAILID,
  A.TAGCODE,
  A.CATEGORYID,
  A.MATERIALID,
  A.MATERIALCODE,
  A.MATERIALNAME,
  A.MATERIALBRAND,
  A.MATERIALMODEL,
  A.MATERIALSPECIFICATION,
  A.DETAILCOUNT,
  A.DETAILUNITNAME,
  A.STOREID,
  A.STORELOCATIONID,
  A.STORELOCATIONNAME,
  A.STORELOCATIONCODE,
  A.NOTAXPRICE,
  A.TAXRATE,
  A.NOTAXSUM,
  A.TAXPRICE,
  A.TAXSUM,
  A.DESCRIPTION,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  A.ZTID,
  C.NAME AS HOUSENAME,
  D.NAME AS TYPENAME,
  E.NAME AS UNITNAME
  FROM WZ_SHEETDETAIL A LEFT JOIN WZ_SHEET B ON A.SHEETID=B.ID
  LEFT JOIN BASE_WAREHOUSE C ON A.STOREID=C.ID
  LEFT JOIN BASE_SPAREPARTSCATE D ON A.CATEGORYID=D.ID
  LEFT JOIN BASE_DICTIONARY E ON A.DETAILUNIT=E.ID
WHERE B.KINDID=466
;
--------------------------------------------------------
--  DDL for View V_JCCKLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JCCKLIST" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DETAILUNIT", "STOREID", "CREATOR", "CREATEDATE", "ZTID", "MATERIALSPECIFICATION", "DESCRIPTION", "TAGCODE", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "STORECOUNT", "HOUSENAME", "UNITNAME", "CATEGORYID", "PLANDEPARTID", "NOTAXPRICE", "TAXPRICE", "TAXRATE", "OWNERDEP", "PLANNAME", "OWNERDEPNAME", "UNSECOUNT") AS 
  select distinct
 a.id,
 a.guid,
 a.sheetid,
 a.sheetdetailid,
 a.materialid,
 a.materialcode,
 a.materialname,
 a.materialbrand,
 a.materialmodel,
 a.detailunit,
 a.storeid,
 a.creator,
 a.createdate,
 a.ztid,
 a.materialspecification,
 a.description,
 a.tagcode,
 a.storelocationid,
 a.storelocationcode,
 a.storelocationname,
 a.storecount,
 b.name as housename,
 a.detailunitname as unitname,
 a.categoryid,
 a.plandepartid,
 a.notaxprice,
 a.taxprice,
 a.taxrate,
 a.ownerdep,
 d.name as planname,
 e.name as ownerdepname,
 A.Storecount-( SELECT NVL(SUM(J.DETAILCOUNT),0)
 FROM wz_sheetdetail J INNER JOIN wz_sheet K ON J.SHEETID=K.ID WHERE J.SHEETDETAILID=A.ID AND K.STATUS<>41 and k.kindid=466) AS UNSECOUNT


 from wz_stock a

left join base_warehouse b on a.storeid=b.id
left join base_organization d on a.plandepartid=d.id
left join base_organization e on a.ownerdep=e.id
WHERE A.PURCHASETYPE=1 and ( A.Storecount-( SELECT NVL(SUM(J.DETAILCOUNT),0)
 FROM wz_sheetdetail J INNER JOIN wz_sheet K ON J.SHEETID=K.ID WHERE J.SHEETDETAILID=A.ID AND K.STATUS<>41 and k.kindid=466))<>0
;
--------------------------------------------------------
--  DDL for View V_JCRKD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JCRKD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "OWNERDEP", "URL", "OWNERDEPNAME", "PERSONNAME", "STATUSNAME", "DEPNAME") AS 
  SELECT
  A.ID,
  A.GUID,
  A.NAME,
  A.CODE,
  A.KINDID,
  A.TYPEID,
  A.DUTYID,
  A.DEPARTID,
  A.ROUTEID,
  A.ROUTE_STEPID,
  A.ROLEID,
  A.RELATESHEET,
  A.SUBMITMANID,
  A.SUBMITTIME,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  A.ZTID,
  A.OWNERDEP,
  A.URl,
  B.NAME AS OWNERDEPNAME,
  C.NAME AS PERSONNAME,
  D.NAME AS STATUSNAME,
  E.NAME AS DEPNAME
  FROM WZ_SHEET A LEFT JOIN BASE_ORGANIZATION B ON A.OWNERDEP=B.ID
  LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID LEFT JOIN BASE_DICTIONARY D ON A.STATUS=D.ID
  LEFT JOIN BASE_ORGANIZATION E ON A.DEPARTID=E.ID
   WHERE A.KINDID=465
;
--------------------------------------------------------
--  DDL for View V_JCRKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JCRKDETAILS" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "TAGCODE", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "DETAILCOUNT", "DETAILUNITNAME", "STOREID", "STORELOCATIONID", "STORELOCATIONNAME", "STORELOCATIONCODE", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "TAXPRICE", "TAXSUM", "DESCRIPTION", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "HOUSENAME", "TYPENAME", "UNITNAME") AS 
  SELECT
  A.ID,
  A.GUID,
  A.SHEETID,
  A.SHEETDETAILID,
  A.TAGCODE,
  A.CATEGORYID,
  A.MATERIALID,
  A.MATERIALCODE,
  A.MATERIALNAME,
  A.MATERIALBRAND,
  A.MATERIALMODEL,
  A.MATERIALSPECIFICATION,
  A.DETAILCOUNT,
  A.DETAILUNITNAME,
  A.STOREID,
  A.STORELOCATIONID,
  A.STORELOCATIONNAME,
  A.STORELOCATIONCODE,
  A.NOTAXPRICE,
  A.TAXRATE,
  A.NOTAXSUM,
  A.TAXPRICE,
  A.TAXSUM,
  A.DESCRIPTION,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  A.ZTID,
  C.NAME AS HOUSENAME,
  D.NAME AS TYPENAME,
  E.NAME AS UNITNAME
  FROM WZ_SHEETDETAIL A LEFT JOIN WZ_SHEET B ON A.SHEETID=B.ID
  LEFT JOIN BASE_WAREHOUSE C ON A.STOREID=C.ID
  LEFT JOIN BASE_SPAREPARTSCATE D ON A.CATEGORYID=D.ID
  LEFT JOIN BASE_DICTIONARY E ON A.DETAILUNIT=E.ID
WHERE B.KINDID=465
;
--------------------------------------------------------
--  DDL for View V_JCSTOCK
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JCSTOCK" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "STORECOUNT", "UNITNAME", "STOREID", "CREATOR", "CREATEDATE", "NOTAXPRICE", "TAXPRICE", "TAXRATE", "MATERIALSPECIFICATION", "DESCRIPTION", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "CATEGORYID", "OWNERDEP", "PURCHASETYPE", "HOUSENAME", "FLNAME") AS 
  SELECT
   A.ID,
   A.GUID,
   A.SHEETID,
   A.SHEETDETAILID,
   A.MATERIALID,
   A.MATERIALCODE,
   A.MATERIALNAME,
   A.MATERIALBRAND,
   A.MATERIALMODEL,
   A.STORECOUNT,
   A.DETAILUNITNAME AS UNITNAME,
   A.STOREID,
   A.CREATOR,
   A.CREATEDATE,
   A.NOTAXPRICE,
   A.TAXPRICE,
   A.TAXRATE,
   A.MATERIALSPECIFICATION,
   A.DESCRIPTION,
   A.STORELOCATIONID,
   A.STORELOCATIONCODE,
   A.STORELOCATIONNAME,
   A.CATEGORYID,
   A.OWNERDEP,
   A.PURCHASETYPE,
   B.NAME AS HOUSENAME,
  -- C.NAME AS UNITNAME,
   D.NAME AS FLNAME
 FROM WZ_STOCK A LEFT JOIN BASE_WAREHOUSE B  ON A.STOREID=B.ID
-- LEFT JOIN BASE_DICTIONARY C ON A.DETAILUNIT=C.ID
 LEFT JOIN BASE_SPAREPARTSCATE D ON A.CATEGORYID=D.ID
 WHERE A.PURCHASETYPE=1  and a.storecount>0
;
--------------------------------------------------------
--  DDL for View V_JKRW
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JKRW" ("ID", "GUID", "INF_TASKNAME", "INF_TRIGGERKIND", "INF_KIND", "SUPPLYSYSTEM", "CALLSYSTEM", "SYNCKIND", "REMARK", "CREATOR", "CREATEDATE", "TRIGGERNAME", "KINDNAME", "SYNCNAME", "SUPPNAME", "CALLNAME", "PERSONNAME") AS 
  SELECT
A.ID,
A.GUID,
A.INF_TASKNAME,
A.INF_TRIGGERKIND,
A.INF_KIND,
A.SUPPLYSYSTEM,
A.CALLSYSTEM,
A.SYNCKIND,
A.REMARK,
A.CREATOR,
A.CREATEDATE,
(CASE A.INF_TRIGGERKIND WHEN 0  THEN '' WHEN 1 THEN '实时' WHEN 2 THEN '手动' WHEN 3 THEN '定时' WHEN 4 THEN '其他' ELSE '' END) AS TRIGGERNAME,
(CASE A.INF_KIND WHEN 0 THEN '' WHEN 1 THEN '提供方' WHEN 2 THEN '调用方' ELSE  ''  END) AS KINDNAME,
(CASE A.SYNCKIND WHEN 0 THEN '' WHEN 1 THEN 'WebService' WHEN 2 THEN 'WebApi' WHEN 3 THEN 'FileExport' WHEN 4 THEN 'dbLink' WHEN 5 THEN 'other' ELSE '' END) AS SYNCNAME ,
B.NAME AS SUPPNAME,
C.NAME AS CALLNAME,
D.NAME AS PERSONNAME FROM INF_TASK A
LEFT JOIN BASE_DICTIONARY B ON A.SUPPLYSYSTEM=B.ID
LEFT JOIN BASE_DICTIONARY C ON A.CALLSYSTEM=C.ID
LEFT JOIN BASE_PERSON D ON A.CREATOR=D.ID
;
--------------------------------------------------------
--  DDL for View V_JKRZ
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JKRZ" ("ID", "GUID", "INF_TASKDETAILNAME", "INF_TASKKIND", "SYNCRESULT", "TASKNAME", "RWNAME", "RESULTNAME", "INF_CONTENT", "INF_ERRORCONTENT", "SYNCNUM", "REMARK", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "TRIGGERNAME", "KINDNAME", "SYNCNAME", "SUPPNAME", "CALLNAME") AS 
  SELECT
A.ID,
A.GUID,
A.INF_TASKDETAILNAME,
A.INF_TASKKIND,
A.SYNCRESULT,
(CASE A.INF_TASKKIND WHEN 0  THEN '数据字典' WHEN 1 THEN '组织机构' WHEN 2 THEN '人员信息' WHEN 3 THEN '入库信息' WHEN 4 THEN '出库信息' WHEN 5 THEN '移位信息' ELSE '' END) AS TASKNAME,
B.INF_TASKNAME AS RWNAME,
(CASE A.SYNCRESULT WHEN 0  THEN '未同步' WHEN 1 THEN '同步成功' WHEN 2 THEN '同步失败' WHEN 3 THEN '同步异常'  ELSE '' END) AS RESULTNAME,
A.INF_CONTENT,
A.INF_ERRORCONTENT,
A.SYNCNUM,
A.REMARK,
A.CREATOR,
A.CREATEDATE,
A.UPDATOR,
A.UPDATEDATE,
(CASE B.INF_TRIGGERKIND WHEN 0  THEN '' WHEN 1 THEN '实时' WHEN 2 THEN '手动' WHEN 3 THEN '定时' WHEN 4 THEN '其他' ELSE '' END) AS TRIGGERNAME,
(CASE B.INF_KIND WHEN 0 THEN '' WHEN 1 THEN '提供方' WHEN 2 THEN '调用方' ELSE  ''  END) AS KINDNAME,
(CASE B.SYNCKIND WHEN 0 THEN '' WHEN 1 THEN 'WebService' WHEN 2 THEN 'WebApi' WHEN 3 THEN 'FileExport' WHEN 4 THEN 'dbLink' WHEN 5 THEN 'other' ELSE '' END) AS SYNCNAME ,
C.NAME AS SUPPNAME,
D.NAME AS CALLNAME
FROM INF_TASKLOG A LEFT JOIN INF_TASK B ON A.TASKID=B.ID
LEFT JOIN BASE_DICTIONARY C ON B.SUPPLYSYSTEM=C.ID
LEFT JOIN BASE_DICTIONARY D ON B.CALLSYSTEM=D.ID
;
--------------------------------------------------------
--  DDL for View V_JLDW
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JLDW" ("UNITID", "BEFOREUNIT", "AFTERUNIT", "UNITRELATION", "UNITRATIO", "BEFCODE", "BEFNAME", "AFTCODE", "AFTNAME") AS 
  SELECT
A.UNITID,
A.BEFOREUNIT,
A.AFTERUNIT,
A.UNITRELATION,
A.UNITRATIO,
B.CODE AS BEFCODE,
B.NAME AS BEFNAME,
C.CODE AS AFTCODE,
C.NAME AS AFTNAME
FROM BASE_UNITCONVERSION A
LEFT JOIN BASE_DICTIONARY B ON A.BEFOREUNIT=B.ID
LEFT JOIN BASE_DICTIONARY C ON A.AFTERUNIT=C.ID
;
--------------------------------------------------------
--  DDL for View V_JSD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JSD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "ORDERNUM", "PERSONNAME", "STATUSNAME", "PROVIDERDEPID", "DEPNAME", "EXTENDINT1", "URL") AS 
  SELECT
  A.ID,
  A.GUID,
  A.NAME,
  A.CODE,
  A.KINDID,
  A.TYPEID,
  A.DUTYID,
  A.DEPARTID,
  A.ROUTEID,
  A.ROUTE_STEPID,
  A.ROLEID,
  A.RELATESHEET,
  A.SUBMITMANID,
  A.SUBMITTIME,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE ,
  A.UPDATOR,
  A.UPDATEDATE,
  A.ZTID,
  A.EXTENDSTRING1,
  A.EXTENDSTRING2,
  A.EXTENDSTRING3,
  A.EXTENDSTRING4,
  A.EXTENDSTRING5,
  A.ORDERNUM,
  B.NAME AS PERSONNAME,
  C.NAME AS STATUSNAME,
  A.PROVIDERDEPID,
  D.NAME AS DEPNAME,
  A.EXTENDINT1,
  A.URL
  FROM WZ_SHEET A LEFT JOIN BASE_PERSON B
  ON A.CREATOR=B.ID
  LEFT JOIN BASE_DICTIONARY C
  ON A.STATUS=C.ID
  LEFT JOIN BASE_ORGANIZATION D
  ON A.DEPARTID=D.ID
;
--------------------------------------------------------
--  DDL for View V_JSDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JSDETAILS" ("RN", "ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "STOREID", "PROVIDERDEPID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "MATERIALSPECIFICATION", "DESCRIPTION", "EXPIRATIONTIME", "STORELOCATIONCODE", "TAGCODE", "TAXPRICE", "TAXSUM", "STORELOCATIONID", "STORELOCATIONNAME", "PLANDEPARTID", "PLANDEPARTNAME", "DETAILCOUNT", "DETAILUNITNAME", "OWNERTYPE", "OWNERNAME", "ISEQUIPMENT", "ENABLESN", "THCOUNT") AS 
  SELECT
   ROW_NUMBER () OVER (PARTITION BY A.SHEETID ORDER BY A.ID )rn,
    A.ID,
    A.GUID,
    A.SHEETID,
    A.SHEETDETAILID,
    A.CATEGORYID,
    A.MATERIALID,
    A.MATERIALCODE,
    /*SUBSTR(A.MATERIALCODE,1,2) AS PARCODE,*/
    A.MATERIALNAME,
    A.MATERIALBRAND,
    A.MATERIALMODEL,
    A.STOREID,
    A.PROVIDERDEPID,
    A.STATUS,
    A.MEMO,
    A.CREATOR,
    A.CREATEDATE,
    A.UPDATOR,
    A.UPDATEDATE,
    A.ZTID,
    A.NOTAXPRICE,
    A.TAXRATE,
    A.NOTAXSUM,
    A.MATERIALSPECIFICATION,
    A.DESCRIPTION,
    A.EXPIRATIONTIME,
    A.STORELOCATIONCODE,
    A.TAGCODE,
    A.TAXPRICE,
    A.TAXSUM,
    A.STORELOCATIONID,
    A.STORELOCATIONNAME,
    A.PLANDEPARTID,
    D.NAME AS PLANDEPARTNAME,
    A.DETAILCOUNT,
    A.DETAILUNITNAME,
    A.OWNERTYPE,
    C.NAME AS OWNERNAME,
    A.ISEQUIPMENT,
    A.ENABLESN,
    (SELECT NVL(SUM(L.COUNT),0) FROM WZ_RECEIVINGLOG L WHERE L.RELATIONGUID=A.GUID AND L.OPERATIONTYPE=2 AND L.ORDERID=A.SHEETDETAILID) AS THCOUNT
    FROM WZ_SHEETDETAIL A LEFT JOIN WZ_SHEET B ON A.SHEETID=B.ID
    LEFT JOIN BASE_DICTIONARY C ON A.OWNERTYPE=C.ID
    LEFT JOIN BASE_ORGANIZATION D ON A.PLANDEPARTID = D.ID
;
--------------------------------------------------------
--  DDL for View V_JSDFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JSDFORAPI" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "ORDERNUM", "PERSONNAME", "STATUSNAME", "PROVIDERDEPID", "DEPNAME", "EXTENDINT1") AS 
  SELECT
  A.ID,
  A.GUID,
  A.NAME,
  A.CODE,
  A.KINDID,
  A.TYPEID,
  A.DUTYID,
  A.DEPARTID,
  A.ROUTEID,
  A.ROUTE_STEPID,
  A.ROLEID,
  A.RELATESHEET,
  A.SUBMITMANID,
  A.SUBMITTIME,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  A.UPDATOR,
  A.UPDATEDATE,
  A.ZTID,
  A.EXTENDSTRING1,
  A.EXTENDSTRING2,
  A.EXTENDSTRING3,
  A.EXTENDSTRING4,
  A.EXTENDSTRING5,
  A.ORDERNUM,
  B.NAME AS PERSONNAME,
  C.NAME AS STATUSNAME,
  A.PROVIDERDEPID,
  D.NAME AS DEPNAME,
  A.EXTENDINT1
  FROM WZ_SHEET A LEFT JOIN BASE_PERSON B
  ON A.CREATOR=B.ID
  LEFT JOIN BASE_DICTIONARY C
  ON A.STATUS=C.ID
  LEFT JOIN BASE_ORGANIZATION D
  ON A.DEPARTID=D.ID
  WHERE A.KINDID=588 AND A.STATUS=39 ORDER BY CREATEDATE DESC
;
--------------------------------------------------------
--  DDL for View V_JSDMORE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JSDMORE" ("ID", "CODE", "ORDERNUM", "EXTENDSTRING1", "EXTENDSTRING3", "CREATEDATE", "ZTID", "EXTENDSTRING2", "CREATOR", "EXTENDSTRING5", "PROVIDERDEPID", "JSCOUNT", "RKCOUMT") AS 
  SELECT
 A.ID,
 A.CODE,          --接收单号
 A.ORDERNUM,      --订单编号
 A.EXTENDSTRING1, --供应商
 A.EXTENDSTRING3, --订单类型
 A.CREATEDATE,    --接收时间
 A.ZTID,          --库存组织
 A.EXTENDSTRING2,  --库存组织名称
 A.CREATOR  ,      --制单人
 CASE WHEN A.EXTENDSTRING5='0' THEN '' ELSE TO_CHAR(A.EXTENDSTRING5) END AS EXTENDSTRING5,  --发放号
 A.PROVIDERDEPID,   --供应商ID
 NVL((SELECT SUM(B.DETAILCOUNT) FROM WZ_SHEETDETAIL B  WHERE B.SHEETID=A.ID),0) AS JSCOUNT,
 NVL((SELECT SUM(C.DETAILCOUNT) FROM WZ_SHEETRKDETAIL C LEFT JOIN WZ_SHEETDETAIL D ON C.SHEETDETAILID=D.ID WHERE D.SHEETID=A.ID),0) AS RKCOUMT
 FROM WZ_SHEET A WHERE A.KINDID=588 AND A.STATUS=41
;
--------------------------------------------------------
--  DDL for View V_JSLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JSLIST" ("ID", "GUID", "ERPID", "ORDERID", "ORDERNUM", "BUSINESSID", "ERPSTOCKORGID", "STOCKORGID", "STOCKORGCODE", "ERPPROVIDERDEPID", "PROVIDERDEPCODE", "PROVIDERDEPNAME", "PROVIDERPLACEID", "PROVIDERPLACECODE", "PROVIDERDEPID", "ISSUEID", "ISSUECODE", "FYID", "ERPROWNUM", "ORDERROWID", "MATERIALCODE", "PARCODE", "DESCRIPTION", "DETAILUNIT", "NOTAXPRICE", "NOTAXSUM", "BASEUNIT", "BASEUNITCOUNT", "BASEUNITPRICE", "BASEUNITSUM", "TAXRATE", "CONSIGNMENT", "DEPARTID", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ORDERTYPE", "JSTYPE", "MATERIALID", "MATERIALNAME", "MATERIALSPECIFICATION", "MATERIALMODEL", "MATERIALBRAND", "SPARESCATEID", "EXTENDSTRING1", "ISCOUNT") AS 
  SELECT
  A.ID,
  A.GUID,
  A.ERPID,
  A.ORDERID,
  A.ORDERNUM,
  A.BUSINESSID,
  A.ERPSTOCKORGID,
  A.STOCKORGID,
  A.STOCKORGCODE,
  A.ERPPROVIDERDEPID,
  A.PROVIDERDEPCODE,
  A.PROVIDERDEPNAME,
  A.PROVIDERPLACEID,
  A.PROVIDERPLACECODE,
  A.PROVIDERDEPID,
  A.ISSUEID,
  A.ISSUECODE,
  A.FYID,
  A.ERPROWNUM,
  A.ORDERROWID,
  A.MATERIALCODE,
  SUBSTR(A.MATERIALCODE,1,2) AS PARCODE,
  A.DESCRIPTION,
  A.DETAILUNIT,
  A.NOTAXPRICE,
  A.NOTAXSUM,
  A.BASEUNIT,
  A.BASEUNITCOUNT,
  A.BASEUNITPRICE,
  A.BASEUNITSUM,
  A.TAXRATE,
  A.CONSIGNMENT,
  A.DEPARTID,
  A.CREATOR,
  A.CREATEDATE,
  A.UPDATOR,
  A.UPDATEDATE,
  A.ORDERTYPE,
  B.NAME AS JSTYPE,
  C.ID AS MATERIALID, --物料id
  C.NAME AS MATERIALNAME,--物料名称
  C.SPECIFICATIONS as MATERIALSPECIFICATION,--物料规格
  C.MODEL AS MATERIALMODEL,--物料型号
  C.BRAND AS MATERIALBRAND,--物料品牌
  C.SPARESCATEID,--备件分类ID
     A.EXTENDSTRING1,
   A.EXTENDFLOAT1-(SELECT NVL( SUM(H.DETAILCOUNT),0)
  FROM  WZ_SHEETDETAIL H INNER JOIN WZ_SHEET I ON H.SHEETID=I.ID WHERE H.SHEETDETAILID=A.ID  and I.KINDID=588 and I.STATUS<>41) AS ISCOUNT

  FROM WZ_ORDERINFO A
  LEFT JOIN BASE_DICTIONARY B ON A.CONSIGNMENT=B.ID
  LEFT JOIN BASE_MATERIAL C ON A.MATERIALCODE=C.CODE and a.STOCKORGID=c.ztid
  WHERE /*A.PURCHASETYPE=0 AND*/
  A.EXTENDFLOAT1>0
 AND  A.EXTENDFLOAT1>(SELECT NVL( SUM(H.DETAILCOUNT),0) 
  FROM  WZ_SHEETDETAIL H LEFT JOIN WZ_SHEET I ON H.SHEETID=I.ID WHERE H.SHEETDETAILID=A.ID  and I.KINDID=588 and I.STATUS<>41)
  AND A.EXTENDINT1>0
;
--------------------------------------------------------
--  DDL for View V_JSLISTFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JSLISTFORAPI" ("ID", "GUID", "ERPID", "ORDERID", "ORDERNUM", "BUSINESSID", "ERPSTOCKORGID", "STOCKORGID", "STOCKORGCODE", "ERPPROVIDERDEPID", "PROVIDERDEPCODE", "PROVIDERDEPNAME", "PROVIDERPLACEID", "PROVIDERPLACECODE", "ISSUEID", "ISSUECODE", "FYID", "ERPROWNUM", "ORDERROWID", "MATERIALCODE", "PARCODE", "DESCRIPTION", "DETAILUNIT", "NOTAXPRICE", "NOTAXSUM", "BASEUNIT", "BASEUNITCOUNT", "BASEUNITPRICE", "BASEUNITSUM", "TAXRATE", "CONSIGNMENT", "DEPARTID", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ORDERTYPE", "JSTYPE", "MATERIALID", "MATERIALNAME", "MATERIALSPECIFICATION", "MATERIALMODEL", "MATERIALBRAND", "SPARESCATEID", "JSCOUNT", "ISCOUNT") AS 
  SELECT
  A.ID,
  A.GUID,
  A.ERPID,
  A.ORDERID,
  A.ORDERNUM,
  A.BUSINESSID,
  A.ERPSTOCKORGID,
  A.STOCKORGID,
  A.STOCKORGCODE,
  A.ERPPROVIDERDEPID,
  A.PROVIDERDEPCODE,
  A.PROVIDERDEPNAME,
  A.PROVIDERPLACEID,
  A.PROVIDERPLACECODE,
  A.ISSUEID,
  A.ISSUECODE,
  A.FYID,
  A.ERPROWNUM,
  A.ORDERROWID,
  A.MATERIALCODE,
  SUBSTR(A.MATERIALCODE,1,2) AS PARCODE,
  A.DESCRIPTION,
  A.DETAILUNIT,
  A.NOTAXPRICE,
  A.NOTAXSUM,
  A.BASEUNIT,
  A.BASEUNITCOUNT,
  A.BASEUNITPRICE,
  A.BASEUNITSUM,
  A.TAXRATE,
  A.CONSIGNMENT,
  A.DEPARTID,
  A.CREATOR,
  A.CREATEDATE,
  A.UPDATOR,
  A.UPDATEDATE,
  A.ORDERTYPE,
  B.NAME AS JSTYPE,
  C.ID AS MATERIALID, --物料id
  C.NAME AS MATERIALNAME,--物料名称
  C.SPECIFICATIONS as MATERIALSPECIFICATION,--物料规格
  C.MODEL AS MATERIALMODEL,--物料型号
  C.BRAND AS MATERIALBRAND,--物料品牌
  C.SPARESCATEID,--备件分类ID
  (SELECT NVL(SUM(D.DETAILCOUNT),0)  FROM WZ_SHEETDETAIL D LEFT JOIN WZ_SHEET E ON D.SHEETID=E.ID WHERE E.KINDID=588 AND E.ORDERNUM=A.ORDERNUM AND A.ID=D.SHEETDETAILID) AS JSCOUNT,
   A.EXTENDFLOAT1-(SELECT NVL( SUM(H.DETAILCOUNT),0)
  FROM  WZ_SHEETDETAIL H INNER JOIN WZ_SHEET I ON H.SHEETID=I.ID WHERE H.SHEETDETAILID=A.ID  and I.KINDID=588 and I.STATUS<>41) AS ISCOUNT
  FROM WZ_ORDERINFO A
  LEFT JOIN BASE_DICTIONARY B ON A.CONSIGNMENT=B.ID
  LEFT JOIN BASE_MATERIAL C ON A.MATERIALCODE=C.CODE
  WHERE /*A.PURCHASETYPE=0 AND*/
  A.EXTENDFLOAT1>0
 AND  A.EXTENDFLOAT1>(SELECT NVL( SUM(H.DETAILCOUNT),0)
  FROM  WZ_SHEETDETAIL H LEFT JOIN WZ_SHEET I ON H.SHEETID=I.ID WHERE H.SHEETDETAILID=A.ID  and I.KINDID=588 and I.STATUS<>41)
;
--------------------------------------------------------
--  DDL for View V_JSLOG
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JSLOG" ("ID", "GUID", "MATERIALCODE", "DESCRIPTION", "ORDERID", "RELATIONGUID", "CONTENT", "CREATEDATE", "CREATER", "PERSONNAME", "COUNT", "EXTENDINT1", "OPERATIONTYPE") AS 
  SELECT
 A.ID,
 A.GUID,
 B.MATERIALCODE,
 B.DESCRIPTION,
 A.ORDERID,
 A.RELATIONGUID,
 A.CONTENT,
 A.CREATEDATE,
 A.CREATER,
 C.NAME AS PERSONNAME,
 A.COUNT,
 A.EXTENDINT1,
 A.OPERATIONTYPE
 FROM WZ_RECEIVINGLOG A LEFT JOIN WZ_SHEETDETAIL B  ON A.RELATIONGUID=B.GUID
 LEFT JOIN BASE_PERSON C  ON A.CREATER=C.ID
;
--------------------------------------------------------
--  DDL for View V_JSRKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JSRKDETAILS" ("ID", "DETAILID", "SUBDETAILCOUNT", "STOREID", "STORELOCATIONCODE", "STORELOCATIONNAME", "SNCODE", "UNITNAME", "MATERIALCODE", "DESCRIPTION", "ISEQUIPMENT", "EXTENDSTRING1", "CODE") AS 
  SELECT
  A.ID,
  A.DETAILID,
  A.SUBDETAILCOUNT,
  A.STOREID,
  A.STORELOCATIONCODE,
  A.STORELOCATIONNAME,
  A.SNCODE,
  A.UNITNAME,
  B.MATERIALCODE,
  B.DESCRIPTION,
  B.ISEQUIPMENT,
  C.EXTENDSTRING1,
  C.CODE
FROM WZ_SHEETRKSUBDETAIL A LEFT JOIN WZ_SHEETRKDETAIL B ON A.DETAILID=B.ID
LEFT JOIN WZ_SHEET_RK C ON B.SHEETID=C.ID
WHERE C.KINDID=35
;
--------------------------------------------------------
--  DDL for View V_JSRKDFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JSRKDFORAPI" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "ORDERNUM", "RECEIVENUM", "PROVIDERDEPID", "OWNERDEP", "ORDERTYPE", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "EXTENDINT1", "STATUSNAME", "PERSONNAME", "DEPNAME", "PROVIDERNAME") AS 
  SELECT
  A.ID,
  A.GUID,
  A.NAME,
  A.CODE,
  A.KINDID,
  A.TYPEID,
  A.DUTYID,
  A.DEPARTID,
  A.ROUTEID,
  A.ROUTE_STEPID,
  A.ROLEID,
  A.RELATESHEET,
  A.SUBMITMANID,
  A.SUBMITTIME,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  A.UPDATOR,
  A.UPDATEDATE,
  A.ZTID,
  A.ORDERNUM,
  A.RECEIVENUM,
  A.PROVIDERDEPID,
  A.OWNERDEP,
  A.ORDERTYPE,
  A.EXTENDSTRING1,
  A.EXTENDSTRING2,
  A.EXTENDSTRING3,
  A.EXTENDSTRING4,
  A.EXTENDSTRING5,
  A.EXTENDINT1,
  B.NAME AS STATUSNAME,
  C.NAME AS PERSONNAME,
  D.NAME AS DEPNAME,
  E.NAME AS PROVIDERNAME
  FROM
WZ_SHEET_RK A
LEFT JOIN BASE_DICTIONARY B ON A.STATUS=B.ID
LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID
LEFT JOIN BASE_ORGANIZATION D ON A.DEPARTID=D.ID
LEFT JOIN BASE_PROVIDER E ON A.PROVIDERDEPID=E.ID
WHERE A.KINDID=35 AND A.STATUS=39 ORDER BY CREATEDATE DESC
;
--------------------------------------------------------
--  DDL for View V_JSRKLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JSRKLIST" ("ID", "GUID", "SHEETID", "JSCODE", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "PROVIDERDEPID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "MATERIALSPECIFICATION", "DESCRIPTION", "TAXPRICE", "TAXSUM", "DETAILCOUNT", "ISEQUIPMENT", "ENABLESN", "SNCODE", "OWNERTYPE", "DETAILUNITNAME", "EXTENDDATE2", "PLANDEPNAME", "EXPIRATIONTIME", "PLANDEPARTID", "JSTYPE", "JSTYPECODE", "EXTENDSTRING1", "PROVIDERNAME", "JSCOUNT", "KCOUNT", "ISCOUNT", "EXTENDINT1") AS 
  SELECT
 A.ID,
 A.GUID,
 A.SHEETID,
 B.CODE AS JSCODE,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.PROVIDERDEPID,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.ZTID,
 A.NOTAXPRICE,
 A.TAXRATE,
 A.NOTAXSUM,
 A.MATERIALSPECIFICATION,
 A.DESCRIPTION,
 A.TAXPRICE,
 A.TAXSUM,
 A.DETAILCOUNT,
 A.ISEQUIPMENT,
 A.ENABLESN,
 A.SNCODE,
 A.OWNERTYPE,
 A.DETAILUNITNAME,
 A.EXTENDDATE2,
 D.NAME AS PLANDEPNAME,
 A.EXPIRATIONTIME,
 A.PLANDEPARTID,
 C.NAME AS JSTYPE,
 C.CODE AS JSTYPECODE,
 A.EXTENDSTRING1,
 B.EXTENDSTRING1 AS PROVIDERNAME,
 A.DETAILCOUNT-NVL((SELECT sum(L.COUNT) FROM WZ_RECEIVINGLOG L WHERE L.RELATIONGUID=A.GUID AND L.OPERATIONTYPE=2),0) AS JSCOUNT,
 NVL((SELECT sum(STORECOUNT) FROM WZ_STOCK K LEFT JOIN WZ_SHEETRKDETAIL R ON K.SHEETDETAILID=R.ID WHERE R.SHEETDETAILID=A.ID),0) AS KCOUNT,
 (SELECT NVL( SUM(H.DETAILCOUNT),0)FROM  WZ_SHEETRKDETAIL H INNER JOIN WZ_SHEET_RK I ON H.SHEETID=I.ID WHERE H.SHEETDETAILID=A.ID/* AND I.STATUS<>41*/) AS ISCOUNT,
A.ExtendInt1

 FROM WZ_SHEETDETAIL A LEFT JOIN WZ_SHEET B ON A.SHEETID=B.ID
 LEFT JOIN BASE_DICTIONARY C ON A.OWNERTYPE=C.ID
 LEFT JOIN BASE_ORGANIZATION D ON A.PLANDEPARTID = D.ID
 WHERE B.KINDID=588
;
--------------------------------------------------------
--  DDL for View V_JSRKLISTFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JSRKLISTFORAPI" ("ID", "GUID", "SHEETID", "JSCODE", "PROVIDERNAME", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "PROVIDERDEPID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "MATERIALSPECIFICATION", "DESCRIPTION", "TAXPRICE", "TAXSUM", "DETAILCOUNT", "ISEQUIPMENT", "ENABLESN", "SNCODE", "OWNERTYPE", "DETAILUNITNAME", "JSTYPE", "JSTYPECODE", "JSCOUNT", "KCOUNT", "KWNAME", "ISCOUNT") AS 
  SELECT
 A.ID,
 A.GUID,
 A.SHEETID,
 B.CODE AS JSCODE,
 B.EXTENDSTRING1 AS PROVIDERNAME,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.PROVIDERDEPID,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.ZTID,
 A.NOTAXPRICE,
 A.TAXRATE,
 A.NOTAXSUM,
 A.MATERIALSPECIFICATION,
 A.DESCRIPTION,
 A.TAXPRICE,
 A.TAXSUM,
 A.DETAILCOUNT,
 A.ISEQUIPMENT,
 A.ENABLESN,
 A.SNCODE,
 A.OWNERTYPE,
 A.DETAILUNITNAME,
 C.NAME AS JSTYPE,
 C.CODE AS JSTYPECODE,
 A.DETAILCOUNT-NVL((SELECT sum(L.COUNT) FROM WZ_RECEIVINGLOG L WHERE L.RELATIONGUID=A.GUID AND L.OPERATIONTYPE=2),0) AS JSCOUNT,
 NVL((SELECT sum(STORECOUNT) FROM WZ_STOCK K LEFT JOIN WZ_SHEETRKDETAIL R ON K.SHEETDETAILID=R.ID WHERE R.SHEETDETAILID=A.ID),0) AS KCOUNT,
 --(SELECT S.STORELOCATIONCODE FROM WZ_STOCK S WHERE S.MATERIALCODE=A.MATERIALCODE AND ROWNUM=1 )AS KWNAME,
 (SELECT STORELOCATIONCODE FROM ( (SELECT * FROM WZ_STOCK Y ORDER BY Y.CREATEDATE DESC )  ) WHERE MATERIALCODE=A.MATERIALCODE AND ROWNUM=1) AS KWNAME,
 (SELECT NVL( SUM(H.DETAILCOUNT),0)FROM  WZ_SHEETRKDETAIL H INNER JOIN WZ_SHEET_RK I ON H.SHEETID=I.ID WHERE H.SHEETDETAILID=A.ID/* AND I.STATUS<>41*/) AS ISCOUNT

 FROM WZ_SHEETDETAIL A LEFT JOIN WZ_SHEET B ON A.SHEETID=B.ID
 LEFT JOIN BASE_DICTIONARY C ON A.OWNERTYPE=C.ID
 WHERE B.KINDID=588
;
--------------------------------------------------------
--  DDL for View V_JSSHEETFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JSSHEETFORAPI" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "ORDERNUM", "PERSONNAME", "STATUSNAME", "PROVIDERDEPID", "DEPNAME", "JSCOUNT", "RKCOUMT", "EXTENDINT1") AS 
  SELECT
  A.ID,
  A.GUID,
  A.NAME,
  A.CODE,
  A.KINDID,
  A.TYPEID,
  A.DUTYID,
  A.DEPARTID,
  A.ROUTEID,
  A.ROUTE_STEPID,
  A.ROLEID,
  A.RELATESHEET,
  A.SUBMITMANID,
  A.SUBMITTIME,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  A.UPDATOR,
  A.UPDATEDATE,
  A.ZTID,
  A.EXTENDSTRING1,
  A.EXTENDSTRING2,
  A.EXTENDSTRING3,
  A.EXTENDSTRING4,
  A.EXTENDSTRING5,
  A.ORDERNUM,
  B.NAME AS PERSONNAME,
  C.NAME AS STATUSNAME,
  A.PROVIDERDEPID,
  D.NAME AS DEPNAME,
  NVL((SELECT SUM(B.DETAILCOUNT) FROM WZ_SHEETDETAIL B  WHERE B.SHEETID=A.ID),0) AS JSCOUNT,
  NVL((SELECT SUM(C.DETAILCOUNT) FROM WZ_SHEETRKDETAIL C LEFT JOIN WZ_SHEETDETAIL D ON C.SHEETDETAILID=D.ID WHERE D.SHEETID=A.ID),0) AS RKCOUMT,
  A.EXTENDINT1
  FROM WZ_SHEET A LEFT JOIN BASE_PERSON B
  ON A.CREATOR=B.ID
  LEFT JOIN BASE_DICTIONARY C
  ON A.STATUS=C.ID
  LEFT JOIN BASE_ORGANIZATION D
  ON A.DEPARTID=D.ID WHERE A.KINDID=588 AND A.STATUS=41
;
--------------------------------------------------------
--  DDL for View V_JSTHDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_JSTHDETAILS" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "ZTID", "JSCOUNT", "RKCOUNT", "MATERIALCODE", "DESCRIPTION", "DETAILUNITNAME", "ENABLESN", "CREATOR", "CREATEDATE", "PERSONNAME", "YTCOUNT", "PROVIDERDEPNAME") AS 
  SELECT
  A.ID,
  A.GUID,
  A.SHEETID,
  A.SHEETDETAILID,
  A.ZTID,
  NVL(A.DETAILCOUNT,0) AS JSCOUNT,
  NVL(C.DETAILCOUNT,0) AS RKCOUNT,
  A.MATERIALCODE,
  A.DESCRIPTION,
  A.DETAILUNITNAME,
  A.ENABLESN,
  A.CREATOR,
  A.CREATEDATE,
  D.NAME AS PERSONNAME,
  --已经退货数量
  NVL((SELECT SUM(Z.COUNT) FROM WZ_RECEIVINGLOG Z WHERE Z.RELATIONGUID=A.GUID AND Z.OPERATIONTYPE=2),0) AS YTCOUNT,
  B.PROVIDERDEPNAME FROM WZ_SHEETDETAIL A
  LEFT JOIN WZ_ORDERINFO B ON A.SHEETDETAILID=B.ID
  LEFT JOIN WZ_SHEETRKDETAIL C ON  C.SHEETDETAILID=A.ID
  LEFT JOIN BASE_PERSON D ON A.CREATOR=D.ID
;
--------------------------------------------------------
--  DDL for View V_KCDETAIL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_KCDETAIL" ("MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "STOREID", "DESCRIPTION", "ZTID", "OWNERTYPE", "OWNERTYPENAME", "PROVIDERDEPID", "PROVIDERNAME", "ZTIDNAME", "STORECOUNT", "HOUSENAME", "FLNAME", "ID") AS 
  select t."MATERIALCODE",t."MATERIALNAME",t."MATERIALBRAND",t."MATERIALMODEL",t."MATERIALSPECIFICATION",t."STOREID",t."DESCRIPTION",t."ZTID",t."OWNERTYPE",t."OWNERTYPENAME",t."PROVIDERDEPID",t."PROVIDERNAME",t."ZTIDNAME",t."STORECOUNT",t."HOUSENAME",t."FLNAME",rownum as id from (
SELECT 
 distinct  stock.MATERIALCODE,              --物料编码
stock.MATERIALNAME,              --物料名称
stock.MATERIALBRAND,             --物料品牌
stock.MATERIALMODEL,             --物料型号
stock.MATERIALSPECIFICATION,     --物料规格
stock.STOREID,                   --库房ID
stock.DESCRIPTION,               --物料说明
stock.ZTID,                      --库存组织
stock.OWNERTYPE,                 --拥有方类型
E.NAME OWNERTYPENAME,        --拥有方名称，例如寄售
stock.PROVIDERDEPID,             --供应商ID
F.NAME

 PROVIDERNAME,         --供应商名称
G.NAME

 ZTIDNAME,              --组织机构
(select  sum(wz_stock.storecount) from wz_stock where wz_stock.materialcode=stock.materialcode and wz_stock.storeid=stock.storeid) as STORECOUNT,--库存数量
B.NAME AS HOUSENAME,         --库房名称
D.NAME  AS FLNAME        --物料分类名称 

FROM wz_stock stock 
INNER JOIN (select a.materialid,ztid,storeid, ownertype, providerdepid  
from wz_stock a  group by a.materialid,ztid,storeid, ownertype, providerdepid ) C 
ON stock.materialid=C.materialid and stock.ztid=C.ztid and stock.storeid=C.storeid and stock.ownertype=C.ownertype and stock.providerdepid=C.providerdepid
LEFT JOIN BASE_WAREHOUSE B  ON stock.STOREID=B.ID
LEFT JOIN BASE_SPAREPARTSCATE D ON substr(stock.MaterialCode,0,2)=D.code 
LEFT JOIN BASE_DICTIONARY E ON stock.OWNERTYPE=E.ID
LEFT JOIN BASE_PROVIDER F ON stock.PROVIDERDEPID=F.ID
LEFT JOIN BASE_ORGANIZATION G ON stock.ZTID=G.ID
)t
;
--------------------------------------------------------
--  DDL for View V_KCPD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_KCPD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "EXTENDINT1", "EXTENDINT2", "EXTENDSTRING1", "URL", "PERSONNAME", "HOUSENAME", "PDTYPE", "STATUSNAME", "DEPNAME", "SUMDETAILCOUNT", "EXTENDINT3") AS 
  SELECT
 A.ID,
 A.GUID,
 A.NAME,
 A.CODE,
 A.KINDID,
 A.TYPEID,
 A.DUTYID,
 A.DEPARTID,
 A.ROUTEID,
 A.ROUTE_STEPID,
 A.ROLEID,
 A.RELATESHEET,
 A.SUBMITMANID,
 A.SUBMITTIME,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.ZTID,
 A.EXTENDINT1,
 A.EXTENDINT2,
 A.EXTENDSTRING1,
 A.URL,
 B.NAME AS PERSONNAME,
 C.NAME AS HOUSENAME,
 D.NAME AS PDTYPE,
 E.NAME AS STATUSNAME,
 F.NAME AS DEPNAME,
 NVL((SELECT COUNT(1) FROM WZ_PDDETAIL Z WHERE Z.SHEETID=A.ID),0) AS SUMDETAILCOUNT,
 NVL((SELECT COUNT(1) FROM WZ_PDDETAIL Z WHERE Z.SHEETID=A.ID And Z.stockstatus=1),0) AS EXTENDINT3
 FROM WZ_SHEET A LEFT JOIN BASE_PERSON B ON A.CREATOR=B.ID
 LEFT JOIN BASE_WAREHOUSE C ON A.EXTENDINT1=C.ID
 LEFT JOIN BASE_DICTIONARY D ON A.EXTENDINT2=D.ID
 LEFT JOIN BASE_DICTIONARY E ON A.STATUS=E.ID
 LEFT JOIN BASE_ORGANIZATION F ON A.DEPARTID=F.ID
 WHERE KINDID=246
;
--------------------------------------------------------
--  DDL for View V_KCPDDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_KCPDDETAILS" ("ID", "GUID", "TAGCODE", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALNAME", "MATERIALCODE", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "DESCRIPTION", "DETAILCOUNT", "SYSCOUNT", "DETAILUNITNAME", "CURRENCYUNIT", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "PROVIDERDEPID", "PLANDEPARTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "TAXPRICE", "MEMO", "CREATOR", "STOCKDATE", "STOCKMAN", "CREATEDATE", "STOCKSTATUS", "STOCKRESULT", "STOCKUNNORMALINFO", "ZTID", "KCCOUNT", "STOCKSTATUSNAME", "STOCKRESULTNAME", "HOUSENAME", "HOUSECODE", "FLNAME", "PDPERSON", "PROVIDERNAME", "PYCOUNT") AS 
  SELECT
 A.ID,
 A.GUID,
 A.TAGCODE,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALNAME,
 A.MATERIALCODE,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.MATERIALSPECIFICATION,
 A.DESCRIPTION,
 A.DETAILCOUNT,
 A.SYSCOUNT,
 A.DETAILUNITNAME,
 A.CURRENCYUNIT,
 A.STOREID,
 A.STORELOCATIONID,
 A.STORELOCATIONCODE,
 A.STORELOCATIONNAME,
 A.PROVIDERDEPID,
 A.PLANDEPARTID,
 A.NOTAXPRICE,
 A.TAXRATE,
 A.NOTAXSUM,
 A.TAXPRICE,
 A.MEMO,
 A.CREATOR,
 A.STOCKDATE,
 A.STOCKMAN,
 A.CREATEDATE,
 A.STOCKSTATUS,
 A.STOCKRESULT,
 A.STOCKUNNORMALINFO,
 A.ZTID,
 decode(A.STOCKSTATUS,1,A.SYSCOUNT,0,(SELECT SUM(Z.STORECOUNT) FROM WZ_STOCK Z WHERE Z.MATERIALCODE=A.MATERIALCODE AND Z.STOREID=A.STOREID AND Z.STORELOCATIONID=A.STORELOCATIONID),'') as  KCCOUNT,
 decode(A.STOCKSTATUS,1,'已盘',0,'未盘','') as  STOCKSTATUSNAME,
 decode(A.STOCKRESULT,1,'盘盈',0,'正常',-1,'盘亏','') as  STOCKRESULTNAME,
 B.NAME AS HOUSENAME,
 B.CODE AS HOUSECODE,
 D.NAME AS FLNAME,
 E.NAME AS PDPERSON,
 F.NAME AS PROVIDERNAME,
 (SELECT NVL(SUM(PD.DETAILCOUNT),0) FROM WZ_PDDETAIL PD WHERE PD.SHEETDETAILID=A.ID) AS PYCOUNT
 FROM WZ_PDDETAIL A LEFT JOIN BASE_WAREHOUSE B ON A.STOREID=B.ID
 LEFT JOIN BASE_SPAREPARTSCATE D ON A.CATEGORYID=D.ID
 LEFT JOIN BASE_PERSON E ON A.STOCKMAN=E.ID
 LEFT JOIN BASE_PROVIDER F ON A.PROVIDERDEPID=F.ID
;
--------------------------------------------------------
--  DDL for View V_KCPDJSLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_KCPDJSLIST" ("MATERIALCODE", "DESCRIPTION", "DETAILUNITNAME", "STORECOUNT", "STOREID", "STORELOCATIONID", "STORELOCATIONNAME", "STORELOCATIONCODE", "ZTID", "ENABLESN", "HOUSENAME", "PROVIDERDEPID", "PROVIDERNAME", "YPCOUNT") AS 
  SELECT
 A.MATERIALCODE,
 A.DESCRIPTION,
 A.DETAILUNITNAME,
 NVL(SUM(A.STORECOUNT),0) AS STORECOUNT,
 A.STOREID,
 A.STORELOCATIONID,
 A.STORELOCATIONNAME,
 A.STORELOCATIONCODE,
 A.ZTID,
 A.ENABLESN,
 B.NAME AS HOUSENAME,
 A.PROVIDERDEPID,
 C.NAME AS PROVIDERNAME,
 NVL((SELECT SUM(WZ_PDDETAIL.DETAILCOUNT) FROM WZ_PDDETAIL LEFT JOIN WZ_SHEET ON WZ_SHEET.ID=WZ_PDDETAIL.SHEETID WHERE WZ_SHEET.STATUS <> 41
   AND WZ_SHEET.KINDID=246 AND WZ_PDDETAIL.EXTENDSTRING1=A.MATERIALCODE),0) AS YPCOUNT
 FROM WZ_STOCK A LEFT JOIN BASE_WAREHOUSE B ON A.STOREID=B.ID
 LEFT JOIN BASE_PROVIDER C ON A.PROVIDERDEPID=C.ID
 GROUP BY MATERIALCODE,DESCRIPTION,DETAILUNITNAME,STOREID,STORELOCATIONID,STORELOCATIONNAME,STORELOCATIONCODE,B.NAME,A.ZTID,ENABLESN,A.PROVIDERDEPID,C.NAME
;
--------------------------------------------------------
--  DDL for View V_KCSUBDETAIL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_KCSUBDETAIL" ("ID", "GUID", "TAGCODE", "SHEETID", "SHEETDETAILID", "MATERIALID", "CATEGORYID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "DESCRIPTION", "STORECOUNT", "NOTAXPRICE", "TAXPRICE", "TAXRATE", "ORDERNUM", "RECEIVENUM", "DETAILUNIT", "CURRENCYUNIT", "STOREID", "PROVIDERDEPID", "STORELOCATIONCODE", "STORELOCATIONNAME", "STORELOCATIONID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "EXPIRATIONTIME", "ZTID", "DETAILUNITNAME", "HOUSENAME", "HOUSECODE", "PERSONNAME", "FLNAME", "GYSNAME", "JHNAME") AS 
  SELECT
A.ID,                        --主键ID
A.GUID,                      --guid
A.TAGCODE,                   --标签打印编码
A.SHEETID,                   --单据id
A.SHEETDETAILID,             --明细id
A.MATERIALID,                --物料id
A.CATEGORYID,                --物料类型id
A.MATERIALCODE,              --物料编码
A.MATERIALNAME,              --物料名称
A.MATERIALBRAND,             --物料品牌
A.MATERIALMODEL,             --物料型号
A.MATERIALSPECIFICATION,     --物料规格
A.DESCRIPTION,               --物料描述
A.STORECOUNT,                --库存数量
A.NOTAXPRICE,                --不含税单价
A.TAXPRICE,                  --含税单价
A.TAXRATE,                   --税率
/*A.NOTAXSUM, */                 --不含税总金额
/*A.TAXSUM,*/                    --含税金额
A.ORDERNUM,                  --采购订单编码
A.RECEIVENUM,                --接收单号
A.DETAILUNIT,                --单位
A.CURRENCYUNIT,              --货币
A.STOREID,                   --库房
A.PROVIDERDEPID,             --供应商
A.STORELOCATIONCODE,         --库位编码
A.STORELOCATIONNAME,         --库位名称
A.STORELOCATIONID,           --库位id
A.STATUS,                    --状态
A.MEMO,                      --备注
A.CREATOR,                   --添加人
A.CREATEDATE,                --添加日期
A.EXPIRATIONTIME,            --质保到期时间
A.ZTID,                      --账套
A.DETAILUNITNAME,            --单位名称
B.NAME AS HOUSENAME,         --库房名称
B.CODE AS HOUSECODE,         --库房编码
C.NAME AS PERSONNAME,        --添加人姓名
D.NAME AS FLNAME,            --物料分类名称
E.NAME AS GYSNAME,           --供应商名称
F.NAME AS JHNAME             --计划部门名称
FROM WZ_STOCK A LEFT JOIN BASE_WAREHOUSE B  ON A.STOREID=B.ID
LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID
LEFT JOIN BASE_SPAREPARTSCATE D ON A.CATEGORYID=D.ID
LEFT JOIN BASE_PROVIDER E ON A.PROVIDERDEPID=E.ID
LEFT JOIN BASE_ORGANIZATION F ON A.PLANDEPARTID=F.ID
/*WHERE A.PURCHASETYPE=0;*/
;
--------------------------------------------------------
--  DDL for View V_KCXHPDLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_KCXHPDLIST" ("MATERIALCODE", "DESCRIPTION", "DETAILUNITNAME", "CATEGORYID", "STORECOUNT", "STOREID", "STORELOCATIONID", "STORELOCATIONNAME", "STORELOCATIONCODE", "ZTID", "ENABLESN", "HOUSENAME", "CODE", "PROVIDERDEPID", "PROVIDERNAME", "YPCOUNT") AS 
  SELECT A.MATERIALCODE,
       A.DESCRIPTION,
       A.DETAILUNITNAME,
       A.CATEGORYID,
       NVL(SUM(A.STORECOUNT), 0) AS STORECOUNT,
       A.STOREID,
       A.STORELOCATIONID,
       A.STORELOCATIONNAME,
       A.STORELOCATIONCODE,
       A.ZTID,
       A.ENABLESN,
       B.NAME AS HOUSENAME,
       C.CODE,
       A.PROVIDERDEPID,
       D.NAME PROVIDERNAME,
       NVL((SELECT SUM(WZ_PDDETAIL.DETAILCOUNT)
             FROM WZ_PDDETAIL
             LEFT JOIN WZ_SHEET ON WZ_SHEET.ID = WZ_PDDETAIL.SHEETID
            WHERE WZ_SHEET.STATUS <> 41
              AND WZ_SHEET.KINDID = 246
              AND WZ_PDDETAIL.EXTENDSTRING1 = A.MATERIALCODE),
           0) AS YPCOUNT
  FROM WZ_STOCK A
  LEFT JOIN BASE_WAREHOUSE B ON A.STOREID = B.ID
  LEFT JOIN BASE_SPAREPARTSCATE C ON A.CATEGORYID=C.ID
  LEFT JOIN BASE_PROVIDER D ON A.PROVIDERDEPID=D.ID
 GROUP BY MATERIALCODE,
          DESCRIPTION,
          DETAILUNITNAME,
          STOREID,
          STORELOCATIONID,
          STORELOCATIONNAME,
          STORELOCATIONCODE,
          B.NAME,
          A.ZTID,
          A.CATEGORYID,
          C.CODE,
          A.PROVIDERDEPID,
          D.NAME,
          ENABLESN
;
--------------------------------------------------------
--  DDL for View V_LOCATION
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_LOCATION" ("CODE", "SHEETID", "ZTID", "ZTIDNAME") AS 
  SELECT distinct   case
            when instr(A.CODE,'S')=1 then  SUBSTR(A.CODE,2)
            when instr(A.CODE,'J')=1 then  SUBSTR(A.CODE,2)
            when instr(A.CODE,'C')=1 then  SUBSTR(A.CODE,2)
            when instr(A.CODE,'ZM')=1 then  SUBSTR(A.CODE,3)
            when instr(A.CODE,'ZH')=1 then  SUBSTR(A.CODE,3)
            when instr(A.CODE,'(')>1 then  SUBSTR(A.CODE,1,instr(A.CODE,'(')-1)
            when instr(A.CODE,'（')>1 then  SUBSTR(A.CODE,1,instr(A.CODE,'(')-1)
            else A.CODE end
       as CODE,
         case
            when instr(A.CODE,'S')=1 then  SUBSTR(A.CODE,2)
            when instr(A.CODE,'J')=1 then  SUBSTR(A.CODE,2)
            when instr(A.CODE,'C')=1 then  SUBSTR(A.CODE,2)
            when instr(A.CODE,'ZM')=1 then  SUBSTR(A.CODE,3)
            when instr(A.CODE,'ZH')=1 then  SUBSTR(A.CODE,3)
            when instr(A.CODE,'(')>1 then  SUBSTR(A.CODE,1,instr(A.CODE,'(')-1)
            when instr(A.CODE,'（')>1 then  SUBSTR(A.CODE,1,instr(A.CODE,'(')-1)
            else A.CODE end
       as sheetid,
       --A.CODE,
       A.ZTID,
       B.NAME  ZTIDNAME
FROM BASE_WAREHOUSE A LEFT JOIN BASE_ORGANIZATION B
ON A.ZTID=B.ID
WHERE A.PARENTID!=0 and A.Status=1 and A.code is not null
;
--------------------------------------------------------
--  DDL for View V_MATERIAL_SELECT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_MATERIAL_SELECT" ("ID", "GUID", "NAME", "MODEL", "BRAND", "SPARESCATEID", "PRICE", "STATUS", "CONFIGMEMO", "PROVIDERID", "MEMO", "SORT", "CREATOR", "CREATEDATE", "UPDATER", "UPDATEDATE", "ZTID", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDINT4", "EXTENDFLOAT1", "EXTENDFLOAT2", "EXTENDFLOAT3", "EXTENDFLOAT4", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "SPECIFICATIONS", "STOCKUP", "STOCKDOWN", "ISUSEALARM", "CODE", "DESCRIPTION", "UNIT", "MODELS", "ENABLESN", "PPNAME", "PERSONID", "ORGNAME", "SPARESCATENAME") AS 
  SELECT  m.ID ,
            m.GUID ,
            m.Name ,
            m.Model ,
            m.Brand ,
            m.SparescateID ,
            m.Price ,
            m.Status ,
            m.ConfigMemo ,
            m.ProviderID ,
            m.Memo ,
            m.Sort ,
            m.Creator ,
            m.CreateDate ,
            m.Updater ,
            m.UpdateDate ,
            m.ZTID ,
            m.ExtendInt1 ,
            m.ExtendInt2 ,
            m.ExtendInt3 ,
            m.ExtendInt4 ,
            m.ExtendFloat1 ,
            m.ExtendFloat2 ,
            m.ExtendFloat3 ,
            m.ExtendFloat4 ,
            m.ExtendString1 ,
            m.ExtendString2 ,
            m.ExtendString3 ,
            m.ExtendString4 ,
            m.ExtendString5 ,
            m.specifications,
            m.stockup,
            m.stockdown,
            m.isusealarm,
            m.code,
            m.description,
            m.unit,
            m.models,
            m.enablesn,
            p.name AS pPname,
            per.id as personid,
            o.name as orgName,
            s.name as SparescateName
    FROM    Base_Material  m 
    left OUTER join Base_Provider  p on m.ProviderID = p.ID
    LEFT OUTER join base_organization o on o.ztid=m.ztid
    LEFT OUTER join base_person per ON per.departid=o.id
    LEFT OUTER join BASE_SPAREPARTSCATE s ON s.id=m.SparescateID
;
--------------------------------------------------------
--  DDL for View V_OFFICESSPARESCOPE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_OFFICESSPARESCOPE" ("BID", "OFFICESID", "SCOPETYPE", "ID", "CODE", "NAME") AS 
  select o.id as bid,o.officesid,o.scopetype,o.scopeid as id,s.code,s.name
from BASE_OFFICES_SCOPE o
left join base_sparepartscate s on o.scopeid=s.id
;
--------------------------------------------------------
--  DDL for View V_ORDERDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ORDERDETAILS" ("ID", "GUID", "ERPID", "ORDERID", "ORDERNUM", "BUSINESSID", "ERPSTOCKORGID", "STOCKORGID", "STOCKORGCODE", "ERPPROVIDERDEPID", "PROVIDERDEPID", "PROVIDERDEPCODE", "PROVIDERDEPNAME", "PROVIDERPLACEID", "PROVIDERPLACECODE", "ISSUEID", "FFCODE", "FYID", "ERPROWNUM", "ORDERROWID", "MATERIALCODE", "DESCRIPTION", "DETAILUNIT", "DETAILCOUNT", "NOTAXPRICE", "NOTAXSUM", "BASEUNIT", "BASEUNITCOUNT", "BASEUNITPRICE", "BASEUNITSUM", "TAXRATE", "CONSIGNMENT", "DEPARTID", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDINT4", "EXTENDINT5", "EXTENDINT6", "EXTENDFLOAT1", "EXTENDFLOAT2", "EXTENDFLOAT3", "EXTENDFLOAT4", "EXTENDFLOAT5", "EXTENDFLOAT6", "EXTENDSTRING1", "EXTENDSTRING2", "STATUS", "ORDERTYPE", "STOCKORGNAME", "CONSIGNMENTNAME") AS 
  SELECT o.ID,o.GUID,o.ERPID,o.ORDERID,o.ORDERNUM,
  o.BUSINESSID,o.ERPSTOCKORGID,o.STOCKORGID,o.STOCKORGCODE,
  o.ERPPROVIDERDEPID,o.PROVIDERDEPID,o.PROVIDERDEPCODE,o.PROVIDERDEPNAME,
  o.PROVIDERPLACEID,o.PROVIDERPLACECODE,o.ISSUEID, case when o.ISSUECODE=0 then''   else to_char(o.ISSUECODE) END as FFCODE,o.FYID,o.ERPROWNUM,
  o.ORDERROWID,o.MATERIALCODE,o.DESCRIPTION,o.DETAILUNIT,o.DETAILCOUNT,o.NOTAXPRICE,o.NOTAXSUM,
  o.BASEUNIT,o.BASEUNITCOUNT,o.BASEUNITPRICE,o.BASEUNITSUM,o.TAXRATE,o.CONSIGNMENT,o.DEPARTID,
  o.CREATOR,o.CREATEDATE,o.UPDATOR,o.UPDATEDATE,o.EXTENDINT1, o.EXTENDINT2,o.EXTENDINT3,o.EXTENDINT4,
  o.EXTENDINT5,o.EXTENDINT6,o.EXTENDFLOAT1,o.EXTENDFLOAT2,o.EXTENDFLOAT3,o.EXTENDFLOAT4,o.EXTENDFLOAT5,
  o.EXTENDFLOAT6,o.EXTENDSTRING1,o.EXTENDSTRING2,case when o.EXTENDINT1= 1 then '正常' else '取消' end as status,
  o.ORDERTYPE,p.Name as STOCKORGNAME ,d.Name  AS CONSIGNMENTNAME FROM WZ_ORDERINFO O 
 
  JOIN  base_organization p ON O.STOCKORGID=p.ID 
  JOIN BASE_DICTIONARY d ON O.CONSIGNMENT=d.ID
;
--------------------------------------------------------
--  DDL for View V_ORDERINFO
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ORDERINFO" ("ID", "ORDERNUM", "PROVIDERDEPNAME", "STOCKORGID", "ORDERTYPE", "ISSUECODE", "STOCKORGNAME", "PROVIDERDEPID", "FYID", "ORDERID", "ISSUEID", "ERPROWNUM", "ORDERROWID", "ALLCOUNT", "CANUSEDCOUNT") AS 
  SELECT
   A.ERPID AS ID,
   A.ORDERNUM,
   A.PROVIDERDEPNAME,
   A.STOCKORGID,
   A.ORDERTYPE,
   A.ISSUECODE,
   B.NAME
 AS STOCKORGNAME,
   A.providerdepid,
   A.Fyid,
   A.Orderid,
   A.Issueid,
   A.Erprownum,
   A.Orderrowid,
   SUM(A.DETAILCOUNT) AS ALLCOUNT,
   nvl(nvl(SUM(A.EXTENDFLOAT1),0)- nvl((SELECT SUM(detail.DETAILCOUNT) FROM wz_sheetdetail detail left join WZ_SHEET sheet on detail.sheetid=sheet.id
   left  join WZ_ORDERINFO info on detail.sheetdetailid=info.id where info.erpid=a.erpid and sheet.KINDID=588 and sheet.STATUS<>41 ),0),0) AS CANUSEDCOUNT
  FROM WZ_ORDERINFO A LEFT JOIN BASE_ORGANIZATION B ON A.STOCKORGID=B.ID
  WHERE A.EXTENDINT1>0
  GROUP BY A.ERPID,A.ORDERNUM,A.PROVIDERDEPNAME,A.STOCKORGID,A.ORDERTYPE,B.NAME
,A.ISSUECODE,A.providerdepid,A.Fyid,A.ORDERID,A.ISSUEID,A.ERPROWNUM,A.ORDERROWID
;
--------------------------------------------------------
--  DDL for View V_ORDERINFOFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ORDERINFOFORAPI" ("ID", "ORDERNUM", "PROVIDERDEPNAME", "STOCKORGID", "ORDERTYPE", "ISSUECODE", "STOCKORGNAME") AS 
  SELECT
   A.ORDERID AS ID,
   A.ORDERNUM,
   A.PROVIDERDEPNAME,
   A.STOCKORGID,
   A.ORDERTYPE,
   A.ISSUECODE,
   B.NAME AS STOCKORGNAME
  FROM WZ_ORDERINFO A LEFT JOIN BASE_ORGANIZATION B ON A.STOCKORGID=B.ID
  GROUP BY A.ORDERID,A.ORDERNUM,A.PROVIDERDEPNAME,A.STOCKORGID,A.ORDERTYPE,B.NAME,A.ISSUECODE
;
--------------------------------------------------------
--  DDL for View V_OTERTD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_OTERTD" ("SHEETNAME", "EXTENDSTRING1", "ROUTE_STEPID", "ROUTEID", "ID", "CREATOR", "KINDID", "CODE", "SUMCOUNT", "SUMWEIGHT", "DEPNAME", "PERSONNAME", "CREATEDATE", "STATUSNAME", "MEMO", "DEPARTID", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING2NAME", "EXTENDSTRING3NAME") AS 
  select
w.name as sheetname,
w.extendstring1,
w.Route_StepID,
w.ROUTEID,
w.ID,
w.creator,
w.kindid,
w.Code,
w.extendint1 as SUMCOUNT,
w.extendfloat1 as SUMWEIGHT,
org.name as DepNAME,
person.name as PERSONNAME ,
w.createdate,
sheetstatus.name as STATUSNAME,
w.memo,
w.DepartID,
w.extendstring2,
w.extendstring3,
person1.name as extendstring2name ,
person2.name as  extendstring3name


 from wz_sheet  w
left join Base_Person person on person.id=w.Creator
left join Base_Organization org on org.id=w.DepartID
left join Base_Person person1  on person1.id=w.extendstring2
left join Base_Person person2  on person2.id=w.extendstring3
left  join Base_Dictionary sheetstatus on sheetstatus.id=w.status
;
--------------------------------------------------------
--  DDL for View V_PDDETAILFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PDDETAILFORAPI" ("ID", "CODE", "TAGCODE", "SHEETID", "MATERIALCODE", "MATERIALNAME", "SYSCOUNT", "DETAILUNIT", "DETAILCOUNT", "PROVIDERDEPID", "DESCRIPTION", "CREATEDATE", "DETAILUNITNAME", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "PLANDEPARTID", "EXPIRATIONTIME", "STOCKSTATUS", "STOCKRESULT", "PROVIDERNAME", "HOUSENAME", "KCCOUNT") AS 
  select
   a.id,
   b.code,
   a.tagcode,
   a.sheetid,
   a.materialcode,
   a.materialname,
   a.syscount,--系统数量
   a.detailunit,
   a.detailcount,--盘点数量
   a.providerdepid,
   A.DESCRIPTION,
   A.CREATEDATE,
   A.DETAILUNITNAME,
   a.storeid,
   a.storelocationid,
   a.storelocationcode,
   a.storelocationname,
   a.plandepartid,
   a.expirationtime,
   a.stockstatus,
   a.stockresult,

   d.name as providername,
   e.name as housename,
   decode(A.STOCKSTATUS,1,A.SYSCOUNT,0,(SELECT SUM(Z.STORECOUNT) FROM WZ_STOCK Z WHERE Z.MATERIALCODE=A.MATERIALCODE AND Z.STOREID=A.STOREID AND Z.STORELOCATIONID=A.STORELOCATIONID),'') as  KCCOUNT

   from wz_pddetail a left join wz_sheet b on a.sheetid=b.id
   left join base_provider d on a.providerdepid=d.id
   left join base_warehouse e on a.storeid=e.id
;
--------------------------------------------------------
--  DDL for View V_PDSHEETFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PDSHEETFORAPI" ("ID", "CODE", "CREATOR", "CREATEDATE", "EXTENDINT1", "EXTENDINT2", "HOUSENAME", "SUMCOUNT", "YPXCOUNT", "SUMYPCOUNT", "WPCOUNT") AS 
  select
 pd.id,
 /*pd.guid,
 pd.name,*/
 pd.code,
 /*pd.kindid,
 pd.typeid,
 pd.dutyid,
 pd.departid,
 pd.routeid,
 pd.route_stepid,
 pd.roleid,
 pd.relatesheet,
 pd.submitmanid,
 pd.submittime,
 pd.status,
 pd.memo,
 pd.creator,*/
 /*to_date((to_char(pd.createdate,'yyyy-MM-dd')),'yyyy-mm-dd') createdate ,*/
 pd.creator,
 pd.createdate,
 pd.extendint1,
 pd.extendint2,
 house.name as housename,
 /*(select NVL(sum(syscount),0) from wz_pddetail pdmx where pdmx.sheetid=pd.id) as sumcount,
 (select NVL(sum(detailcount),0) from wz_pddetail ypmx where ypmx.sheetid=pd.id) as sumypcount*/
 (select count(*) from wz_pddetail pdmx where pdmx.sheetid=pd.id) as sumcount,
 (select count(*) from wz_pddetail pdmx where pdmx.sheetid=pd.id and  pdmx.stockstatus=1) as ypxcount,
/* (select count(*) from wz_pddetail pdmx where pdmx.sheetid=pd.id and pdmx.stockstatus=0)as wpcount*/
 nvl((select sum(pdmx.detailcount) from wz_pddetail pdmx where pdmx.sheetid=pd.id and  pdmx.stockstatus=1),0) as SUMYPCOUNT,
 nvl((select sum(pdmx.syscount) from wz_pddetail pdmx where pdmx.sheetid=pd.id and pdmx.stockstatus=0),0) as wpcount

 from wz_sheet pd left join base_warehouse house on pd.extendint1=house.id
 where pd.kindid=246 and pd.status=39
 and (select count(*) from wz_pddetail pdmx where pdmx.sheetid=pd.id)>0
 order by id desc
;
--------------------------------------------------------
--  DDL for View V_PERSONSCOPE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PERSONSCOPE" ("TEXT", "CODE", "PERSONID", "SCOPETYPE", "ID", "STATUSF") AS 
  SELECT org.Name AS text,org.Code AS code,scope.PersonID, scope.ScopeType,org.ID AS id,1 AS statusf
FROM Base_Person_Scope scope ,Base_Organization org where org.ID=scope.ScopeID
;
--------------------------------------------------------
--  DDL for View V_PERSON_ROLE_SCOPE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PERSON_ROLE_SCOPE" ("ID", "GUID", "USERTYPE", "CODE", "SPELL", "NAME", "SEX", "EMAIL", "PHONE", "QQ", "PASSWORD", "SECRETKEY", "DEPARTID", "COMPANYID", "STATUS", "SORT", "MEMO", "ISAUDIT", "AUDITBY", "AUDITTIME", "ISSINGLELOGIN", "ISONLINE", "LOGINCOUNT", "LOGINTIME", "LOGINIP", "LOGINCITY", "LASTCHANGEPASSWORD", "CREATOR", "CREATEDATE", "UPDATER", "UPDATEDATE", "ZTID", "ORGNAME", "ROLECODE", "ROLENAME", "SCOPEDEPARTID", "SCOPENAME", "SPAREPARTSCATEID", "SPAREPARTSCATENAME") AS 
  select
      person.id,
      person.guid,
      person.usertype,
      person.code,
      person.spell,
      person.name,
      person.sex,
      person.email,
      person.phone,
      person.qq,
      person.password,
      person.secretkey,
      person.departid,
      person.companyid,
      person.status,
      person.sort,
      person.memo,
      person.isaudit,
      person.auditby,
      person.audittime,
      person.issinglelogin,
      person.isonline,
      person.logincount,
      person.logintime,
      person.loginip,
      person.logincity,
      person.lastchangepassword,
      person.creator,
      person.createdate,
      person.updater,
      person.updatedate,
      person.ztid ,
      org.name as orgname,
      brole.Rolecode,
      brole.rolename as rolename,
      oscope.id as scopedepartid,
      oscope.name as scopename,
      scate.id as sparepartscateid,
      scate.name as sparepartscatename
from Base_Person person
left join Base_Organization org on org.id=person.departid
left join Base_Userrole userrole on userrole.userid=person.id
left join Base_Role brole on brole.rolecode=userrole.rolecode
left join Base_Person_Scope pscope on pscope.personid=person.id
left join Base_Organization oscope on oscope.id=pscope.ScopeID
left join base_sparepartscate scate on scate.id=pscope.ScopeID
;
--------------------------------------------------------
--  DDL for View V_PRINT_DBCKD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PRINT_DBCKD" ("ID", "DBDATE", "DC_ORG", "DR_ORG", "DB_CODE", "DBRESON", "DBZZ_PERSON", "DRZZ_PERSON", "ZXZR_PERSON", "CK_PERSON", "DB_PERSON") AS 
  SELECT   
 B.ID
,A.CREATEDATE AS DBDATE
,C.NAME AS DC_ORG
,D.NAME AS DR_ORG
,B.CODE AS DB_CODE
,A.MEMO AS DBRESON
,P1.NAME AS DBZZ_PERSON
,P2.NAME AS DRZZ_PERSON
,P3.NAME AS ZXZR_PERSON
,P4.NAME AS CK_PERSON
,P5.NAME AS DB_PERSON
FROM WZ_SHEET A--调拨单
INNER JOIN WZ_SHEET_CK B ON B.EXTENDINT2=A.ID
INNER JOIN BASE_ORGANIZATION C ON A.EXTENDINT1=C.ID--调出库存组织
INNER JOIN BASE_ORGANIZATION D ON A.EXTENDINT2=D.ID--调入库存组织
LEFT  JOIN WZ_WAITTASK W1 ON W1.SHEETID=A.ID AND W1.ROUTESTEPID=1568 --流程为调出方站长审批
LEFT  JOIN BASE_PERSON P1 ON W1.HANDINGMANID=P1.ID
LEFT  JOIN WZ_WAITTASK W2 ON W2.SHEETID=A.ID AND W2.ROUTESTEPID=1646 --流程为调入方站长审批
LEFT  JOIN BASE_PERSON P2 ON W2.HANDINGMANID=P2.ID
LEFT  JOIN WZ_WAITTASK W3 ON W3.SHEETID=A.ID AND W3.ROUTESTEPID=2653 --流程为中心副主任审批
LEFT  JOIN BASE_PERSON P3 ON W3.HANDINGMANID=P3.ID
LEFT  JOIN BASE_PERSON P4 ON B.CREATOR=P4.ID --调拨出库单制单人
LEFT  JOIN BASE_PERSON P5 ON A.CREATOR=P5.ID --调拨单制单人
WHERE B.TYPEID=772 AND A.STATUS IN (773,774,41) AND A.KINDID=506
;
--------------------------------------------------------
--  DDL for View V_PRINT_DBCKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PRINT_DBCKDETAILS" ("ID", "SHEETID", "SHEETDETAILID", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "DC_ORG", "DR_ORG", "DB_CODE", "DBDATE", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DESCRIPTION", "CREATOR", "CREATEDATE", "ZTID", "NOTAXSUM", "DETAILCOUNT", "OWNERTYPE", "SNCODE", "DETAILUNITNAME", "NOTAXPRICE", "DBRESON", "DBZZ_PERSON", "DRZZ_PERSON", "ZXZR_PERSON", "CK_PERSON", "DB_PERSON", "DBCOUNT") AS 
  SELECT   
 B.ID
,B.SHEETID
,B.SHEETDETAILID
,B.STOREID
,B.STORELOCATIONID
,B.STORELOCATIONCODE
,B.STORELOCATIONNAME
,E.NAME AS DC_ORG
,F.NAME AS DR_ORG
,D.CODE AS DB_CODE
,D.CREATEDATE AS DBDATE
,B.CATEGORYID
,B.MATERIALID
,B.MATERIALCODE
,B.MATERIALNAME
,B.MATERIALBRAND
,B.MATERIALMODEL
,B.DESCRIPTION
,B.CREATOR
,B.CREATEDATE
,B.ZTID
,B.NOTAXSUM
,B.DETAILCOUNT
,B.OWNERTYPE
,B.SNCODE
,B.DETAILUNITNAME
,B.NOTAXPRICE
,D.MEMO AS DBRESON
,H1.NAME AS DBZZ_PERSON
,H2.NAME AS DRZZ_PERSON
,H3.NAME AS ZXZR_PERSON
,P1.NAME AS CK_PERSON
,P2.NAME AS DB_PERSON
,C.DETAILCOUNT AS DBCOUNT
FROM WZ_SHEET_CK A
INNER JOIN WZ_SHEETCKDETAIL B ON A.ID=B.SHEETID
INNER JOIN WZ_SHEETDETAIL C ON B.SHEETDETAILID=C.ID --调拨明细
INNER JOIN WZ_SHEET D ON C.SHEETID=D.ID --调拨单
INNER JOIN BASE_ORGANIZATION E ON D.EXTENDINT1=E.ID--调出库存组织
INNER JOIN BASE_ORGANIZATION F ON D.EXTENDINT2=F.ID--调入库存组织
LEFT  JOIN WZ_WAITTASK G1 ON G1.SHEETID=D.ID AND G1.ROUTESTEPID=1568 --流程为调出方站长审批
LEFT  JOIN BASE_PERSON H1 ON G1.HANDINGMANID=H1.ID
LEFT  JOIN WZ_WAITTASK G2 ON G2.SHEETID=D.ID AND G2.ROUTESTEPID=1646 --流程为调入方站长审批
LEFT  JOIN BASE_PERSON H2 ON G2.HANDINGMANID=H2.ID
LEFT  JOIN WZ_WAITTASK G3 ON G3.SHEETID=D.ID AND G3.ROUTESTEPID=2653 --流程为中心副主任审批
LEFT  JOIN BASE_PERSON H3 ON G3.HANDINGMANID=H3.ID
LEFT  JOIN BASE_PERSON P1 ON A.CREATOR=P1.ID --调拨出库单制单人
LEFT  JOIN BASE_PERSON P2 ON D.CREATOR=P2.ID --调拨单制单人
WHERE A.TYPEID=772
;
--------------------------------------------------------
--  DDL for View V_PRINT_DBRKD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PRINT_DBRKD" ("ID", "DBDATE", "DC_ORG", "DR_ORG", "DB_CODE", "RK_CODE", "DBRESON", "DBZZ_PERSON", "DRZZ_PERSON", "ZXZR_PERSON", "RK_PERSON", "DB_PERSON", "HOUSECODE", "RK_DATE") AS 
  SELECT  
 B.ID
,A.CREATEDATE AS DBDATE
,C.NAME AS DC_ORG
,D.NAME AS DR_ORG
,A.CODE AS DB_CODE
,B.CODE AS RK_CODE
,A.MEMO AS DBRESON
,P1.NAME AS DBZZ_PERSON
,P2.NAME AS DRZZ_PERSON
,P3.NAME AS ZXZR_PERSON
,P4.NAME AS RK_PERSON
,P5.NAME AS DB_PERSON
,F.CODE AS HOUSECODE
,B.CREATEDATE AS RK_DATE
FROM WZ_SHEET A--调拨单
INNER JOIN WZ_SHEET_RK B ON B.EXTENDINT2=A.ID
INNER JOIN BASE_ORGANIZATION C ON A.EXTENDINT1=C.ID--调出库存组织
INNER JOIN BASE_ORGANIZATION D ON A.EXTENDINT2=D.ID--调入库存组织
INNER JOIN BASE_WAREHOUSE F ON F.ID=(SELECT STOREID FROM WZ_SHEETRKSUBDETAIL  WHERE 
DETAILID=(SELECT ID FROM WZ_SHEETRKDETAIL  WHERE SHEETID=B.ID AND ROWNUM=1) AND ROWNUM=1)

LEFT  JOIN WZ_WAITTASK W1 ON W1.SHEETID=A.ID AND W1.ROUTESTEPID=1568 --流程为调出方站长审批
LEFT  JOIN BASE_PERSON P1 ON W1.HANDINGMANID=P1.ID
LEFT  JOIN WZ_WAITTASK W2 ON W2.SHEETID=A.ID AND W2.ROUTESTEPID=1646 --流程为调入方站长审批
LEFT  JOIN BASE_PERSON P2 ON W2.HANDINGMANID=P2.ID
LEFT  JOIN WZ_WAITTASK W3 ON W3.SHEETID=A.ID AND W3.ROUTESTEPID=2653 --流程为中心副主任审批
LEFT  JOIN BASE_PERSON P3 ON W3.HANDINGMANID=P3.ID
LEFT  JOIN BASE_PERSON P4 ON B.CREATOR=P4.ID --调拨入库单制单人
LEFT  JOIN BASE_PERSON P5 ON A.CREATOR=P5.ID --调拨单制单人
WHERE B.TYPEID=790 AND A.STATUS=41 AND A.KINDID=506
;
--------------------------------------------------------
--  DDL for View V_PRINT_DBRKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PRINT_DBRKDETAILS" ("ID", "SHEETID", "SHEETDETAILID", "MATERIALCODE", "DESCRIPTION", "MATERIALBRAND", "DETAILUNITNAME", "NOTAXPRICE", "NOTAXSUM", "DETAILID", "STORELOCATIONCODE", "SUBDETAILCOUNT") AS 
  SELECT
 C.Id  
,C.SHEETID
,C.SHEETDETAILID

,C.MATERIALCODE
,C.DESCRIPTION
,C.MATERIALBRAND
,C.DETAILUNITNAME
,C.NOTAXPRICE
,C.NOTAXSUM
,D.DETAILID
,D.STORELOCATIONCODE
,D.SUBDETAILCOUNT
FROM WZ_SHEET A--调拨单
INNER JOIN WZ_SHEET_RK B ON B.EXTENDINT2=A.ID
INNER JOIN WZ_SHEETRKDETAIL C ON C.SHEETID=B.ID
INNER JOIN WZ_SHEETRKSUBDETAIL D ON D.DETAILID=C.ID
WHERE B.TYPEID=790 AND A.STATUS =41 AND A.KINDID=506
;
--------------------------------------------------------
--  DDL for View V_PRINT_JSD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PRINT_JSD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "ORDERNUM", "CONTRACTNUM", "PERSONNAME", "STATUSNAME", "PROVIDERDEPID", "DEPNAME", "EXTENDINT1") AS 
  SELECT
  A.ID,
  A.GUID,
  A.NAME,
  A.CODE,
  A.KINDID,
  A.TYPEID,
  A.DUTYID,
  A.DEPARTID,
  A.ROUTEID,
  A.ROUTE_STEPID,
  A.ROLEID,
  A.RELATESHEET,
  A.SUBMITMANID,
  A.SUBMITTIME,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  to_char( A.CREATEDATE,'yyyy-mm-dd hh24:mi:ss') as CREATEDATE ,
  A.UPDATOR,
  A.UPDATEDATE,
  A.ZTID,
  A.EXTENDSTRING1,
  A.EXTENDSTRING2,
  A.EXTENDSTRING3,
  A.EXTENDSTRING4,
  A.EXTENDSTRING5,
  A.ORDERNUM,
  case when instr(A.ORDERNUM,'_',1)>0
     then  substr(A.ORDERNUM,1,instr(A.ORDERNUM,'_',1)-1)
     else  A.ORDERNUM
     end  contractNUM,
  B.NAME AS PERSONNAME,
  C.NAME AS STATUSNAME,
  A.PROVIDERDEPID,
  D.NAME AS DEPNAME,
  A.EXTENDINT1
  FROM WZ_SHEET A
  LEFT JOIN BASE_PERSON B ON A.CREATOR=B.ID
  LEFT JOIN BASE_DICTIONARY C ON A.STATUS=C.ID
  LEFT JOIN BASE_ORGANIZATION D ON A.DEPARTID=D.ID
;
--------------------------------------------------------
--  DDL for View V_PRINT_JSDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PRINT_JSDETAILS" ("RN", "ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "STOREID", "PROVIDERDEPID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "MATERIALSPECIFICATION", "DESCRIPTION", "EXPIRATIONTIME", "STORELOCATIONCODE", "TAGCODE", "TAXPRICE", "TAXSUM", "STORELOCATIONID", "STORELOCATIONNAME", "PLANDEPARTID", "DETAILCOUNT", "DETAILUNITNAME", "OWNERTYPE", "OWNERNAME", "ISEQUIPMENT", "ENABLESN", "SNCODE", "BRAND", "THCOUNT") AS 
  SELECT
 ROW_NUMBER () OVER (PARTITION BY A.SHEETID ORDER BY A.ID )rn,
  A.ID,
  A.GUID,
  A.SHEETID,
  A.SHEETDETAILID,
  A.CATEGORYID,
  A.MATERIALID,
  A.MATERIALCODE,
  /*SUBSTR(A.MATERIALCODE,1,2) AS PARCODE,*/
  A.MATERIALNAME,
  A.MATERIALBRAND,
  A.MATERIALMODEL,
  A.STOREID,
  A.PROVIDERDEPID,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  A.UPDATOR,
  A.UPDATEDATE,
  A.ZTID,
  A.NOTAXPRICE,
  A.TAXRATE,
  A.NOTAXSUM,
  A.MATERIALSPECIFICATION,
  A.DESCRIPTION,
  A.EXPIRATIONTIME,
  A.STORELOCATIONCODE,
  A.TAGCODE,
  A.TAXPRICE,
  A.TAXSUM,
  A.STORELOCATIONID,
  A.STORELOCATIONNAME,
  A.PLANDEPARTID,
  A.DETAILCOUNT,
  A.DETAILUNITNAME,
  A.OWNERTYPE,
  C.NAME AS OWNERNAME,
  A.ISEQUIPMENT,
  A.ENABLESN,
  (select wm_concat(sub.SNCODE) from wz_sheetrkdetail detail left join wz_sheetrksubdetail sub  on detail.id=sub.detailid where detail.sheetdetailid=a.id) as SNCODE,
  '' as Brand,
  (SELECT NVL(SUM(L.COUNT),0) FROM WZ_RECEIVINGLOG L WHERE L.RELATIONGUID=A.GUID AND L.OPERATIONTYPE=2 AND L.ORDERID=A.SHEETDETAILID) AS THCOUNT
  FROM WZ_SHEETDETAIL A LEFT JOIN WZ_SHEET B ON A.SHEETID=B.ID
  LEFT JOIN BASE_DICTIONARY C ON A.OWNERTYPE=C.ID
;
--------------------------------------------------------
--  DDL for View V_PRINT_LLD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PRINT_LLD" ("ID", "GUID", "NAME", "CODE", "USEDDEPARTID", "OFFICENAME", "USEDMANID", "APPLYUNITNAME", "FUNDSSOURCE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "ORDERNUM", "PERSONNAME", "STATUSNAME", "PROVIDERDEPID", "USEUNITNAME", "DEPNAME", "EXTENDINT1", "OFFICESID", "APPLYDEPARTID", "FUNDSNAME", "CLPERSON", "BMPERSON", "ZNPERSON", "FGPERSON") AS 
  SELECT 
  A.ID,
  A.GUID,
  A.NAME,
  A.CODE,
  A.UsedDepartId,
  E.NAME AS OFFICENAME,
  A.USEDMANID,
  F.NAME AS APPLYUNITNAME,
  A.FUNDSSOURCE,
  A.KINDID,
  A.TYPEID,
  A.DUTYID,
  A.DEPARTID,
  A.ROUTEID,
  A.ROUTE_STEPID,
  A.ROLEID,
  A.RELATESHEET,
  A.SUBMITMANID,
  A.SUBMITTIME,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  A.UPDATOR,
  A.UPDATEDATE,
  A.ZTID,
  A.EXTENDSTRING1,
  A.EXTENDSTRING2,
  A.EXTENDSTRING3,
  A.EXTENDSTRING4,
  A.ORDERNUM,
  B.NAME AS PERSONNAME,
  C.NAME AS STATUSNAME,
  A.PROVIDERDEPID,
  G.NAME AS USEUNITNAME,
  D.NAME AS DEPNAME,
  A.EXTENDINT1,
  A.OFFICESID,
  A.APPLYDEPARTID,
  H.NAME AS FUNDSNAME,
  A.NAME AS CLPERSON,--材料员
  CASE WHEN P1.NAME IS NULL THEN  P2.NAME END AS BMPERSON,--部门领导
  P2.NAME AS ZNPERSON,--职能科室
  P3.NAME AS FGPERSON--分管矿长
  FROM WZ_SHEET A
  LEFT JOIN BASE_PERSON B ON A.CREATOR = B.ID
  LEFT JOIN BASE_DICTIONARY C ON A.STATUS = C.ID
  LEFT JOIN BASE_ORGANIZATION D ON A.ZTID = D.ID
  LEFT JOIN BASE_USEDEP E ON A.OFFICESID = E.ID
  LEFT JOIN BASE_APPLYDEP F ON A.Applydepartid = F.ID
  LEFT JOIN Base_Usedep G on A.Useddepartid = G.ID
  LEFT JOIN BASE_DICTIONARY H ON A.FUNDSSOURCE=H.ID
  LEFT JOIN BASE_PERSON AA ON A.CREATOR=AA.ID --领料单创建人
  LEFT JOIN WZ_WAITTASK W1 ON W1.SHEETID=A.ID AND W1.ROUTESTEPID=2419--流程为使用单位负责人审批
  LEFT JOIN BASE_PERSON P1 ON W1.HANDINGMANID=P1.ID
  LEFT JOIN WZ_WAITTASK W2 ON W2.SHEETID=A.ID AND W2.ROUTESTEPID=2964--流程为分管科室审批
  LEFT JOIN BASE_PERSON P2 ON W2.HANDINGMANID=P2.ID
  LEFT JOIN WZ_WAITTASK W3 ON W3.SHEETID=A.ID AND W3.ROUTESTEPID=2965--分管矿领导审批
  LEFT JOIN BASE_PERSON P3 ON W3.HANDINGMANID=P3.ID
  WHERE 1 = 1 AND A.KINDID = 650
;
--------------------------------------------------------
--  DDL for View V_PRINT_LLDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PRINT_LLDETAILS" ("ID", "SHEETID", "SNCODE", "MATERIALCODE", "DETAILCOUNT", "EXTENDSTRING2", "DETAILUNITNAME", "DESCRIPTION") AS 
  SELECT
 A.ID
,A.SHEETID
,A.SNCODE
,A.MATERIALCODE
,A.DETAILCOUNT
,A.EXTENDSTRING2
,A.DETAILUNITNAME
,A.DESCRIPTION

FROM WZ_SHEETDETAIL A
;
--------------------------------------------------------
--  DDL for View V_PRINT_TKD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PRINT_TKD" ("ID", "CODE", "ORG_NAME", "USE_NAME", "CREATEDATE", "FUNDS_NAME", "STORE_CODE", "USE", "BM_PERSON", "KS_PERSON", "KZ_PERSON", "BG_PERSON", "CL_PERSON") AS 
  SELECT 
 A.ID
,A.CODE
,B.NAME AS ORG_NAME
,D.NAME AS USE_NAME
,A.CREATEDATE
,E.NAME AS FUNDS_NAME
,F.CODE AS STORE_CODE
,C.EXTENDSTRING1 AS USE
,P1.NAME AS BM_PERSON
,P2.NAME AS KS_PERSON
,P3.NAME AS KZ_PERSON
,P4.NAME AS BG_PERSON
,P5.NAME AS CL_PERSON
FROM WZ_SHEET A 
INNER JOIN BASE_ORGANIZATION B ON A.ZTID=B.ID
LEFT JOIN WZ_SHEET_CK C ON A.EXTENDINT1=C.ID
INNER JOIN BASE_USEDEP D ON A.USEDDEPARTID=D.ID
INNER JOIN BASE_DICTIONARY E ON A.FUNDSSOURCE=E.ID
INNER JOIN BASE_WAREHOUSE F ON F.ID=(SELECT STOREID FROM WZ_SHEETDETAIL WHERE SHEETID=A.ID AND ROWNUM=1)
LEFT  JOIN WZ_WAITTASK W1 ON W1.SHEETID=A.ID AND W1.ROUTESTEPID=1009 --流程为使用单位负责人审批
LEFT  JOIN BASE_PERSON P1 ON W1.HANDINGMANID=P1.ID
LEFT  JOIN WZ_WAITTASK W2 ON W2.SHEETID=A.ID AND W2.ROUTESTEPID=3533 --流程为分管科室审批
LEFT  JOIN BASE_PERSON P2 ON W2.HANDINGMANID=P2.ID
LEFT  JOIN WZ_WAITTASK W3 ON W3.SHEETID=A.ID AND W3.ROUTESTEPID=3534 --流程为分管矿领导审批
LEFT  JOIN BASE_PERSON P3 ON W3.HANDINGMANID=P3.ID
LEFT  JOIN WZ_WAITTASK W4 ON W4.SHEETID=A.ID AND W4.ROUTESTEPID=3608 --流程为库管员入库
LEFT  JOIN BASE_PERSON P4 ON W4.HANDINGMANID=P4.ID
LEFT  JOIN BASE_PERSON P5 ON A.CREATOR=P5.ID --退库单制单人
WHERE A.KINDID=315 AND A.STATUS=41
;
--------------------------------------------------------
--  DDL for View V_PRINT_TKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PRINT_TKDETAILS" ("ID", "SHEETID", "SHEETDETAILID", "PLANCODE", "USE_PLACE", "STORELOCATIONCODE", "MATERIALCODE", "DESCRIPTION", "MATERIALBRAND", "MATERIALMODEL", "DETAILUNITNAME", "DETAILCOUNT", "NOTAXSUM", "NOTAXPRICE", "USE") AS 
  SELECT 
 A.ID
,A.SHEETID
,A.SHEETDETAILID
,B.EXTENDSTRING1 AS PLANCODE--计划编号	
,C.EXTENDSTRING2 AS USE_PLACE
,A.STORELOCATIONCODE
,A.MATERIALCODE
,A.DESCRIPTION
,A.MATERIALBRAND
,A.MATERIALMODEL
,A.DETAILUNITNAME
,A.DETAILCOUNT
,A.NOTAXSUM
,A.NOTAXPRICE
,D.EXTENDSTRING1 AS USE
FROM WZ_SHEETDETAIL A
INNER JOIN WZ_SHEET AA ON A.SHEETID=AA.ID AND AA.KINDID=315 AND AA.STATUS=41
LEFT JOIN WZ_SHEETCKDETAIL B ON A.SHEETDETAILID=B.ID
LEFT JOIN WZ_SHEETDETAIL C ON B.EXTENDINT1=C.ID --领料单
LEFT JOIN WZ_SHEET_CK  D ON B.SHEETID=D.ID
;
--------------------------------------------------------
--  DDL for View V_PROCKDETAIL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PROCKDETAIL" ("ID", "DETAILID", "TAGCODE", "SUBDETAILCOUNT", "STOREID", "STORELOCATIONID", "STORELOCATIONNAME", "STORELOCATIONCODE", "EXTENDINT1", "SHEETID") AS 
  SELECT
 A.ID,
 A.DETAILID,
 A.TAGCODE,
 A.SUBDETAILCOUNT,
 A.STOREID,
 A.STORELOCATIONID,
 A.STORELOCATIONNAME,
 A.STORELOCATIONCODE,
 A.EXTENDINT1,
 B.SHEETID
FROM WZ_SHEETSUBDETAIL A LEFT JOIN WZ_SHEETDETAIL B ON A.DETAILID=B.ID
WHERE A.EXTENDINT2=0
;
--------------------------------------------------------
--  DDL for View V_PRORKDETAIL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PRORKDETAIL" ("SHEETID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DETAILUNIT", "CURRENCYUNIT", "PROVIDERDEPID", "STATUS", "MEMO", "NOTAXPRICE", "TAXPRICE", "TAXRATE", "MATERIALSPECIFICATION", "DESCRIPTION", "ORDERNUM", "RECEIVENUM", "TAGCODE", "PLANDEPARTID", "CATEGORYID", "DETAILPRICE", "DETAILSUM", "OWNERDEP", "ISEQUIPMENT", "OWNERTYPE", "ENABLESN", "DETAILUNITNAME", "SNCODE", "ID", "SUBDETAILCOUNT", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "DRZTID") AS 
  SELECT
  A.SHEETID,
  B.MATERIALID,
  B.MATERIALCODE,
  B.MATERIALNAME,
  B.MATERIALBRAND,
  B.MATERIALMODEL,
  B.DETAILUNIT,
  B.CURRENCYUNIT,
  B.PROVIDERDEPID,
  B.STATUS,
  B.MEMO,
  B.NOTAXPRICE,
  B.TAXPRICE,
  B.TAXRATE,
  B.MATERIALSPECIFICATION,
  B.DESCRIPTION,
  B.ORDERNUM,
  B.RECEIVENUM,
  B.TAGCODE,
  B.PLANDEPARTID,
  B.CATEGORYID,
  B.DETAILPRICE,
  B.DETAILSUM,
  B.OWNERDEP,
  B.ISEQUIPMENT,
  B.OWNERTYPE,
  B.ENABLESN,
  B.DETAILUNITNAME,
  B.SNCODE,
  SUBRK.ID,
  SUBRK.SUBDETAILCOUNT,
  SUBRK.STOREID,
  SUBRK.STORELOCATIONID,
  SUBRK.STORELOCATIONCODE,
  SUBRK.STORELOCATIONNAME ,
  C.EXTENDINT2 AS DRZTID


FROM WZ_SHEETSUBDETAIL SUBRK LEFT JOIN WZ_SHEETSUBDETAIL SUBCK ON SUBRK.DETAILID=SUBCK.DETAILID
LEFT JOIN WZ_SHEETDETAIL A ON A.ID=SUBRK.DETAILID
LEFT JOIN WZ_SHEET C ON C.ID=A.SHEETID
LEFT JOIN WZ_STOCK B ON B.ID=SUBCK.EXTENDINT1 WHERE SUBRK.EXTENDINT2=1 AND SUBCK.EXTENDINT2=0
;
--------------------------------------------------------
--  DDL for View V_PURCHASEPLAN
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_PURCHASEPLAN" ("ID", "PLANCODE", "CREATEDATE", "NEEDDATE", "APPLYDEPID", "USEDEPID", "MATERIALCODE", "MATERIALDES", "PURCHASETYPE", "PLANTYPE", "SOURCETYPE", "UNIT", "COUNT", "PRICE", "BASEUNIT", "BASECOUNT", "BASEPRICE", "PURCHASEMODEL", "MANUFACTURER", "UPDATEDATE", "ERPID", "ORDERTYPE", "CONSIGNMENT", "ZTID", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDINT4", "EXTENDINT5", "EXTENDINT6", "EXTENDFLOAT1", "EXTENDFLOAT2", "EXTENDFLOAT3", "EXTENDFLOAT4", "EXTENDFLOAT5", "EXTENDFLOAT6", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "EXTENDSTRING6", "EXTENDSTRING7", "EXTENDSTRING8", "USEDEPNAME", "APPLYDEPNAME", "ERPDETAILID", "STATUS") AS 
  SELECT p.ID,p.PLANCODE,p.CREATEDATE,
  case when to_char(p.NEEDDATE,'yyyymmdd')='00010101' Then null
    else p.NEEDDATE
  END as  NEEDDATE
  ,p.APPLYDEPID,p.USEDEPID,m.code as MATERIALCODE,p.MATERIALDES,p.PURCHASETYPE,p.PLANTYPE,p.SOURCETYPE,m.UNIT,p.COUNT,p.PRICE,p.BASEUNIT,p.BASECOUNT,p.BASEPRICE,p.PURCHASEMODEL,p.MANUFACTURER,p.UPDATEDATE,p.ERPID,p.ORDERTYPE,p.CONSIGNMENT,p.ZTID,p.EXTENDINT1,p.EXTENDINT2,p.EXTENDINT3,p.EXTENDINT4,p.EXTENDINT5,p.EXTENDINT6,p.EXTENDFLOAT1,p.EXTENDFLOAT2,p.EXTENDFLOAT3,p.EXTENDFLOAT4,p.EXTENDFLOAT5,p.EXTENDFLOAT6,p.EXTENDSTRING1,p.EXTENDSTRING2,p.EXTENDSTRING3,p.EXTENDSTRING4,p.EXTENDSTRING5,p.EXTENDSTRING6,p.EXTENDSTRING7,p.EXTENDSTRING8,
  u.name as USEDEPNAME, a.name as APPLYDEPNAME ,
  p.erpdetailid, case when  p.ExtendInt1=1 then '正常' else '取消' END as status

from WZ_PURCHASEPLAN p
LEFT OUTER join base_usedep u on p.usedepid=u.id
LEFT OUTER join base_organization a on p.applydepid= a.id
LEFT OUTER join base_material m on m.code=p.MATERIALCODE and m.ztid=p.applydepid
;
--------------------------------------------------------
--  DDL for View V_QCJZDETAIL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_QCJZDETAIL" ("ID", "GUID", "TAGCODE", "SHEETID", "SHEETDETAILID", "MATERIALID", "CATEGORYID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "DESCRIPTION", "STORECOUNT", "NOTAXPRICE", "TAXPRICE", "TAXRATE", "ORDERNUM", "RECEIVENUM", "DETAILUNIT", "CURRENCYUNIT", "STOREID", "PROVIDERDEPID", "STORELOCATIONCODE", "STORELOCATIONNAME", "STORELOCATIONID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "EXPIRATIONTIME", "ZTID", "STORENAME", "STORECODE", "PERSONNAME", "FLNAME", "SUPPLIER", "PLANNINGDEPARTMENT", "UNITNAME") AS 
  SELECT
A.ID ,                        --主键ID
A.GUID,                      --guid
A.TAGCODE,                   --标签打印编码
A.SHEETID,                   --单据id
A.SHEETDETAILID,             --明细id
A.MATERIALID,                --物料id
A.CATEGORYID,                --物料类型id
A.MATERIALCODE,              --物料编码
A.MATERIALNAME,              --物料名称
A.MATERIALBRAND,             --物料品牌
A.MATERIALMODEL,             --物料型号
A.MATERIALSPECIFICATION,     --物料规格
A.DESCRIPTION,               --物料描述
A.STORECOUNT,                --库存数量
A.NOTAXPRICE,                --不含税单价
A.TAXPRICE,                  --含税单价
A.TAXRATE,                   --税率
A.ORDERNUM,                  --采购订单编码
A.RECEIVENUM,                --接收单号
A.DETAILUNIT,                --单位
A.CURRENCYUNIT,              --货币
A.STOREID,                   --库房ID
A.PROVIDERDEPID,             --供应商ID
A.STORELOCATIONCODE,         --库位编码
A.STORELOCATIONNAME,         --库位名称
A.STORELOCATIONID,           --库位id
A.STATUS,                    --状态
A.MEMO,                      --备注
A.CREATOR,                   --添加人
A.CREATEDATE,                --添加日期
CASE WHEN TO_CHAR(A.EXPIRATIONTIME,'yyyy-MM-dd')='1901-01-01' THEN NULL
     WHEN TO_CHAR(A.EXPIRATIONTIME,'yyyy-MM-dd')='0001-01-01' THEN NULL
     ELSE A.EXPIRATIONTIME
     END EXPIRATIONTIME,                   --质保到期时间        
A.ZTID,                      --账套
B.NAME AS STORENAME,         --库房名称
B.CODE AS STORECODE,         --库房编码
C.NAME AS PERSONNAME,        --添加人姓名
D.NAME AS FLNAME,            --物料分类名称
E.NAME AS SUPPLIER,           --供应商名称
F.NAME AS PLANNINGDEPARTMENT, --计划部门名称
A.DETAILUNITNAME AS UNITNAME    --单位名称
FROM WZ_STOCK A LEFT JOIN BASE_WAREHOUSE B  ON A.STOREID=B.ID
LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID
LEFT JOIN BASE_SPAREPARTSCATE D ON A.CATEGORYID=D.ID
LEFT JOIN BASE_PROVIDER E ON A.PROVIDERDEPID=E.ID
LEFT JOIN BASE_ORGANIZATION F ON A.PLANDEPARTID=F.ID
WHERE A.PURCHASETYPE=0
;
--------------------------------------------------------
--  DDL for View V_RKCX
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_RKCX" ("ID", "GUID", "TAGCODE", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "DESCRIPTION", "SUBDETAILCOUNT", "DETAILUNIT", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "TAXPRICE", "TAXSUM", "CODE", "ROUTEID", "ROUTE_STEPID", "SHEETSTATUS", "SUBMITTIME", "HOUSENAME", "ZTID", "URL") AS 
  SELECT
 A.ID,
 A.GUID,
 A.TAGCODE,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.MATERIALSPECIFICATION,
 A.DESCRIPTION,
 B.SUBDETAILCOUNT,
 A.DETAILUNIT,
 B.STOREID,
 B.STORELOCATIONID,
 B.STORELOCATIONCODE,
 B.STORELOCATIONNAME,
 A.NOTAXPRICE,
 A.TAXRATE,
 A.NOTAXSUM,
 A.TAXPRICE,
 A.TAXSUM,
 C.CODE,
 C.ROUTEID,
 C.ROUTE_STEPID,
 C.STATUS AS SHEETSTATUS ,
 C.SUBMITTIME,
 D.NAME AS HOUSENAME,
 C.ZTID,
 c.url
 FROM WZ_SHEETRKDETAIL A LEFT JOIN WZ_SHEETRKSUBDETAIL B ON A.ID=B.DETAILID
 LEFT JOIN WZ_SHEET_RK C ON A.SHEETID=C.ID
 LEFT JOIN BASE_WAREHOUSE D ON B.STOREID=D.ID WHERE C.STATUS=41 AND C.KINDID=35
;
--------------------------------------------------------
--  DDL for View V_RKD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_RKD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "PROVIDERDEPID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ORDERNUM", "RECEIVENUM", "STATUSNAME", "PERSONNAME", "DEPNAME", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "ZTID", "EXTENDINT1", "EXTENDINT2", "URL", "DBNUM", "TYPENAME", "EXTENDSTRING6") AS 
  SELECT
  A.ID,
  A.GUID,
  A.NAME,
  A.CODE,
  A.KINDID,
  A.TYPEID,
  A.DUTYID,
  A.DEPARTID,
  A.PROVIDERDEPID,
  A.ROUTEID,
  A.ROUTE_STEPID,
  A.ROLEID,
  A.RELATESHEET,
  A.SUBMITMANID,
  A.SUBMITTIME,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  A.ORDERNUM,
  A.RECEIVENUM,
  B.NAME AS STATUSNAME,
  C.NAME AS PERSONNAME,
  D.NAME AS DEPNAME,
  A.EXTENDSTRING1,
  A.EXTENDSTRING2,
  A.EXTENDSTRING3,
  A.EXTENDSTRING4,
  A.EXTENDSTRING5,
  A.ZTID,
  A.EXTENDINT1,
  A.EXTENDINT2,
  A.URL,
  E.CODE AS DBNUM,
F.NAME as TYPENAME,
A.EXTENDSTRING6
 FROM WZ_SHEET_RK A
  LEFT JOIN BASE_DICTIONARY B ON A.STATUS=B.ID
  LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID
  LEFT JOIN BASE_ORGANIZATION D ON A.DEPARTID=D.ID
  LEFT JOIn WZ_SHEET E ON A.EXTENDINT2=E.ID AND E.KINDID=506
  LEFT JOIN BASE_DICTIONARY F ON A.TYPEID=F.ID
  WHERE A.KINDID=35
;
--------------------------------------------------------
--  DDL for View V_RKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_RKDETAILS" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "CREATOR", "CREATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "DESCRIPTION", "TAXPRICE", "TAXSUM", "ISEQUIPMENT", "OWNERTYPE", "ENABLESN", "SNCODE", "DETAILUNITNAME", "EXTENDSTRING1", "DETAILCOUNT", "PROVIDERNAME", "SUBTOTALCOUNT", "JSTYPE", "EXTENDFLOAT1", "LOCATIONNAME", "SUMCOUNT", "STOREID") AS 
  SELECT A.ID,
       A.GUID,
       A.SHEETID,
       A.SHEETDETAILID,
       A.CATEGORYID,
       A.MATERIALID,
       A.MATERIALCODE,
       A.MATERIALNAME,
       A.MATERIALBRAND,
       A.MATERIALMODEL,
       A.MATERIALSPECIFICATION,
       A.CREATOR,
       A.CREATEDATE,
       A.ZTID,
       A.NOTAXPRICE,
       A.TAXRATE,
       A.NOTAXSUM,
       A.DESCRIPTION,
       A.TAXPRICE,
       A.TAXSUM,
       A.ISEQUIPMENT,
       A.OWNERTYPE,
       A.ENABLESN,
       A.SNCODE,
       A.DETAILUNITNAME,
       A.EXTENDSTRING1,
       A.DETAILCOUNT,
       B.EXTENDSTRING1 AS PROVIDERNAME,
       (SELECT SUM(E.SUBDETAILCOUNT) FROM WZ_SHEETRKSUBDETAIL E WHERE E.DETAILID=A.ID) AS SUBTOTALCOUNT,
       C.NAME AS JSTYPE,
       A.EXTENDFLOAT1,
       (select wm_concat(to_char('[' || D.STORELOCATIONNAME) || ']') from wz_sheetrksubdetail D where D.detailid=A.Id) AS LOCATIONNAME,
       (SELECT NVL( SUM(Z.SUBDETAILCOUNT) ,0)AS Expr1 FROM WZ_SHEETRKSUBDETAIL Z WHERE (Z.DETAILID=A.ID)) AS SUMCOUNT,
       wh.id as storeID
   FROM WZ_SHEETRKDETAIL A
  LEFT JOIN WZ_SHEET_RK B ON A.SHEETID = B.ID
  LEFT JOIN BASE_DICTIONARY C ON A.OWNERTYPE=C.ID
  left join base_warehouse wh on A.EXTENDSTRING1=wh.code and A.ZTID=wh.ztid
  WHERE B.KINDID=35
;
--------------------------------------------------------
--  DDL for View V_RKDETAILSFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_RKDETAILSFORAPI" ("ID", "SUBDETAILCOUNT", "STOREID", "STORELOCATIONCODE", "STORELOCATIONNAME", "STORELOCATIONID", "UNITNAME", "SNCODE", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "DESCRIPTION", "ENABLESN", "OWNERTYPE", "ISEQUIPMENT", "EXTENDSTRING1", "SHEETCODE", "HOUSENAME") AS 
  SELECT
  A.ID,
  A.SUBDETAILCOUNT,
  A.STOREID,
  A.STORELOCATIONCODE,
  A.STORELOCATIONNAME,
  A.STORELOCATIONID,
  A.UNITNAME,
  A.SNCODE,
  B.MATERIALID,
  B.MATERIALCODE,
  B.MATERIALNAME,
  B.DESCRIPTION,
  B.ENABLESN,
  B.OWNERTYPE,
  B.ISEQUIPMENT,
  C.EXTENDSTRING1,
  C.CODE AS SHEETCODE,
  D.NAME AS HOUSENAME

FROM WZ_SHEETRKSUBDETAIL A LEFT JOIN WZ_SHEETRKDETAIL B ON A.DETAILID=B.ID
LEFT JOIN WZ_SHEET_RK C ON   B.SHEETID=C.ID
LEFT JOIN BASE_WAREHOUSE D ON A.STOREID=D.ID
WHERE C.KINDID=35
;
--------------------------------------------------------
--  DDL for View V_RKDETAILSPRINT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_RKDETAILSPRINT" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "CREATOR", "CREATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "DESCRIPTION", "TAXPRICE", "TAXSUM", "ISEQUIPMENT", "OWNERTYPE", "ENABLESN", "SNCODE", "DETAILUNITNAME", "EXTENDSTRING1", "DETAILCOUNT", "JSTYPE", "JSCODE", "EXTENDFLOAT1", "HOUSENAME", "STORELOCATIONCODE", "STORELOCATIONNAME", "STORELOCATIONID", "SUMCOUNT") AS 
  SELECT A.ID,
       A.GUID,
       A.SHEETID,
       A.SHEETDETAILID,
       A.CATEGORYID,
       A.MATERIALID,
       A.MATERIALCODE,
       A.MATERIALNAME,
       A.MATERIALBRAND,
       A.MATERIALMODEL,
       A.MATERIALSPECIFICATION,
       A.CREATOR,
       A.CREATEDATE,
       A.ZTID,
       A.NOTAXPRICE,
       A.TAXRATE,
       A.NOTAXSUM,
       A.DESCRIPTION,
       A.TAXPRICE,
       A.TAXSUM,
       A.ISEQUIPMENT,
       A.OWNERTYPE,
       A.ENABLESN,
       A.SNCODE,
       A.DETAILUNITNAME,
       A.EXTENDSTRING1,
       A.DETAILCOUNT,
       C.NAME AS JSTYPE,
       C.CODE AS JSCODE,
       A.EXTENDFLOAT1,
       E.NAME AS HOUSENAME,
       D.STORELOCATIONCODE,
       D.STORELOCATIONNAME,
       D.STORELOCATIONID,
       (SELECT NVL( SUM(Z.SUBDETAILCOUNT) ,0)AS Expr1 FROM WZ_SHEETRKSUBDETAIL Z WHERE (Z.DETAILID=A.ID)) AS SUMCOUNT
  FROM WZ_SHEETRKDETAIL A
  LEFT JOIN WZ_SHEET_RK B ON A.SHEETID = B.ID
  LEFT JOIN BASE_DICTIONARY C ON A.OWNERTYPE=C.ID
  LEFT JOIN WZ_SHEETRKSUBDETAIL D ON A.ID=D.DETAILID
  LEFT JOIN BASE_WAREHOUSE E ON E.ID=D.STOREID WHERE B.KINDID=35
;
--------------------------------------------------------
--  DDL for View V_RKDMORE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_RKDMORE" ("ID", "CODE", "ORDERNUM", "EXTENDSTRING1", "EXTENDSTRING3", "CREATOR", "SUBMITTIME", "EXTENDSTRING2", "EXTENDSTRING5", "PERSONNAME", "ZTID") AS 
  SELECT
 A.ID,
 A.CODE,
 A.ORDERNUM,
 A.EXTENDSTRING1,
 A.EXTENDSTRING3,
 A.CREATOR,
 A.SUBMITTIME,
 A.EXTENDSTRING2,
 A.EXTENDSTRING5,
 B.NAME AS PERSONNAME,
 A.ZTID
 FROM WZ_SHEET_RK A
 LEFT JOIN BASE_PERSON B ON A.CREATOR=B.ID WHERE A.KINDID=35 AND A.STATUS=41
;
--------------------------------------------------------
--  DDL for View V_RKSUBDETAIL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_RKSUBDETAIL" ("ID", "GUID", "DETAILID", "TAGCODE", "SUBDETAILCOUNT", "UNIT", "STOREID", "STORELOCATIONID", "STORELOCATIONNAME", "STORELOCATIONCODE", "ADDTIME", "SNCODE", "MATERIALNAME", "UNITNAME", "HOUSENAME") AS 
  select
    a.id,
    a.guid,
    a.detailid,
    a.tagcode,
    a.subdetailcount,
    a.unit,
    a.storeid,
    a.storelocationid,
    a.storelocationname,
    a.storelocationcode,
    a.addtime,
    a.sncode,
    b.materialname,
    a.unitname,
    d.name as housename
  from  wz_sheetrksubdetail a left join wz_sheetrkdetail b on a.detailid=b.id
  /*left join base_dictionary c on a.unit=c.id*/
  left join base_warehouse d on a.storeid=d.id
;
--------------------------------------------------------
--  DDL for View V_ROLEMENUQ
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ROLEMENUQ" ("MENUNAME", "ROLECODE", "MENUCODE") AS 
  SELECT bm.menuname,rm.rolecode,rm.menucode FROM Base_RoleMenu rm inner join Base_Menu bm on rm.menucode=bm.menucode
;
--------------------------------------------------------
--  DDL for View V_ROLEPERSONS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ROLEPERSONS" ("ID", "GUID", "USERTYPE", "CODE", "SPELL", "NAME", "SEX", "EMAIL", "PHONE", "QQ", "PASSWORD", "SECRETKEY", "DEPARTID", "COMPANYID", "STATUS", "SORT", "MEMO", "ISAUDIT", "AUDITBY", "AUDITTIME", "ISSINGLELOGIN", "ISONLINE", "LOGINCOUNT", "LOGINTIME", "LOGINIP", "LOGINCITY", "LASTCHANGEPASSWORD", "CREATOR", "CREATEDATE", "UPDATER", "UPDATEDATE", "ZTID", "DEPNAME", "ROLECODE", "ROLENAME") AS 
  select person.id,
       person.guid,
       person.usertype,
       person.code,
       person.spell,
       person.name,
       person.sex,
       person.email,
       person.phone,
       person.qq,
       person.password,
       person.secretkey,
       person.departid,
       person.companyid,
       person.status,
       person.sort,
       person.memo,
       person.isaudit,
       person.auditby,
       person.audittime,
       person.issinglelogin,
       person.isonline,
       person.logincount,
       person.logintime,
       person.loginip,
       person.logincity,
       person.lastchangepassword,
       person.creator,
       person.createdate,
       person.updater,
       person.updatedate,
       person.ztid ,
       org.name as depname,
       userrole.rolecode as rolecode,
       brole.rolename as rolename

        FROM Base_Person person
        left join Base_Organization  org on person.DepartID = org.ID
        left  join Base_UserRole userrole on userrole.UserId=person.ID
        left  join Base_Role brole on brole.rolecode=userrole.rolecode
        /*left join Base_Dictionary  ditc on ditc.id=person.属性名*/
;
--------------------------------------------------------
--  DDL for View V_ROLE_PERSON
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ROLE_PERSON" ("ID", "GUID", "USERTYPE", "CODE", "SPELL", "NAME", "SEX", "EMAIL", "PHONE", "QQ", "PASSWORD", "SECRETKEY", "DEPARTID", "COMPANYID", "STATUS", "SORT", "MEMO", "ISAUDIT", "AUDITBY", "AUDITTIME", "ISSINGLELOGIN", "ISONLINE", "LOGINCOUNT", "LOGINTIME", "LOGINIP", "LOGINCITY", "LASTCHANGEPASSWORD", "CREATOR", "CREATEDATE", "UPDATER", "UPDATEDATE", "ZTID", "ROLECODE", "ROLENAME", "OFFICESID") AS 
  select
      person.id,
      person.guid,
      person.usertype,
      person.code,
      person.spell,
      person.name,
      person.sex,
      person.email,
      person.phone,
      person.qq,
      person.password,
      person.secretkey,
      person.departid,
      person.companyid,
      person.status,
      person.sort,
      person.memo,
      person.isaudit,
      person.auditby,
      person.audittime,
      person.issinglelogin,
      person.isonline,
      person.logincount,
      person.logintime,
      person.loginip,
      person.logincity,
      person.lastchangepassword,
      person.creator,
      person.createdate,
      person.updater,
      person.updatedate,
      person.ztid ,
      brole.Rolecode,
      brole.rolename as rolename,
      person.officesid
from Base_Person person
left join Base_Userrole userrole on userrole.userid=person.id
left join Base_Role brole on brole.rolecode=userrole.rolecode
;
--------------------------------------------------------
--  DDL for View V_ROUTESTEP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ROUTESTEP" ("ROLECODE", "ROLENAME", "SHEETSTATUSID", "SHEETSTATUSNAME", "PERSONID", "PERSONAME", "ROUTEID", "ROUTENAME", "ROUTECODE", "PREVSTEPID", "PREVSTEPNAME", "NEXTSTEPID", "NEXTSTEPNAME", "ID", "GUID", "CODE", "NAME", "PREVID", "NEXTID", "ROLEID", "ROUTETYPE", "INPUTCONDITION", "INPUTPROCEDURE", "OPERPROCEDURE", "OPERBUTTONS", "OPERFORMFIEDLS", "DEVICESTATUS", "FLAG1", "FLAG2", "STATUS", "ORDERNUM", "REMARK", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDINT4", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "SHEETSTATUS") AS 
  select
       R.ROLECODE,
       r.rolename as ROLENAME,
       sheetstu.Id AS SHEETSTATUSID,
       sheetstu.name as SHEETSTATUSNAME,
       p.id as PERSONID,
       p.name as PERSONAME,
       Base_Dictionary_1.ID AS ROUTEID,
       Base_Dictionary_1.Name AS ROUTENAME,
       Base_Dictionary_1.Code as ROUTECODE,
       prev.id as PREVSTEPID,
       prev.name as PREVSTEPNAME,
       nexts.id as NEXTSTEPID,
       nexts.name NEXTSTEPNAME,
       s."ID",
       s."GUID",
       s."CODE",
       s."NAME",
      -- s."ROUTEID",
       s."PREVID",
       s."NEXTID",
       s."ROLEID",
       s."ROUTETYPE",
       s."INPUTCONDITION",
       s."INPUTPROCEDURE",
       s."OPERPROCEDURE",
       s."OPERBUTTONS",
       s."OPERFORMFIEDLS",
       s."DEVICESTATUS",
       s."FLAG1",
       s."FLAG2",
       s."STATUS",
       s."ORDERNUM",
       s."REMARK",
       s."CREATOR",
       s."CREATEDATE",
       s."UPDATOR",
       s."UPDATEDATE",
       s."ZTID",
       s."EXTENDINT1",
       s."EXTENDINT2",
       s."EXTENDINT3",
       s."EXTENDINT4",
       s."EXTENDSTRING1",
       s."EXTENDSTRING2",
       s."EXTENDSTRING3",
       s."EXTENDSTRING4",
       s."EXTENDSTRING5",
       s."SHEETSTATUS"
     -- (CASE WHEN Base_Routestep.Extendint1 IS NULL THEN 0 ELSE Base_Routestep.Extendint1 END) AS AuditDepartID
      --(CASE WHEN Base_Routestep.Extendint2 IS NULL THEN 0 ELSE Base_Routestep.Extendint2 END) AS PERSONTYPE
  from Base_Routestep s
  left join Base_Person p on s.personid = p.ID
  left outer join Base_Role r on s.roleid = r.rolecode
 inner join Base_Dictionary Base_Dictionary_1 on Base_Dictionary_1.id = s.Routeid
 inner join Base_Dictionary sheetstu on sheetstu.id = s.sheetstatus
  left outer join Base_Routestep prev on prev.id = s.previd
  left outer join Base_Routestep nexts on nexts.id = s.nextid
;
--------------------------------------------------------
--  DDL for View V_SCOPEHOUSE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SCOPEHOUSE" ("BID", "PERSONID", "SCOPETYPE", "ID", "CODE", "NAME") AS 
  select
a.id as bid,
a.personid,
a.scopetype,
a.scopeid as id,
b.code,
b.name
from base_person_scope a
left join base_warehouse b on a.scopeid=b.id
;
--------------------------------------------------------
--  DDL for View V_SCOPESPARE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SCOPESPARE" ("BID", "PERSONID", "SCOPETYPE", "ID", "CODE", "NAME") AS 
  select a.id as bid,a.personid,a.scopetype,a.scopeid as id,b.code,b.name
from base_person_scope a
left join BASE_SPAREPARTSCATE b on a.scopeid=b.id
;
--------------------------------------------------------
--  DDL for View V_SHEET
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SHEET" ("ID", "GUID", "CODE", "NAME", "RELATESHEET", "DUTYID", "TYPEID", "DEPARTID", "PROVIDERDEPID", "SUBMITMANID", "SUBMITTIME", "STATUS", "ROUTEID", "REPORTNAME", "PREFIX", "KINDID", "DEPARTNAME", "DEPARTLEVELCODE", "DEPARTCODE", "CREATOR", "CURRENTROUTEID", "DEPARTLEVELCOUNT") AS 
  SELECT WZ_SHEET.ID,
       WZ_SHEET.GUID,
       WZ_SHEET.CODE,
       WZ_SHEET.NAME,
       WZ_SHEET.RELATESHEET,
       WZ_SHEET.DUTYID,
       WZ_SHEET.TYPEID,
       WZ_SHEET.DEPARTID,
       WZ_SHEET.PROVIDERDEPID,
       WZ_SHEET.SUBMITMANID,
       WZ_SHEET.SUBMITTIME,
       WZ_SHEET.STATUS,
       BASE_DICTIONARY.ID AS ROUTEID,
       BASE_RECEIPT.REPORTNAME,
       BASE_RECEIPT.PREFIX,
       WZ_SHEET.KINDID,
       V_BASE_DEPART.NAME AS DEPARTNAME,
       V_BASE_DEPART.CODE AS DEPARTLEVELCODE,
       V_BASE_DEPART.CODE AS DEPARTCODE,
       WZ_SHEET.CREATOR,
       WZ_SHEET.ROUTEID AS CURRENTROUTEID,
       V_BASE_DEPART.CODE AS DEPARTLEVELCOUNT
  FROM WZ_SHEET
  LEFT OUTER JOIN V_BASE_DEPART ON WZ_SHEET.DEPARTID = V_BASE_DEPART.ID
  LEFT OUTER JOIN BASE_DICTIONARY ON WZ_SHEET.ROUTEID =
                                     BASE_DICTIONARY.ID
  LEFT OUTER JOIN BASE_RECEIPT ON BASE_DICTIONARY.ID =
                                  BASE_RECEIPT.PROCESSID
;
--------------------------------------------------------
--  DDL for View V_SHEET_CK
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SHEET_CK" ("ID", "GUID", "CODE", "NAME", "RELATESHEET", "DUTYID", "TYPEID", "DEPARTID", "PROVIDERDEPID", "SUBMITMANID", "SUBMITTIME", "STATUS", "ORDERNUM", "RECEIVENUM", "USEDDEPARTID", "STOREMANID", "USEDMANID", "ROUTEID", "REPORTNAME", "PREFIX", "KINDID", "DEPARTNAME", "DEPARTLEVELCODE", "DEPARTCODE", "CREATOR", "CREATEDATE", "CURRENTROUTEID", "DEPARTLEVELCOUNT") AS 
  SELECT WZ_SHEET_CK.ID,
       WZ_SHEET_CK.GUID,
       WZ_SHEET_CK.CODE,
       WZ_SHEET_CK.NAME,
       WZ_SHEET_CK.RELATESHEET,
       WZ_SHEET_CK.DUTYID,
       WZ_SHEET_CK.TYPEID,
       WZ_SHEET_CK.DEPARTID,
       WZ_SHEET_CK.PROVIDERDEPID,
       WZ_SHEET_CK.SUBMITMANID,
       WZ_SHEET_CK.SUBMITTIME,
       WZ_SHEET_CK.STATUS,
       WZ_SHEET_CK.ORDERNUM,
       WZ_SHEET_CK.RECEIVENUM,
       WZ_SHEET_CK.USEDDEPARTID,
       WZ_SHEET_CK.STOREMANID,
       WZ_SHEET_CK.USEDMANID,
       BASE_DICTIONARY.ID AS ROUTEID,
       BASE_RECEIPT.REPORTNAME,
       BASE_RECEIPT.PREFIX,
       WZ_SHEET_CK.KINDID,
       V_BASE_DEPART.NAME AS DEPARTNAME,
       V_BASE_DEPART.LEVELCODE AS DEPARTLEVELCODE,
       V_BASE_DEPART.CODE AS DEPARTCODE,
       WZ_SHEET_CK.CREATOR,
       WZ_SHEET_CK.Createdate,
       WZ_SHEET_CK.ROUTEID AS CURRENTROUTEID,
       V_BASE_DEPART.CODE AS DEPARTLEVELCOUNT
  FROM WZ_SHEET_CK
  LEFT OUTER JOIN V_BASE_DEPART ON WZ_SHEET_CK.DEPARTID = V_BASE_DEPART.ID
  LEFT OUTER JOIN BASE_DICTIONARY ON WZ_SHEET_CK.ROUTEID =
                                     BASE_DICTIONARY.ID
  LEFT OUTER JOIN BASE_RECEIPT ON BASE_DICTIONARY.ID =
                                  BASE_RECEIPT.PROCESSID
;
--------------------------------------------------------
--  DDL for View V_SHEET_CK_ROUTE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SHEET_CK_ROUTE" ("SHEETID", "SHEETCODE", "NAME", "SHEETSTATUS", "DEPARTID", "TYPEID", "KINDID", "CREATOR", "DUTYID", "ROUTESTEPID", "GUID", "ROUTESTEPNAME", "CODE", "ROUTEID", "ROUTENAME", "NEXTSTEPID", "NEXTSTEPNAME", "PREVSTEPID", "PREVSTEPNAME", "ROLECODE", "ROLENAME", "PERSONID", "PERSONAME", "ROUTETYPE", "INPUTCONDITION", "INPUTPROCEDURE", "OPERPROCEDURE", "SHEETSTATUSID", "DEVICESTATUS", "FLAG1", "FLAG2", "STATUS", "ORDERNUM", "REMARK", "ZTID", "OPERFORMFIEDLS", "OPERBUTTONS") AS 
  SELECT A.ID AS SHEETID,
       A.CODE AS SHEETCODE,
       A.NAME,
       A.STATUS AS SHEETSTATUS,
       A.DEPARTID,
       A.TYPEID,
       A.KINDID,
       A.CREATOR,
       A.DUTYID,
       B.Id AS ROUTESTEPID,
       B.GUID,
       B.name AS ROUTESTEPNAME,
       B.CODE,
       B.ROUTEID,
       B.ROUTENAME,
       B.NEXTSTEPID,
       B.NEXTSTEPNAME,
       B.PREVSTEPID,
       B.PREVSTEPNAME,
       B.ROLECODE,
       B.rolename,
       B.PERSONID,
       B.PERSONAME,
       B.ROUTETYPE,
       B.INPUTCONDITION,
       B.INPUTPROCEDURE,
       B.OPERPROCEDURE,
       B.SHEETSTATUSID,
       B.DEVICESTATUS,
       B.FLAG1,
       B.FLAG2,
       B.STATUS,
       B.ORDERNUM,
       B.REMARK,
       B.ZTID,
       B.OPERFORMFIEDLS,
       B.OPERBUTTONS
  FROM V_SHEET_CK A
  LEFT OUTER JOIN V_ROUTESTEP B ON A.ROUTEID = B.ROUTEID
;
--------------------------------------------------------
--  DDL for View V_SHEET_CURROUTE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SHEET_CURROUTE" ("SHEETID", "ROUTEID", "ROUTESTEPID", "CODE", "NAME", "ROLEID", "PERSONID", "ROUTECODE", "NEXTID", "PREVID", "ROUTETYPE", "SHEETSTATUS", "PREVSUBMITMANID", "PREVSUBMITTIME", "HANDINGMANID", "HANDINGTIME", "HANDSUGGESTION", "OPERRESULT", "PREVWAITID", "EXTENDINT4", "PREVSUBMITNAME", "HANDMANNAME", "OPERRESULTNAME") AS 
  SELECT
 A.SHEETID,A.ROUTEID,A.ROUTESTEPID,B.CODE,B.NAME,B.ROLEID,B.PERSONID,C.CODE AS ROUTECODE,A.NEXTID,A.PREVID,
 B.ROUTETYPE,B.SHEETSTATUS,
  (select PREVSUBMITMANID from (select * from WZ_WAITTASK order by id desc) t where t.Sheetid=A.Sheetid and t.routestepid=A.Routestepid and rownum=1) PREVSUBMITMANID,
  (select PREVSUBMITTIME from (select * from WZ_WAITTASK order by id desc)t where  t.Sheetid=A.Sheetid and  t.routestepid=A.Routestepid and rownum=1) PREVSUBMITTIME,
  (select HANDINGMANID from (select * from WZ_WAITTASK order by id desc)t where t.Sheetid=A.Sheetid and t.routestepid=A.Routestepid and rownum=1) HANDINGMANID,
  (select HANDINGTIME from (select * from WZ_WAITTASK order by id desc)t where t.Sheetid=A.Sheetid and t.routestepid=A.Routestepid and rownum=1) HANDINGTIME,
  (select HANDSUGGESTION from (select * from WZ_WAITTASK order by id desc)t where t.Sheetid=A.Sheetid  and t.routestepid=A.Routestepid and rownum=1) HANDSUGGESTION,
  (select nvl(HANDRESULT,0) from (select * from WZ_WAITTASK order by id desc)t where t.Sheetid=A.Sheetid and t.routestepid=A.Routestepid and rownum=1) OPERRESULT,
  (select EXTENDINT1 from (select * from WZ_WAITTASK order by id desc)t where t.Sheetid=A.Sheetid and t.routestepid=A.Routestepid and rownum=1) PREVWAITID,
  (select Extendint4 from (select * from WZ_WAITTASK order by id desc)t where t.Sheetid=A.Sheetid  and t.routestepid=A.Routestepid and rownum=1) Extendint4,
  (select Base_Person.Name from WZ_WAITTASK LEFT JOIN Base_Person  on WZ_WAITTASK.Prevsubmitmanid=Base_Person.Id where WZ_WAITTASK.Sheetid=A.Sheetid and wz_waittask.routestepid=A.Routestepid and rownum=1)  AS PREVSUBMITNAME,
  (select Base_Person.Name from WZ_WAITTASK LEFT JOIN Base_Person on WZ_WAITTASK.Handingmanid=Base_Person.id where WZ_WAITTASK.Sheetid=A.Sheetid and wz_waittask.routestepid=A.Routestepid and rownum=1 ) AS HANDMANNAME,
  (case (select HANDRESULT from (select * from WZ_WAITTASK order by id desc)t where t.Sheetid=A.Sheetid and t.routestepid=A.Routestepid and rownum=1) when 0 then '未处理' when 1 then '通过' when 2 then '不通过' when 3 then '驳回' else '未处理' end) AS OPERRESULTNAME
FROM WZ_ROUTEHISTORY A
LEFT OUTER JOIN BASE_ROUTESTEP B ON A.ROUTESTEPID=B.ID
LEFT OUTER JOIN BASE_DICTIONARY C ON C.ID=A.ROUTEID
;
--------------------------------------------------------
--  DDL for View V_SHEET_RK
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SHEET_RK" ("ID", "GUID", "CODE", "NAME", "RELATESHEET", "DUTYID", "TYPEID", "DEPARTID", "PROVIDERDEPID", "SUBMITMANID", "SUBMITTIME", "STATUS", "ORDERNUM", "RECEIVENUM", "USEDDEPARTID", "STOREMANID", "USEDMANID", "ROUTEID", "REPORTNAME", "PREFIX", "KINDID", "DEPARTNAME", "DEPARTLEVELCODE", "DEPARTCODE", "CREATOR", "CREATEDATE", "CURRENTROUTEID", "DEPARTLEVELCOUNT") AS 
  SELECT WZ_SHEET_RK.ID,
       WZ_SHEET_RK.GUID,
       WZ_SHEET_RK.CODE,
       WZ_SHEET_RK.NAME,
       WZ_SHEET_RK.RELATESHEET,
       WZ_SHEET_RK.DUTYID,
       WZ_SHEET_RK.TYPEID,
       WZ_SHEET_RK.DEPARTID,
       WZ_SHEET_RK.PROVIDERDEPID,
       WZ_SHEET_RK.SUBMITMANID,
       WZ_SHEET_RK.SUBMITTIME,
       WZ_SHEET_RK.STATUS,
       WZ_SHEET_RK.ORDERNUM,
       WZ_SHEET_RK.RECEIVENUM,
       WZ_SHEET_RK.USEDDEPARTID,
       WZ_SHEET_RK.STOREMANID,
       WZ_SHEET_RK.USEDMANID,
       BASE_DICTIONARY.ID AS ROUTEID,
       BASE_RECEIPT.REPORTNAME,
       BASE_RECEIPT.PREFIX,
       WZ_SHEET_RK.KINDID,
       V_BASE_DEPART.NAME AS DEPARTNAME,
       V_BASE_DEPART.LEVELCODE AS DEPARTLEVELCODE,
       V_BASE_DEPART.CODE AS DEPARTCODE,
       WZ_SHEET_RK.CREATOR,
       WZ_SHEET_RK.Createdate,
       WZ_SHEET_RK.ROUTEID AS CURRENTROUTEID,
       V_BASE_DEPART.CODE AS DEPARTLEVELCOUNT
  FROM WZ_SHEET_RK
  LEFT OUTER JOIN V_BASE_DEPART ON WZ_SHEET_RK.DEPARTID = V_BASE_DEPART.ID
  LEFT OUTER JOIN BASE_DICTIONARY ON WZ_SHEET_RK.ROUTEID =
                                     BASE_DICTIONARY.ID
  LEFT OUTER JOIN BASE_RECEIPT ON BASE_DICTIONARY.ID =
                                  BASE_RECEIPT.PROCESSID
;
--------------------------------------------------------
--  DDL for View V_SHEET_RKDETAIL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SHEET_RKDETAIL" ("ID", "GUID", "TAGCODE", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "DETAILCOUNT", "DETAILUNIT", "TAXPRICE", "NOTAXPRICE", "TAXRATE", "TAXSUM", "NOTAXSUM", "CURRENCYUNIT", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "PLANDEPARTID", "EXPIRATIONTIME", "PROVIDERDEPID", "DESCRIPTION", "ORDERNUM", "RECEIVENUM", "DETAILUNITNAME", "SNCODE", "ENABLESN", "OWNERTYPE", "ISEQUIPMENT", "STATUS", "MEMO", "ZTID", "CREATOR", "SHEETCODE", "DEPARTID", "DEPARTNAME", "NAME", "SHEETSTATUS", "CREATEDATE", "CATEGORYNAME", "EXTENDDATE2") AS 
  SELECT
                     WZ_SheetRKDetail.ID,WZ_SheetRKDetail.GUID,
                     WZ_SheetRKDetail.TagCode,  --编码
                     WZ_SheetRKDetail.SHEETID,  --单据Id
                     WZ_SheetRKDetail.SHEETDETAILID,  --单据明细Id
                     WZ_SheetRKDetail.Categoryid,    --分类ID
                     WZ_SheetRKDetail.MATERIALID,   --物料ID
                     WZ_SheetRKDetail.MATERIALCODE,  --物料编码
                     WZ_SheetRKDetail.MATERIALNAME,  --物料名称
                     WZ_SheetRKDetail.MATERIALBRAND, --品牌
                     WZ_SheetRKDetail.MATERIALMODEL,  --物资型号
                     Wz_Sheetrkdetail.MaterialSpecification,--物资规格

                     WZ_SheetRKDetail.Detailcount,      --入库数量
                     --WZ_SheetRKDetail.STORECOUNT,     --库存数量
                     WZ_SheetRKDetail.DETAILUNIT,     --计量单位
                     WZ_SheetRKDetail.TaxPrice,    --含税单价
                     Wz_Sheetrkdetail.NoTaxPrice ,  --不含税单价
                     Wz_Sheetrkdetail.TaxRate     , --税率
                     Wz_Sheetrkdetail.TaxSum       ,--含税金额
                     Wz_Sheetrkdetail.NoTaxSum     ,--不含税金额
                     WZ_SheetRKDetail.CurrencyUnit,   --货币单位

                     WZ_SheetRKDetail.StoreID,      --库房id
                     WZ_SheetRKDetail.StoreLocationID,    --库位id
                     Wz_Sheetrkdetail.StoreLocationCode,--库位编码
                     Wz_Sheetrkdetail.StoreLocationName, --库位名称
                     Wz_Sheetrkdetail.PlanDepartID, --计划部门id
                     Wz_Sheetrkdetail.ExpirationTime ,--质保期时间
                     -- WZ_SheetRKDetail.DEPARTID,       --申请部门id
                     WZ_SheetRKDetail.ProviderDepID,  --供应商ID
                     Wz_Sheetrkdetail.Description,

                     V_SHEET_RK.ORDERNUM,       --采购订单编号
                     V_SHEET_RK.RECEIVENUM,      --接收单编号
                     WZ_SheetRKDetail.Detailunitname,
                     Wz_Sheetrkdetail.Sncode,
                     Wz_Sheetrkdetail.Enablesn,
                     Wz_Sheetrkdetail.Ownertype,
                     Wz_Sheetrkdetail.Isequipment,
                     WZ_SheetRKDetail.STATUS,          --状态
                     WZ_SheetRKDetail.MEMO,
                     WZ_SheetRKDetail.Ztid,
                     V_SHEET_RK.Creator,           V_SHEET_RK.CODE AS SHEETCODE, V_SHEET_RK.DEPARTID,V_SHEET_RK.DEPARTNAME,V_SHEET_RK.NAME,V_SHEET_RK.STATUS AS SHEETSTATUS,V_SHEET_RK.CREATEDATE,
           BASE_SPAREPARTSCATE.NAME AS CategoryName,
           WZ_SheetRKDetail.Extenddate2
FROM      WZ_SheetRKDetail LEFT OUTER JOIN
          V_SHEET_RK ON WZ_SheetRKDetail.SHEETID= V_SHEET_RK.ID LEFT OUTER JOIN
             BASE_SPAREPARTSCATE   ON WZ_SheetRKDetail.Categoryid = BASE_SPAREPARTSCATE.ID
;
--------------------------------------------------------
--  DDL for View V_SHEET_RK_ROUTE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SHEET_RK_ROUTE" ("SHEETID", "SHEETCODE", "NAME", "SHEETSTATUS", "DEPARTID", "TYPEID", "KINDID", "CREATOR", "DUTYID", "ROUTESTEPID", "GUID", "ROUTESTEPNAME", "CODE", "ROUTEID", "ROUTENAME", "NEXTSTEPID", "NEXTSTEPNAME", "PREVSTEPID", "PREVSTEPNAME", "ROLECODE", "ROLENAME", "PERSONID", "PERSONAME", "ROUTETYPE", "INPUTCONDITION", "INPUTPROCEDURE", "OPERPROCEDURE", "SHEETSTATUSID", "DEVICESTATUS", "FLAG1", "FLAG2", "STATUS", "ORDERNUM", "REMARK", "ZTID", "OPERFORMFIEDLS", "OPERBUTTONS") AS 
  SELECT A.ID AS SHEETID,
       A.CODE AS SHEETCODE,
       A.NAME,
       A.STATUS AS SHEETSTATUS,
       A.DEPARTID,
       A.TYPEID,
       A.KINDID,
       A.CREATOR,
       A.DUTYID,
       B.Id AS ROUTESTEPID,
       B.GUID,
       B.name AS ROUTESTEPNAME,
       B.CODE,
       B.ROUTEID,
       B.ROUTENAME,
       B.NEXTSTEPID,
       B.NEXTSTEPNAME,
       B.PREVSTEPID,
       B.PREVSTEPNAME,
       B.ROLECODE,
       B.rolename,
       B.PERSONID,
       B.PERSONAME,
       B.ROUTETYPE,
       B.INPUTCONDITION,
       B.INPUTPROCEDURE,
       B.OPERPROCEDURE,
       B.SHEETSTATUSID,
       B.DEVICESTATUS,
       B.FLAG1,
       B.FLAG2,
       B.STATUS,
       B.ORDERNUM,
       B.REMARK,
       B.ZTID,
       B.OPERFORMFIEDLS,
       B.OPERBUTTONS
  FROM V_SHEET_RK A
  LEFT OUTER JOIN V_ROUTESTEP B ON A.ROUTEID = B.ROUTEID
;
--------------------------------------------------------
--  DDL for View V_SHEET_ROUTE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SHEET_ROUTE" ("SHEETID", "SHEETCODE", "NAME", "SHEETSTATUS", "DEPARTID", "TYPEID", "KINDID", "CREATOR", "DUTYID", "ROUTESTEPID", "GUID", "ROUTESTEPNAME", "CODE", "ROUTEID", "ROUTENAME", "NEXTSTEPID", "NEXTSTEPNAME", "PREVSTEPID", "PREVSTEPNAME", "ROLECODE", "ROLENAME", "PERSONID", "PERSONAME", "ROUTETYPE", "INPUTCONDITION", "INPUTPROCEDURE", "OPERPROCEDURE", "SHEETSTATUSID", "DEVICESTATUS", "FLAG1", "FLAG2", "STATUS", "ORDERNUM", "REMARK", "ZTID", "OPERFORMFIEDLS", "OPERBUTTONS") AS 
  SELECT A.ID AS SHEETID,
       A.CODE AS SHEETCODE,
       A.NAME,
       A.STATUS AS SHEETSTATUS,
       A.DEPARTID,
       A.TYPEID,
       A.KINDID,
       A.CREATOR,
       A.DUTYID,
       B.Id AS ROUTESTEPID,
       B.GUID,
       B.name AS ROUTESTEPNAME,
       B.CODE,
       B.ROUTEID,
       B.ROUTENAME,
       B.NEXTSTEPID,
       B.NEXTSTEPNAME,
       B.PREVSTEPID,
       B.PREVSTEPNAME,
       B.ROLECODE,
       B.rolename,
       B.PERSONID,
       B.PERSONAME,
       B.ROUTETYPE,
       B.INPUTCONDITION,
       B.INPUTPROCEDURE,
       B.OPERPROCEDURE,
       B.SHEETSTATUSID,
       B.DEVICESTATUS,
       B.FLAG1,
       B.FLAG2,
       B.STATUS,
       B.ORDERNUM,
       B.REMARK,
       B.ZTID,
       B.OPERFORMFIEDLS,
       B.OPERBUTTONS
  FROM V_SHEET A
  LEFT OUTER JOIN V_ROUTESTEP B ON A.ROUTEID = B.ROUTEID
;
--------------------------------------------------------
--  DDL for View V_SJSHEETFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SJSHEETFORAPI" ("ID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "STATUS", "CREATEDATE", "CREATOR", "ZTID", "ORDERNUM", "RECEIVENUM", "EXTENDSTRING1", "SUMYSJCOUNT", "JSCOUNT") AS 
  SELECT
 ID,
 NAME,
 CODE,
 KINDID,
 TYPEID,
 DUTYID,
 DEPARTID,
 ROUTEID,
 ROUTE_STEPID,
 ROLEID,
 RELATESHEET,
 STATUS,
 CREATEDATE,
 CREATOR,
 ZTID,
 ORDERNUM,
 RECEIVENUM,
 EXTENDSTRING1 ,
 NVL((SELECT C.DETAILCOUNT FROM WZ_SHEETDETAIL C WHERE C.SHEETID=A.ID),0) AS SUMYSJCOUNT,
 NVL((select  wz_sheetdetail.DETAILCOUNT-NVL((SELECT sum(L.COUNT) FROM WZ_RECEIVINGLOG L WHERE L.RELATIONGUID=wz_sheetdetail.GUID AND L.OPERATIONTYPE=2),0)
    from wz_sheetdetail left join wz_sheet on wz_sheetdetail.sheetid=wz_sheet.id where wz_sheet.kindid=588 and wz_sheet.code=A.receiveNum and rownum=1),0) AS JSCOUNT
 FROM WZ_SHEET_RK A WHERE A.KINDID=35 AND A.STATUS=39
UNION
SELECT
 ID,
 NAME,
 CODE,
 KINDID,
 TYPEID,
 DUTYID,
 DEPARTID,
 ROUTEID,
 ROUTE_STEPID,
 ROLEID,
 RELATESHEET,
 STATUS,
 CREATEDATE,
 CREATOR,
 ZTID,
 ORDERNUM,
 RECEIVENUM,
 EXTENDSTRING1,
 NVL((SELECT D.DETAILCOUNT FROM WZ_SHEETDETAIL D WHERE D.SHEETID=B.ID ),0) AS SUMYSJCOUNT,
 0 AS  JSCOUNT
   FROM WZ_SHEET B WHERE (B.KINDID=506 OR B.KINDID=315) AND B.STATUS=39
;
--------------------------------------------------------
--  DDL for View V_SLDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SLDETAILS" ("ID", "SHEETID", "MATERIALCODE", "DESCRIPTION", "EXTENDSTRING1", "DETAILUNITNAME", "SHEETDETAILID", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDINT4", "EXTENDINT5", "EXTENDINT6", "SNCODE") AS 
  SELECT A.ID,
       A.SHEETID,
       A.MATERIALCODE,
       A.DESCRIPTION,
       A.EXTENDSTRING1,--单位
       A.DETAILUNITNAME,--使用单位名称
       A.SHEETDETAILID,--相关单据明细ID
       A.EXTENDINT1,--使用单位ID
       A.EXTENDINT2,--计划数量
       A.EXTENDINT3,--库存量
       A.EXTENDINT4,--已申领数量
       A.EXTENDINT5,--申领数量
       A.EXTENDINT6,--库存可用量
       A.SNCODE--计划编号
FROM WZ_SHEETDETAIL A
;
--------------------------------------------------------
--  DDL for View V_SLNOPLANDETAIL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SLNOPLANDETAIL" ("RN", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "DESCRIPTION", "DETAILUNITNAME", "ZTID", "STORECOUNT", "STOREUSECOUNT", "OFFICESID") AS 
  select rownum as rn, T.MATERIALID,
       T.MATERIALCODE,
       T.MATERIALNAME,
       T.DESCRIPTION,--物料描述
       T.DETAILUNITNAME,
       T.ZTID,
       T.STORECOUNT,
       T.STORECOUNT-f_getoccupycount(T.MATERIALCODE,T.ZTID) as STOREUSECOUNT,
      E.OFFICESID
from (SELECT A.MATERIALID,
        A.MATERIALCODE,
        A.MATERIALNAME,
        A.DESCRIPTION,--物料描述
        A.DETAILUNITNAME,
        A.ZTID,
       sum( A.STORECOUNT) as STORECOUNT
  FROM WZ_STOCK A  group by A.MATERIALID, A.MATERIALCODE,A.MATERIALNAME,A.DESCRIPTION,A.DETAILUNITNAME,A.ZTID ) T
  INNER JOIN BASE_SPAREPARTSCATE F ON SUBSTR(T.MATERIALCODE,0,2)=F.CODE
  INNER JOIN BASE_OFFICES_SCOPE E ON F.ID=E.SCOPEID
;
--------------------------------------------------------
--  DDL for View V_SLNOPLANDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SLNOPLANDETAILS" ("ID", "SHEETID", "SHEETDETAILID", "MATERIALCODE", "MATERIALID", "DESCRIPTION", "DETAILUNIT", "EXTENDSTRING1", "EXTENDINT3", "EXTENDINT5", "EXTENDINT6") AS 
  select a.id,
       a.sheetid,
       a.sheetdetailid,
       a.materialcode,--物料编码
       a.materialid,
       a.materialname as DESCRIPTION,--物料描述
       a.detailunit,--单位ID
       a.detailunitname as EXTENDSTRING1,--单位名称
       a.extendint3,--库存数量
       a.extendint5,--申领数量
       a.extendint6--库存可用量
 from wz_sheetdetail a
;
--------------------------------------------------------
--  DDL for View V_SLOTHERDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SLOTHERDETAILS" ("ID", "SHEETID", "MATERIALCODE", "DESCRIPTION", "EXTENDSTRING1", "DETAILUNITNAME", "SHEETDETAILID", "STOREID", "DETAILCOUNT", "SNCODE", "MATERIALID", "DETAILUNIT", "EXTENDSTRING2", "ZTID", "EXTENDINT7", "CKCOUNT") AS 
  SELECT A.ID,
       A.SHEETID,
       A.MATERIALCODE,
       A.DESCRIPTION,
       A.EXTENDSTRING1,--单位
       A.DETAILUNITNAME,--使用单位名称
       A.SHEETDETAILID,--相关单据明细ID
      -- A.EXTENDINT1,--使用单位ID
      -- A.EXTENDINT2,--计划数量
      -- A.EXTENDINT3,--库存量
      -- A.EXTENDINT4,--已申领数量
      -- A.EXTENDINT5,--申领数量
      -- A.EXTENDINT6,--库存可用量
      A.Storeid,--库房id
       A.Detailcount,
       A.SNCODE,--计划编号
       A.MATERIALID,
       A.DETAILUNIT,--单位ID
       A.Extendstring2,
       A.ztid,
       A.extendint7,
       (select  nvl(sum(ckdetail.detailcount),0) from wz_sheetckdetail ckdetail where ckdetail.sheetdetailid=A.Id ) as ckCount
FROM WZ_SHEETDETAIL A
;
--------------------------------------------------------
--  DDL for View V_SLPLANDETAIL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SLPLANDETAIL" ("ID", "PLANCODE", "MATERIALCODE", "MATERIALDES", "UNIT", "PLANCOUNT", "HAVESLCOUNT", "STOREUSECOUNT", "STORECOUNT", "PLANDATE", "USEDEPID", "USERDEPNAME", "ZTID", "DEPTNAME") AS 
  select a.ID,
       a.PLANCODE, --采购计划编号
       a.MATERIALCODE,
       a.MATERIALDES,
       a.UNIT, --计量单位
       a.COUNT AS PLANCOUNT, --采购计划量,
       (select nvl(sum(f.detailcount), 0)
          from wz_sheetdetail f
         where f.sheetdetailid = a.id) as HAVESLCOUNT, --已申领数量

         ( nvl((select NVL(sum(StoreCount), 0)
             from wz_stock c
            where c.materialcode = a.materialcode and c.ztid=b.ztId),
           0)-(select nvl(sum(f.detailcount), 0)
          from wz_sheetdetail f
         where f.sheetdetailid = a.id) )as STOREUSECOUNT, --库存可用量

       nvl((select NVL(sum(StoreCount), 0)
             from wz_stock c
            where c.materialcode = a.materialcode and c.ztid=b.ztId),
           0) as STORECOUNT, --库存量
       A.CREATEDATE AS PLANDATE,
       A.USEDEPID,
       B.NAME AS USERDEPNAME,
       B.ztid AS ztId,
       c.NAME AS deptName
  from wz_purchaseplan a
  left join base_usedep b on a.usedepid = b.id
  left join v_base_depart c on b.ztid = c.id
  where a.extendint1>0
;
--------------------------------------------------------
--  DDL for View V_SONCKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SONCKDETAILS" ("ID", "GUID", "DETAILID", "TAGCODE", "SUBSTOCK", "SUBDETAILCOUNT", "UNITNAME", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "ADDTIME", "HOUSENAME") AS 
  SELECT
  A.ID,
  A.GUID,
  A.DETAILID,
  A.TAGCODE,
  A.SUBSTOCK,
  A.SUBDETAILCOUNT,
  A.UNITNAME,
  A.STOREID,
  A.STORELOCATIONID,
  A.STORELOCATIONCODE,
  A.STORELOCATIONNAME,
  A.ADDTIME,
  B.NAME AS HOUSENAME
  FROM WZ_SHEETSUBDETAIL A LEFT JOIN BASE_WAREHOUSE B ON A.STOREID=B.ID
   WHERE A.EXTENDINT2=0
;
--------------------------------------------------------
--  DDL for View V_SONDBDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SONDBDETAILS" ("ID", "GUID", "DETAILID", "TAGCODE", "SUBSTOCK", "SUBDETAILCOUNT", "STOREID", "STORELOCATIONCODE", "STORELOCATIONNAME", "STORELOCATIONID", "ADDTIME", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDSTRING1", "UNITNAME", "HOUSENAME", "STOCKMAN", "RKCOUNT", "RKSTOREID", "RKLOCATIONCODE", "RKLOCATIONNAME", "RKLOCATIONID", "RKTIME", "RKCODE", "RKHOUSENAME", "RKSTOCKMAN") AS 
  SELECT
 A.ID,
 A.GUID,
 A.DETAILID,
 A.TAGCODE,
 A.SUBSTOCK,
 A.SUBDETAILCOUNT,
 A.STOREID,
 A.STORELOCATIONCODE,
 A.STORELOCATIONNAME,
 A.STORELOCATIONID,
 A.ADDTIME,
 A.EXTENDINT1,
 A.EXTENDINT2,
 A.EXTENDINT3,
 A.EXTENDSTRING1,
 A.UNITNAME,
 C.NAME AS HOUSENAME,
 D.NAME AS STOCKMAN,
 B.SUBDETAILCOUNT AS RKCOUNT,
 B.STOREID AS RKSTOREID ,
 B.STORELOCATIONCODE  AS RKLOCATIONCODE,
 B.STORELOCATIONNAME AS RKLOCATIONNAME,
 B.STORELOCATIONID AS RKLOCATIONID,
 B.ADDTIME AS RKTIME,
 B.EXTENDSTRING1 AS RKCODE,
 E.NAME AS RKHOUSENAME,
 F.NAME AS RKSTOCKMAN
 FROM WZ_SHEETSUBDETAIL A LEFT JOIN WZ_SHEETSUBDETAIL B ON A.ID=B.DETAILID
 LEFT JOIN BASE_WAREHOUSE C ON A.STOREID=C.ID
 LEFT JOIN BASE_PERSON D ON A.EXTENDINT3=D.ID
 LEFT JOIN BASE_WAREHOUSE E ON B.STOREID=E.ID
 LEFT JOIN BASE_PERSON F ON B.EXTENDINT3=F.ID
WHERE A.EXTENDINT2=0
;
--------------------------------------------------------
--  DDL for View V_SQCKLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SQCKLIST" ("ID", "MATERIALCODE", "DESCRIPTION", "DETAILUNITNAME", "CODE", "USEDDEPARTID", "NAME", "DETAILCOUNT", "ALLOWCOUNT", "SNCODE", "ZTID", "SHEETDETAILID", "STOCKUSECOUNT") AS 
  select a.id,
       a.materialcode,
       a.description,
       a.detailunitname,--计量单位
       b.code,
       b.Useddepartid, --使用部门（使用单位）
       c.name,--使用单位名称
       a.detailcount, --申领数量
       (nvl(a.detailcount,0)-
       nvl((select sum (detailcount) from wz_sheetckdetail cklist where cklist.sheetdetailid=a.id ),0)) allowcount,--未出库量
       a.sncode,--计划编码
       a.ztid，
       a.sheetdetailid,--采购计划ID
       f_GetStockUseCount(a.materialcode,a.ztid) as stockUseCount
       from wz_sheetdetail a
  left join wz_sheet b on a.sheetid = b.id
  left join base_usedep c on b.useddepartid=c.id
;
--------------------------------------------------------
--  DDL for View V_SQCKLISTFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SQCKLISTFORAPI" ("ID", "MATERIALCODE", "DESCRIPTION", "EXTENDSTRING1", "CODE", "SHEETID", "USEDDEPARTID", "NAME", "EXTENDINT5", "HASOUTCOUNT", "ALLOWCOUNT", "SNCODE", "ZTID", "SHEETDETAILID") AS 
  select a.id,
       a.materialcode,
       a.description,
       a.extendstring1,--计量单位
       b.code,
       a.id as sheetid,
       b.Useddepartid, --使用部门（使用单位）
       c.name,--使用单位名称
       a.extendint5, --申领数量
       a.extendint4 HASOUTCOUNT, --已出库数量
       (nvl(a.extendint5,0)-nvl(d.detailcount,0)) allowcount,--可申领数量
       a.sncode,--计划编码
       a.ztid，
       a.sheetdetailid--采购计划ID
       from wz_sheetdetail a
  left join wz_sheet b on a.sheetid = b.id
  left join base_usedep c on b.useddepartid=c.id
  left join wz_sheetckdetail d on d.sheetdetailid=a.id
  where b.kindid=650 and b.status=41
;
--------------------------------------------------------
--  DDL for View V_SQD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SQD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "PROVIDERDEPID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "USEDMANID", "STOREMANID", "USEDDEPARTID", "RECEIVENUM", "ORDERNUM", "EXTENDINT1", "STATUSNAME", "PERSONNAME", "UPDATEPERSON", "DEPNAME", "SQDEPNAME", "SQPERNAME", "SUMCOUNT") AS 
  select
SQ.ID,
SQ.GUID,
SQ.NAME,
SQ.CODE,
SQ.KINDID,
SQ.TYPEID,
SQ.DUTYID,
SQ.DEPARTID,
SQ.PROVIDERDEPID,
SQ.ROUTEID,
SQ.ROUTE_STEPID,
SQ.ROLEID,
SQ.RELATESHEET,
SQ.SUBMITMANID,
SQ.SUBMITTIME,
SQ.STATUS,
SQ.MEMO,
SQ.CREATOR,
SQ.CREATEDATE,
SQ.UPDATOR,
SQ.UPDATEDATE,
SQ.ZTID,
SQ.USEDMANID,
SQ.STOREMANID,
SQ.USEDDEPARTID,
SQ.RECEIVENUM,
SQ.ORDERNUM,
SQ.EXTENDINT1,
sheetstatus.name as statusname,
person.name as personname,
updateperson.name as updateperson,
org.name as depname ,
sqdep.name as sqdepname,
sqper.name as sqpername,
(SELECT SUM(e.detailcount) AS Expr1 FROM WZ_SHEETDETAIL e WHERE (SQ.ID = e.sheetid)) AS sumCount

from WZ_SHEET SQ
left  join Base_Dictionary sheetstatus on sheetstatus.id=SQ.status
left join Base_Person person on person.id=SQ.creator
left join Base_Person updateperson on updatePerson.id=SQ.updator
left join Base_Organization org on org.id=SQ.departid
LEFT JOIN Base_Organization sqdep on sqdep.id=sq.useddepartid
left join base_person sqper on sqper.id=sq.usedmanid
;
--------------------------------------------------------
--  DDL for View V_SQDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SQDETAILS" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "TAGCODE", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "DESCRIPTION", "DETAILCOUNT", "DETAILUNIT", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "TAXPRICE", "TAXSUM", "STOREID", "STORELOCATIONCODE", "STORELOCATIONNAME", "STORELOCATIONID", "PROVIDERDEPID", "STATUS", "MEMO", "ZTID", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "EXPIRATIONTIME", "PLANDEPARTID", "FLNAME", "HOUSENAME", "DWNAME") AS 
  select
a.id,
a.guid,
a.sheetid,
a.sheetdetailid,
a.tagcode,
a.categoryid,
a.materialid,
a.materialcode,
a.materialname,
a.materialbrand,
a.materialmodel,
a.materialspecification,
a.description,
a.detailcount,
a.detailunit,
a.notaxprice,
a.taxrate,
a.notaxsum,
a.taxprice,
a.taxsum,
a.storeid,
a.storelocationcode,
a.storelocationname,
a.storelocationid,
a.providerdepid,
a.status,
a.memo,
a.ztid,
a.creator,
a.createdate,
a.updator,
a.updatedate,
a.expirationtime,
a.plandepartid,
b.name as flname,
c.name as housename,
f.name as dwname
 from wz_sheetdetail a
 left join base_sparepartscate b on b.id=a.categoryid
 left join base_warehouse c on c.id=a.storeid
 left join base_dictionary f on f.id=a.detailunit
 left join wz_sheet d on a.sheetid=d.id
;
--------------------------------------------------------
--  DDL for View V_SQLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SQLIST" ("ID", "MATERIALCODE", "DESCRIPTION", "DETAILUNITNAME", "CODE", "PROVIDERDEPID", "EXTENDINT5", "EXTENDINT4") AS 
  select a.id,
       a.materialcode,
       a.description,
       a.detailunitname,
       b.code,
       b.providerdepid,--使用部门（使用单位）
       a.extendint5,--申领数量
       a.extendint4--已出库数量
  from wz_sheetdetail a
  left join wz_sheet b on a.sheetid = b.id
 order by a.createdate desc
;
--------------------------------------------------------
--  DDL for View V_SQNUM
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SQNUM" ("ID", "NAME", "CODE", "OFFICESID", "OFFICENAME", "APPLYDEPARTID", "USEDDEPARTID", "USEDDEP", "EXTENDSTRING2", "ZTID", "FUNDSSOURCE", "EXTENDSTRING1", "MEMO", "USEDDEPARTNAME", "CREATEDATE", "SLCOUNT", "CKCOUNT") AS 
  select a.id,
       a.name,
       a.code,
       a.officesid, --科室
       c.name officename,--科室名称
       a.applydepartid, --申请单位ID
       a.useddepartid, --使用单位
       b.name UsedDep,--使用单位名称
       a.extendstring2, --库存组织
       a.ztid, --库存组织ID
       a.fundssource, --资金来源
       a.extendstring1, --用途
       a.memo, --备注
       b.name useddepartname,--使用单位
       a.createdate,
       nvl((select nvl( sum(d.detailcount),0) from wz_sheetdetail d where d.sheetid=a.id),0) as slcount,
       nvl((select nvl(sum(e.detailcount),0) from wz_sheetckdetail e left join wz_sheetdetail f on e.sheetdetailid=f.id where f.sheetid=a.id),0) as ckcount
  from wz_sheet a
  left join base_usedep b on a.useddepartid = b.id
  left join base_usedep c on a.officesid=c.id
 where a.kindid = 650 and a.status=41
 order by a.createdate desc
;
--------------------------------------------------------
--  DDL for View V_SQNUMFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SQNUMFORAPI" ("ID", "NAME", "CODE", "OFFICESID", "OFFICENAME", "APPLYDEPARTID", "APPLYNAME", "USEDDEPARTID", "USEDDEP", "EXTENDSTRING2", "ZTID", "FUNDSSOURCE", "EXTENDSTRING1", "MEMO", "CREATOR", "CREATEDATE", "SLCOUNT", "CKCOUNT") AS 
  select a.id,
       a.name,
       a.code,
       a.officesid, --科室
       c.name officename,--科室名称
       a.applydepartid, --申请单位ID
       c.name as applyname,--申请单位名称
       a.useddepartid, --使用单位
       b.name UsedDep,--使用单位名称
       a.extendstring2, --库存组织
       a.ztid, --库存组织ID
       a.fundssource, --资金来源
       a.extendstring1, --用途
       a.memo, --备注
       a.creator,
       a.createdate,
       nvl((select sum(d.extendint5) from wz_sheetdetail d where d.sheetid=a.id),0) as slcount,
       nvl((select sum(e.detailcount) from wz_sheetckdetail e left join wz_sheetdetail f on e.sheetdetailid=f.id where f.sheetid=a.id),0) as ckcount
  from wz_sheet a
  left join base_usedep b on a.useddepartid = b.id
  left join base_usedep c on a.officesid=c.id
  left join base_applydep d on a.applydepartid=d.id
 where a.kindid = 650 and a.status=41
 order by a.createdate desc
;
--------------------------------------------------------
--  DDL for View V_STOCKQUERYFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_STOCKQUERYFORAPI" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "MATERIALID", "TAGCODE", "MATERIALCODE", "DESCRIPTION", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "DETAILUNITNAME", "STORECOUNT", "ZTID", "PROVIDERDEPID", "PROVIDERNAME", "HOUSENAME") AS 
  SELECT
 A.ID,
 A.GUID,
 A.SHEETID,
 A.SHEETDETAILID,
 A.MATERIALID,
 A.TAGCODE,
 A.MATERIALCODE,
 A.DESCRIPTION,
 A.STOREID,
 A.STORELOCATIONID,
 A.STORELOCATIONCODE,
 A.STORELOCATIONNAME,
 A.DETAILUNITNAME,
 A.STORECOUNT,
 A.ZTID,
 A.PROVIDERDEPID,
 B.NAME AS PROVIDERNAME,
 C.NAME AS HOUSENAME
 FROM WZ_STOCK A LEFT JOIN BASE_PROVIDER B ON A.PROVIDERDEPID=B.ID
 LEFT JOIN BASE_WAREHOUSE C ON A.STOREID=C.ID WHERE A.STORECOUNT>0
;
--------------------------------------------------------
--  DDL for View V_SXX
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_SXX" ("ID", "GUID", "NAME", "MODEL", "BRAND", "SPARESCATEID", "PRICE", "STATUS", "CONFIGMEMO", "PROVIDERID", "MEMO", "SORT", "CREATOR", "CREATEDATE", "UPDATER", "UPDATEDATE", "ZTID", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDINT4", "EXTENDFLOAT1", "EXTENDFLOAT2", "EXTENDFLOAT3", "EXTENDFLOAT4", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "CODE", "SPECIFICATIONS", "MODELS", "UNIT", "STOCKUP", "STOCKDOWN", "ISUSEALARM", "DESCRIPTION", "CON") AS 
  select bm."ID",bm."GUID",bm."NAME",bm."MODEL",bm."BRAND",bm."SPARESCATEID",bm."PRICE",bm."STATUS",bm."CONFIGMEMO",bm."PROVIDERID",bm."MEMO",bm."SORT",bm."CREATOR",bm."CREATEDATE",bm."UPDATER",bm."UPDATEDATE",bm."ZTID",bm."EXTENDINT1",bm."EXTENDINT2",bm."EXTENDINT3",bm."EXTENDINT4",bm."EXTENDFLOAT1",bm."EXTENDFLOAT2",bm."EXTENDFLOAT3",bm."EXTENDFLOAT4",bm."EXTENDSTRING1",bm."EXTENDSTRING2",bm."EXTENDSTRING3",bm."EXTENDSTRING4",bm."EXTENDSTRING5",bm."CODE",bm."SPECIFICATIONS",bm."MODELS",bm."UNIT",bm."STOCKUP",bm."STOCKDOWN",bm."ISUSEALARM",bm."DESCRIPTION",nvl(wz.storecount,0) as con from base_material bm
 left join wz_stock wz on bm.id=wz.materialid
WHERE IsUseAlarm = 1 and  nvl(wz.storecount,0)<bm.stockdown
 or ( nvl(wz.storecount,0)> bm.StockUp)
;
--------------------------------------------------------
--  DDL for View V_TAG
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_TAG" ("ID", "GUID", "SHEETID", "TAGCODE", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "DESCRIPTION", "DETAILUNIT", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "CODE", "CREATEDATE", "HOUSENAME", "UNITNAME", "PLANDEPARTID", "PLANDEPNAME", "SUMCOUNT", "PRODEPNAME") AS 
  SELECT
 A.ID,
 A.GUID,
 A.SHEETID,
 A.TAGCODE,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.MATERIALSPECIFICATION,
 A.DESCRIPTION,
 A.DETAILUNIT,
 A.STOREID,
 A.STORELOCATIONID,
 A.STORELOCATIONCODE,
 A.STORELOCATIONNAME,
 B.CODE,
 B.CREATEDATE,
 C.NAME AS HOUSENAME,
 D.NAME AS UNITNAME,
 A.PLANDEPARTID,
 E.NAME AS PLANDEPNAME,
 (SELECT SUM(S.SUBDETAILCOUNT) FROM WZ_SHEETRKSUBDETAIL S WHERE S.DETAILID=A.ID) AS SUMCOUNT,
 F.NAME AS PRODEPNAME
FROM WZ_SHEETRKDETAIL A
LEFT JOIN WZ_SHEET_RK B ON A.SHEETID=B.ID
LEFT JOIN BASE_WAREHOUSE C ON A.STOREID=C.ID
LEFT JOIN BASE_DICTIONARY D ON A.DETAILUNIT=D.ID
LEFT JOIN BASE_ORGANIZATION E ON A.PLANDEPARTID=E.ID
LEFT JOIN BASE_PROVIDER F ON B.PROVIDERDEPID=F.ID
;
--------------------------------------------------------
--  DDL for View V_TEST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_TEST" ("MATERIALCODE", "STORELOCATIONNAME", "DESCRIPTION", "CODE") AS 
  select
 A.MATERIALCODE,
 A.STORELOCATIONNAME,
 A.DESCRIPTION,
 B.CODE
from wz_pddetail a


 left join wz_sheet b on a.sheetid=b.id where b.status=39
;
--------------------------------------------------------
--  DDL for View V_THD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_THD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "ORDERNUM", "RECEIVENUM", "STOREMANID", "USEDMANID", "PROVIDERDEPID", "OWNERDEP", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "EXTENDSTRING6", "EXTENDINT1", "STATUSNAME", "PERSONNAME", "PROVIDERNAME", "DEPNAME", "EXTENDSTRING7", "URL") AS 
  SELECT
 A.ID,
 A.GUID,
 A.NAME,
 A.CODE,
 A.KINDID,
 A.TYPEID,
 A.DUTYID,
 A.DEPARTID,
 A.ROUTEID,
 A.ROUTE_STEPID,
 A.ROLEID,
 A.RELATESHEET,
 A.SUBMITMANID,
 A.SUBMITTIME,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.UPDATOR,
 A.UPDATEDATE,
 A.ZTID,
 A.ORDERNUM,
 A.RECEIVENUM,
/* A.USEDDEPARTID,*/
 A.STOREMANID,
 A.USEDMANID,
 A.PROVIDERDEPID,
 A.OWNERDEP,
 A.EXTENDSTRING1,--供应商
 A.EXTENDSTRING2,--库存组织
 A.EXTENDSTRING3,--订单类型
 A.EXTENDSTRING4,--业务实体
 A.EXTENDSTRING5,--入库单号
 A.EXTENDSTRING6,--接收号
 A.EXTENDINT1,
 B.NAME AS STATUSNAME,
 C.NAME AS PERSONNAME,
 D.NAME AS PROVIDERNAME,
 E.NAME AS DEPNAME,
 /*F.CODE AS HOUSECODE,*/
 A.EXTENDSTRING7, --ERP接收单号
 A.url
 FROM WZ_SHEET A LEFT JOIN BASE_DICTIONARY B ON A.STATUS=B.ID
 LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID
 LEFT JOIN BASE_PROVIDER D ON A.PROVIDERDEPID=D.ID
 LEFT JOIN BASE_ORGANIZATION E ON A.DEPARTID=E.ID
 /*INNER JOIN BASE_WAREHOUSE F ON F.ID=(SELECT STOREID FROM WZ_SHEETDETAIL WHERE sheetid=A.ID AND ROWNUM=1)*/
 WHERE A.KINDID=485
;
--------------------------------------------------------
--  DDL for View V_THDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_THDETAILS" ("HOUSENAME", "ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DETAILCOUNT", "DETAILUNIT", "CURRENCYUNIT", "STOREID", "PROVIDERDEPID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "MATERIALSPECIFICATION", "DESCRIPTION", "EXPIRATIONTIME", "STORELOCATIONCODE", "TAGCODE", "TAXPRICE", "TAXSUM", "STORELOCATIONID", "PLANDEPARTID", "DETAILUNITNAME", "ISEQUIPMENT", "ENABLESN", "SNCODE", "EXTENDFLOAT1", "STORELOCATIONNAME", "FLNAME", "JSCODE", "JSGUID", "EXTENDINT8") AS 
  SELECT
 C.NAME AS HOUSENAME,
 A.ID,
 A.GUID,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.DETAILCOUNT,
 A.DETAILUNIT,
 A.CURRENCYUNIT,
 A.STOREID,
 A.PROVIDERDEPID,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.UPDATOR,
 A.UPDATEDATE,
 A.ZTID,
 A.NOTAXPRICE,
 A.TAXRATE,
 A.NOTAXSUM,
 A.MATERIALSPECIFICATION,
 A.DESCRIPTION,
 A.EXPIRATIONTIME,
 A.STORELOCATIONCODE,
 A.TAGCODE,
 A.TAXPRICE,
 A.TAXSUM,
 A.STORELOCATIONID,
 A.PLANDEPARTID,
 A.DETAILUNITNAME,
 A.ISEQUIPMENT,
 A.ENABLESN,
 A.SNCODE,
 A.EXTENDFLOAT1,
 A.STORELOCATIONNAME,
 E.NAME AS FLNAME,
 F.CODE AS JSCODE,
 JS.GUID AS JSGUID,
 A.Extendint8
FROM WZ_SHEETDETAIL A
LEFT JOIN WZ_SHEETRKSUBDETAIL  B ON A.EXTENDINT8=B.ID
LEFT JOIN WZ_SHEETRKDETAIL BB ON B.DETAILID=BB.ID
LEFT JOIN WZ_SHEETDETAIL JS ON BB.SHEETDETAILID=JS.ID
LEFT JOIN BASE_WAREHOUSE C ON A.STOREID=C.ID
LEFT JOIN WZ_SHEET D ON A.SHEETID=D.ID
LEFT JOIN BASE_SPAREPARTSCATE E ON A.CATEGORYID=E.ID
LEFT JOIN BASE_DICTIONARY F ON A.OWNERTYPE=F.ID
WHERE D.KINDID=485
;
--------------------------------------------------------
--  DDL for View V_THD_PRINT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_THD_PRINT" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "ORDERNUM", "RECEIVENUM", "STOREMANID", "USEDMANID", "PROVIDERDEPID", "OWNERDEP", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "EXTENDSTRING6", "EXTENDINT1", "STATUSNAME", "PERSONNAME", "PROVIDERNAME", "DEPNAME", "HOUSECODE", "EXTENDSTRING7", "URL") AS 
  SELECT
 A.ID,
 A.GUID,
 A.NAME,
 A.CODE,
 A.KINDID,
 A.TYPEID,
 A.DUTYID,
 A.DEPARTID,
 A.ROUTEID,
 A.ROUTE_STEPID,
 A.ROLEID,
 A.RELATESHEET,
 A.SUBMITMANID,
 A.SUBMITTIME,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.ZTID,
 A.ORDERNUM,
 A.RECEIVENUM,
/* A.USEDDEPARTID,*/
 A.STOREMANID,
 A.USEDMANID,
 A.PROVIDERDEPID,
 A.OWNERDEP,
 A.EXTENDSTRING1,--供应商
 A.EXTENDSTRING2,--库存组织
 A.EXTENDSTRING3,--订单类型
 A.EXTENDSTRING4,--业务实体
 A.EXTENDSTRING5,--入库单号
 A.EXTENDSTRING6,--接收号
 A.EXTENDINT1,
 B.NAME AS STATUSNAME,
 C.NAME AS PERSONNAME,
 D.NAME AS PROVIDERNAME,
 E.NAME AS DEPNAME,
 F.CODE AS HOUSECODE,
 A.EXTENDSTRING7, --ERP接收单号
 A.url
 FROM WZ_SHEET A LEFT JOIN BASE_DICTIONARY B ON A.STATUS=B.ID
 LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID
 LEFT JOIN BASE_PROVIDER D ON A.PROVIDERDEPID=D.ID
 LEFT JOIN BASE_ORGANIZATION E ON A.DEPARTID=E.ID
 INNER JOIN BASE_WAREHOUSE F ON F.ID=(SELECT STOREID FROM WZ_SHEETDETAIL WHERE sheetid=A.ID AND ROWNUM=1)

 WHERE A.KINDID=485
;
--------------------------------------------------------
--  DDL for View V_THLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_THLIST" ("REALID", "ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DETAILUNIT", "PROVIDERDEPID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "MATERIALSPECIFICATION", "DESCRIPTION", "EXPIRATIONTIME", "TAXPRICE", "TAXSUM", "PLANDEPARTID", "DETAILCOUNT", "ISEQUIPMENT", "OWNERTYPE", "ENABLESN", "SNCODE", "DETAILUNITNAME", "EXTENDSTRING1", "EXTENDFLOAT1", "STOREID", "SUBDETAILCOUNT", "SHEETCODE", "ORDERNUM", "SONID", "STOREUSEDCOUNT", "YTCOUNT") AS 
  SELECT
 rownum realId,
 A.ID,
 A.GUID,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.DETAILUNIT,
 A.PROVIDERDEPID,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.ZTID,
 A.NOTAXPRICE,
 A.TAXRATE,
 A.NOTAXSUM,
 A.MATERIALSPECIFICATION,
 A.DESCRIPTION,
 A.EXPIRATIONTIME,
 A.TAXPRICE,
 A.TAXSUM,
 A.PLANDEPARTID,
 A.DETAILCOUNT,
 A.ISEQUIPMENT,
 A.OWNERTYPE,
 A.ENABLESN,
 C.SNCODE,
 A.DETAILUNITNAME,
 A.EXTENDSTRING1,--库房编码
 A.EXTENDFLOAT1,
 C.STOREID,
 C.SUBDETAILCOUNT,
 B.CODE AS SHEETCODE,
 B.ORDERNUM,
 C.ID AS SONID,
 nvl(f_GetStockUseCount(a.materialcode,a.ztid),0) AS STOREUSEDCOUNT,
 --已退货数量
 (SELECT NVL(SUM(THList.DETAILCOUNT),0) FROM WZ_SHEETDETAIL THList LEFT JOIN WZ_SHEET TH ON THList.SHEETID=TH.ID WHERE  THList.Extendint8=C.ID AND TH.KINDID=485 ) AS YTCOUNT
 FROM WZ_SHEETRKDETAIL A LEFT JOIN WZ_SHEET_RK B ON A.SHEETID=B.ID LEFT JOIN WZ_SHEETRKSUBDETAIL C ON A.ID=C.DETAILID
 WHERE B.KINDID=35
;
--------------------------------------------------------
--  DDL for View V_THSTORELIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_THSTORELIST" ("ID", "PROVIDERDEPID", "MATERIALCODE", "DESCRIPTION", "DETAILUNITNAME", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "OWNERTYPE", "ZTID", "STORECOUNT", "SNCODE", "PRIVIDERNAME", "WAREHOUSECODE", "UNSECOUNT") AS 
  select
stock.id,
stock.providerdepid,
stock.materialcode,
stock.description,
stock.detailunitname,
stock.storeid,
stock.STORELOCATIONID,
stock.storelocationcode,
stock.ownertype,
stock.ztid,
stock.storecount,
stock.sncode,
pro.name as prividerName,
wh.code as warehouseCode,
stock.storecount-( SELECT NVL(SUM(J.DETAILCOUNT),0)
 FROM WZ_SHEETCKDETAIL J LEFT JOIN Wz_Sheet_Ck K ON J.SHEETID=K.ID WHERE J.EXTENDINT2=stock.ID
 ) AS UNSECOUNT
 from  wz_stock stock left join
 base_provider pro on stock.providerdepid=pro.id
 left join base_warehouse wh on stock.storeid=wh.id
 where stock.storecount>0
;
--------------------------------------------------------
--  DDL for View V_THSUMMARYDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_THSUMMARYDETAILS" ("SHEETID", "MATERIALCODE", "DETAILCOUNT", "STOREID", "ZTID", "NOTAXSUM", "DESCRIPTION", "DETAILUNITNAME", "NOTAXPRICE", "TAGCODE", "WAREHOUSECODE", "ID") AS 
  select t."SHEETID",t."MATERIALCODE",t."DETAILCOUNT",t."STOREID",t."ZTID",t."NOTAXSUM",t."DESCRIPTION",t."DETAILUNITNAME",t."NOTAXPRICE",t."TAGCODE",t."WAREHOUSECODE",rownum as id
from
(SELECT
 A.SHEETID,
 A.MATERIALCODE,
 sum( A.DETAILCOUNT) as DETAILCOUNT,
 A.STOREID,
 A.ZTID,
 sum( A.DETAILCOUNT*A.NOTAXPRICE) as NOTAXSUM,
 A.DESCRIPTION,
 A.DETAILUNITNAME,
 A.Notaxprice,
 A.tagcode,
 wh.code as warehouseCode

FROM WZ_SHEETDETAIL A
left join base_warehouse wh on a.storeid=wh.id
group by A.SHEETID, A.MATERIALCODE,A.STOREID, A.ZTID, A.DESCRIPTION, A.DETAILUNITNAME,A.Notaxprice,A.tagcode,wh.code) t
;
--------------------------------------------------------
--  DDL for View V_TKD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_TKD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "ORDERNUM", "RECEIVENUM", "USEDDEPARTID", "STOREMANID", "USEDMANID", "PROVIDERDEPID", "OWNERDEP", "FUNDSSOURCE", "EXTENDSTRING1", "EXTENDINT1", "OFFICESID", "STATUSNAME", "PERSONNAME", "TKCODE", "USEDEPNAME", "DEPARTOFFICENAME", "ZTIDNAME", "CKCODE", "URL") AS 
  SELECT
 A.ID,
 A.GUID,
 A.NAME,
 A.CODE,
 A.KINDID,
 A.TYPEID,
 A.DUTYID,
 A.DEPARTID,
 A.ROUTEID,
 A.ROUTE_STEPID,
 A.ROLEID,
 A.RELATESHEET,
 A.SUBMITMANID,
 A.SUBMITTIME,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.UPDATOR,
 A.UPDATEDATE,
 A.ZTID,
 A.ORDERNUM,
 A.RECEIVENUM,
 A.USEDDEPARTID,
 A.STOREMANID,
 A.USEDMANID,
 A.PROVIDERDEPID,
 A.OWNERDEP,
 A.FUNDSSOURCE,
 A.EXTENDSTRING1,
 A.EXTENDINT1,
 A.OFFICESID,
 B.NAME AS STATUSNAME,
 C.NAME AS PERSONNAME,
 --D.NAME AS USEDEPNAME,
 E.CODE TKCODE,
 F.NAME USEDEPNAME,
 G.NAME DEPARTOFFICENAME,
 H.NAME ZTIDNAME,
 I.CODE CKCODE，
 A.url
/*， J.CODE AS HOUSECODE*/
 FROM WZ_SHEET A
 LEFT JOIN BASE_DICTIONARY B ON A.STATUS=B.ID
 LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID
 --LEFT JOIN BASE_ORGANIZATION D ON A.USEDDEPARTID=D.ID
 LEFT JOIN WZ_SHEET_CK E ON A.EXTENDINT1=E.ID
 LEFT JOIN BASE_USEDEP F ON A.USEDDEPARTID=F.ID
 LEFT JOIN BASE_USEDEP G ON A.OFFICESID=G.ID
 LEFT JOIN BASE_ORGANIZATION H ON A.ZTID=H.ID
 LEFT JOIN WZ_SHEET_CK I ON A.EXTENDINT1=I.ID
/*INNER JOIN BASE_WAREHOUSE J ON J.ID=(SELECT STOREID FROM WZ_SHEETDETAIL WHERE SHEETID=A.ID AND ROWNUM=1)*/
 WHERE A.KINDID=315
;
--------------------------------------------------------
--  DDL for View V_TKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_TKDETAILS" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DETAILCOUNT", "DETAILUNIT", "CURRENCYUNIT", "STOREID", "PROVIDERDEPID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "MATERIALSPECIFICATION", "DESCRIPTION", "EXPIRATIONTIME", "STORELOCATIONCODE", "TAGCODE", "TAXPRICE", "TAXSUM", "STORELOCATIONID", "PLANDEPARTID", "STORELOCATIONNAME", "DETAILUNITNAME", "UNITNAME", "HOUSENAME", "PROVIDERNAME", "ENABLESN") AS 
  SELECT
 A.ID,
 A.GUID,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.DETAILCOUNT,
 A.DETAILUNIT,
 A.CURRENCYUNIT,
 A.STOREID,
 A.PROVIDERDEPID,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.UPDATOR,
 A.UPDATEDATE,
 A.ZTID,
 A.NOTAXPRICE,
 A.TAXRATE,
 A.NOTAXSUM,
 A.MATERIALSPECIFICATION,
 A.DESCRIPTION,
 A.EXPIRATIONTIME,
 A.STORELOCATIONCODE,
 A.TAGCODE,
 A.TAXPRICE,
 A.TAXSUM,
 A.STORELOCATIONID,
 A.PLANDEPARTID,
 A.STORELOCATIONNAME,
 A.DETAILUNITNAME,
 B.NAME AS UNITNAME,
 C.NAME AS HOUSENAME,
 E.NAME PROVIDERNAME,
 A.Enablesn
FROM WZ_SHEETDETAIL A
LEFT JOIN BASE_DICTIONARY B ON A.DETAILUNIT=B.ID
LEFT JOIN BASE_WAREHOUSE C ON A.STOREID=C.ID
LEFT JOIN WZ_SHEET D ON A.SHEETID=D.ID
LEFT JOIN BASE_PROVIDER E ON A.ProviderDepId=E.ID
WHERE D.KINDID=315
;
--------------------------------------------------------
--  DDL for View V_TKD_PRINT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_TKD_PRINT" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "ORDERNUM", "RECEIVENUM", "USEDDEPARTID", "STOREMANID", "USEDMANID", "PROVIDERDEPID", "OWNERDEP", "FUNDSSOURCE", "EXTENDSTRING1", "EXTENDINT1", "OFFICESID", "STATUSNAME", "PERSONNAME", "TKCODE", "USEDEPNAME", "DEPARTOFFICENAME", "ZTIDNAME", "CKCODE", "HOUSECODE") AS 
  SELECT
 A.ID,
 A.GUID,
 A.NAME,
 A.CODE,
 A.KINDID,
 A.TYPEID,
 A.DUTYID,
 A.DEPARTID,
 A.ROUTEID,
 A.ROUTE_STEPID,
 A.ROLEID,
 A.RELATESHEET,
 A.SUBMITMANID,
 A.SUBMITTIME,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.ZTID,
 A.ORDERNUM,
 A.RECEIVENUM,
 A.USEDDEPARTID,
 A.STOREMANID,
 A.USEDMANID,
 A.PROVIDERDEPID,
 A.OWNERDEP,
 A.FUNDSSOURCE,
 A.EXTENDSTRING1,
 A.EXTENDINT1,
 A.OFFICESID,
 B.NAME AS STATUSNAME,
 C.NAME AS PERSONNAME,
 --D.NAME AS USEDEPNAME,
 E.CODE TKCODE,
 F.NAME USEDEPNAME,
 G.NAME DEPARTOFFICENAME,
 H.NAME ZTIDNAME,
 I.CODE CKCODE，
 J.CODE AS HOUSECODE
 FROM WZ_SHEET A
 LEFT JOIN BASE_DICTIONARY B ON A.STATUS=B.ID
 LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID
 --LEFT JOIN BASE_ORGANIZATION D ON A.USEDDEPARTID=D.ID
 LEFT JOIN WZ_SHEET_CK E ON A.EXTENDINT1=E.ID
 LEFT JOIN BASE_USEDEP F ON A.USEDDEPARTID=F.ID
 LEFT JOIN BASE_USEDEP G ON A.OFFICESID=G.ID
 LEFT JOIN BASE_ORGANIZATION H ON A.ZTID=H.ID
 LEFT JOIN WZ_SHEET_CK I ON A.EXTENDINT1=I.ID
INNER JOIN BASE_WAREHOUSE J ON J.ID=(SELECT STOREID FROM WZ_SHEETDETAIL WHERE SHEETID=A.ID AND ROWNUM=1)
 WHERE A.KINDID=315
;
--------------------------------------------------------
--  DDL for View V_TKLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_TKLIST" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "UNSECOUNT", "DETAILCOUNT", "DETAILUNIT", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "PROVIDERDEPID", "CREATOR", "CREATEDATE", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "DESCRIPTION", "EXPIRATIONTIME", "TAGCODE", "TAXPRICE", "TAXSUM", "PLANDEPARTID", "HOUSENAME", "USEDDEPARTID", "USEDDEPNAME", "UNITNAME", "SHEETCODE") AS 
  SELECT DISTINCT
 A.ID,
 A.GUID,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.MATERIALSPECIFICATION,
/* (A.DETAILCOUNT-NVL(G.DETAILCOUNT,0)) AS DETAILCOUNT,*/
 A.DETAILCOUNT-(SELECT NVL(SUM(TKMX.DETAILCOUNT),0)
 FROM WZ_SHEETDETAIL TKMX LEFT JOIN WZ_SHEET TK ON TKMX.SHEETID=TK.ID WHERE TKMX.SHEETDETAILID=A.ID AND TK.KINDID=315 ) AS UNSECOUNT,
 A.DETAILCOUNT,
 A.DETAILUNIT,
 A.STOREID,
 A.STORELOCATIONID,
 A.STORELOCATIONCODE,
 A.STORELOCATIONNAME,
 A.PROVIDERDEPID,
 A.CREATOR,
 A.CREATEDATE,
 A.NOTAXPRICE,
 A.TAXRATE,
 A.NOTAXSUM,
 A.DESCRIPTION,
 A.EXPIRATIONTIME,
 A.TAGCODE,
 A.TAXPRICE,
 A.TAXSUM,
 A.PLANDEPARTID,
 B.NAME AS HOUSENAME,
 D.USEDDEPARTID,
 E.NAME AS USEDDEPNAME,
 F.NAME AS UNITNAME,
 D.CODE AS SHEETCODE
FROM WZ_SHEETCKDETAIL A
LEFT JOIN BASE_WAREHOUSE B ON A.STOREID=B.ID
LEFT JOIN WZ_SHEET_CK  D  on D.ID=A.SHEETID
LEFT JOIN BASE_ORGANIZATION E ON D.USEDDEPARTID=E.ID
LEFT JOIN BASE_DICTIONARY F ON A.DETAILUNIT=F.ID
LEFT JOIN WZ_SHEETDETAIL G ON G.SHEETDETAILID=A.ID
/*WHERE A.ID NOT IN (
SELECT SHEETDETAILID
          FROM WZ_SHEETDETAIL
          LEFT JOIN WZ_SHEET ON WZ_SHEET.ID=WZ_SHEETDETAIL.SHEETID   WHERE WZ_SHEET.KINDID=315 AND WZ_SHEET.STATUS<>41
 ) AND D.STATUS=41;*/
 WHERE  A.DETAILCOUNT-( SELECT NVL(SUM(TKMX.DETAILCOUNT),0)
 FROM WZ_SHEETDETAIL TKMX LEFT JOIN WZ_SHEET TK ON TKMX.SHEETID=TK.ID WHERE TKMX.SHEETDETAILID=A.ID AND TK.KINDID=315 ) <>0
;
--------------------------------------------------------
--  DDL for View V_USEDEP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_USEDEP" ("ID", "ERPID", "CODE", "NAME", "ORGANIZATIONID", "STATUS", "ZTID", "ORGANIZATIONTYPE", "MEMO", "CREATOR", "CREATEDATE", "UPDATER", "UPDATEDATE", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDFLOAT1", "EXTENDFLOAT2", "EXTENDFLOAT3", "ORGANIZATIONNAME", "ZTCODE", "ZTNAME") AS 
  select u."ID",u."ERPID",u."CODE",u."NAME",u."ORGANIZATIONID",u."STATUS",u."ZTID",u."ORGANIZATIONTYPE",u."MEMO",u."CREATOR",u."CREATEDATE",u."UPDATER",u."UPDATEDATE",u."EXTENDINT1",u."EXTENDINT2",u."EXTENDINT3",u."EXTENDSTRING1",u."EXTENDSTRING2",u."EXTENDSTRING3",u."EXTENDFLOAT1",u."EXTENDFLOAT2",u."EXTENDFLOAT3",o.name as ORGANIZATIONNAME,zt.code as ZTCODE,zt.name as ZTNAME from
 base_usedep u
LEFT OUTER Join Base_Organization o on u.organizationid=o.id
LEFT OUTER join Base_Organization zt on u.ztid=zt.id
;
--------------------------------------------------------
--  DDL for View V_WAITTASK
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_WAITTASK" ("ID", "GUID", "SHEETID", "MENUID", "ROUTEID", "ROUTENAME", "ROUTESTEPID", "ROUTESTEPNAME", "HANDINGMANID", "HANDMANNAME", "PREVSUBMITMANID", "SUBMITMANNAME", "PREVSUBMITTIME", "HANDINGTIME", "JUMPPATH", "HANDSUGGESTION", "HANDRESULT", "HANDRESULTNAME", "ENCRYPTCODE", "STATUS", "CREATOR", "CREATETIME", "ZTID", "ROUTETYPE", "OPERPROCEDURE", "LASTWAITID", "NEXTROUTESTEPID", "PREVWAITID", "RKSHEETSTATUS", "SHEETSTATUS", "RKCURROUTEID", "RKSUBMITMANID", "CURROUTEID", "SUBMITMANID", "OPERFORMFIEDLS", "HANDMANCODE", "RKDEPARTID", "DEPARTID", "ROUTECODE") AS 
  SELECT
       A.ID,
       A.GUID,
       A.SHEETID,
       A.MENUID,
       E.ROUTEID,
       E.ROUTENAME,
       A.ROUTESTEPID,
       E.name AS ROUTESTEPNAME,
       A.HANDINGMANID,
       F.NAME AS HANDMANNAME,
       A.PREVSUBMITMANID,
       G.NAME AS SUBMITMANNAME,
       A.PREVSUBMITTIME,
       A.HANDINGTIME,
       A.JUMPPATH,
       A.HANDSUGGESTION,
       A.HANDRESULT,
       case A.HANDRESULT
        WHEN 0 THEN '未处理' WHEN 1 THEN '通过' WHEN 2 THEN '作废' WHEN 3 THEN '驳回' ELSE '未处理' END AS HANDRESULTNAME,
       A.ENCRYPTCODE,
       A.STATUS,
       A.CREATOR,
       A.CREATETIME,
       A.ZTID,
       E.ROUTETYPE,
       --WZ_WAITTASK.EXTENDSTRING1 AS 处理结果名称,
       --WZ_WAITTASK.EXTENDSTRING2 AS 处理类型,
       E.OPERPROCEDURE,
       A.EXTENDINT1 AS LASTWAITID,
       A.EXTENDINT2 AS NEXTROUTESTEPID,
       A.EXTENDINT3 AS PREVWAITID,
       B.STATUS AS RKSHEETSTATUS,
       D.STATUS AS SHEETSTATUS,
       B.ROUTEID AS RKCURROUTEID,
       B.SUBMITMANID AS RKSUBMITMANID,
       D.ROUTEID AS CURROUTEID,
       D.SUBMITMANID AS SUBMITMANID,
       --E.ROUTETYPE 步骤类型
       E.OPERFORMFIEDLS,
       F.CODE AS HANDMANCODE,
       B.DEPARTID AS RKDEPARTID,
       D.DEPARTID AS DEPARTID,
       e.ROUTECODE
      -- H.AGENTMANID
  FROM WZ_WAITTASK A
  LEFT OUTER JOIN V_SHEET_RK B ON B.ID= A.SHEETID
  LEFT OUTER JOIN V_SHEET_CK C ON C.ID= A.SHEETID
  LEFT OUTER JOIN V_SHEET D ON D.ID= A.SHEETID
  LEFT OUTER JOIN V_ROUTESTEP E ON E.Id = A.ROUTESTEPID
  LEFT OUTER JOIN BASE_PERSON F ON A.HANDINGMANID = F.ID
  LEFT OUTER JOIN BASE_PERSON G ON A.PREVSUBMITMANID =G.ID
  LEFT OUTER JOIN V_GETPERSON H ON A.HANDINGMANID = H.ID
;
--------------------------------------------------------
--  DDL for View V_WAITTASK_MONITOR
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_WAITTASK_MONITOR" ("ID", "ROUTESTEPID", "ROUTENAME", "MENUID", "URL", "SHEETID", "SHEETNAME", "SHEETCODE", "KINDID", "SHEETSTATUS", "STATUSNAME", "HANDINGMANID", "HANDINGTIME", "PREVSUBMITMANID", "PREVSUBMITMAN", "PREVSUBMITTIME", "NEXTHANDMANID", "NEXTMAN", "JUMPPATH", "HANDSUGGESTION", "HANDRESULT", "STATUS", "MEMO", "CREATOR", "CREATORNAME", "RESULTNAME", "SHEETKINDNAME", "CREATETIME") AS 
  select "ID","ROUTESTEPID","ROUTENAME","MENUID","URL","SHEETID","SHEETNAME","SHEETCODE","KINDID","SHEETSTATUS","STATUSNAME","HANDINGMANID","HANDINGTIME","PREVSUBMITMANID","PREVSUBMITMAN","PREVSUBMITTIME","NEXTHANDMANID","NEXTMAN","JUMPPATH","HANDSUGGESTION","HANDRESULT","STATUS","MEMO","CREATOR","CREATORNAME","RESULTNAME","SHEETKINDNAME","CREATETIME" from  (
SELECT wait.id,
       wait.routestepid,
       route.name as routename,
       wait.menuid,
       m.url,
       wait.sheetid,
       sheet.name as sheetname,
       sheet.code as sheetcode,
       sheet.kindid,
       sheet.status as sheetstatus,
       d.name as statusname,
       wait.handingmanid,
       wait.handingtime,
       wait.PrevSubmitManID,
       person.name as PrevSubmitMan,
       wait.PrevSubmitTime,
       wait.NextHandManID,
       p2.name as nextMan,
       wait.JumpPath,
       wait.HandSuggestion,
       wait.HandResult,
       wait.status,
       wait.memo,
       wait.creator,
       p1.name as creatorname,
       (CASE wait.HANDRESULT WHEN 0 THEN '未处理' WHEN 1 THEN '通过' WHEN 2 THEN '不通过' WHEN 3 THEN '驳回' ELSE '未处理' END) AS RESULTNAME,
       (CASE sheet.kindid WHEN 35 THEN 'RK'  WHEN 36 THEN 'CK' ELSE 'OTHER' END) AS SHEETKINDNAME,
 wait.createtime
  FROM wz_waittask wait
  left outer join base_routestep route on wait.routestepid = route.id
  inner join wz_sheet sheet on wait.sheetid = sheet.id
  left outer join base_dictionary d on sheet.status=d.id
  left outer join base_person person on wait.prevsubmitmanid = person.id
  left outer join base_person p1 on sheet.creator = p1.id
  left outer join base_person p2 on wait.handingmanid = p2.id
  left outer join base_menu m on wait.menuid=m.menucode
 where menuid not in ('receipt_details', 'sheet_CK')

  union
  --出库单
SELECT wait.id,
       wait.routestepid,
       route.name as routename,
       wait.menuid,
       m.url,
       wait.sheetid,
       sheet.name as sheetname,
       sheet.code as sheetcode,
       sheet.kindid,
       sheet.status as sheetstatus,
       d.name as statusname,
       wait.handingmanid,
       wait.handingtime,
       wait.PrevSubmitManID,
       person.name as PrevSubmitMan,
       wait.PrevSubmitTime,
       wait.NextHandManID,
       p2.name as nextMan,
       wait.JumpPath,
       wait.HandSuggestion,
       wait.HandResult,
       wait.status,
       wait.memo,
       wait.creator,
       p1.name as creatorname,
       (CASE wait.HANDRESULT WHEN 0 THEN '未处理' WHEN 1 THEN '通过' WHEN 2 THEN '不通过' WHEN 3 THEN '驳回' ELSE '未处理' END) AS RESULTNAME,
      (CASE sheet.kindid WHEN 35 THEN 'RK'  WHEN 36 THEN 'CK' ELSE 'OTHER' END) AS SHEETKINDNAME,
       wait.createtime
  FROM wz_waittask wait
  left outer join base_routestep route on wait.routestepid = route.id
  inner join wz_sheet_ck sheet on wait.sheetid = sheet.id
  left outer join base_dictionary d on sheet.status=d.id
  left outer join base_person person on wait.prevsubmitmanid = person.id
  left outer join base_person p1 on sheet.creator = p1.id
  left outer join base_person p2 on wait.handingmanid = p2.id
  left outer join base_menu m on wait.menuid=m.menucode
 where menuid = 'sheet_CK'
  union
  --入库单
SELECT wait.id,
       wait.routestepid,
       route.name as routename,
       wait.menuid,
       m.url,
       wait.sheetid,
       sheet.name as sheetname,
       sheet.code as sheetcode,
       sheet.kindid,
       sheet.status as sheetstatus,
       d.name as statusname,
       wait.handingmanid,
       wait.handingtime,
       wait.PrevSubmitManID,
       person.name as PrevSubmitMan,
       wait.PrevSubmitTime,
       wait.NextHandManID,
       p2.name as nextMan,
       wait.JumpPath,
       wait.HandSuggestion,
       wait.HandResult,
       wait.status,
       wait.memo,
       wait.creator,
       p1.name as creatorname,
       (CASE wait.HANDRESULT WHEN 0 THEN '未处理' WHEN 1 THEN '通过' WHEN 2 THEN '不通过' WHEN 3 THEN '驳回' ELSE '未处理' END) AS RESULTNAME,
       (CASE sheet.kindid WHEN 35 THEN 'RK'  WHEN 36 THEN 'CK' ELSE 'OTHER' END) AS SHEETKINDNAME,
       wait.createtime
  FROM wz_waittask wait
  left outer join base_routestep route on wait.routestepid = route.id
  inner join wz_sheet_rk sheet on wait.sheetid = sheet.id
  left outer join base_dictionary d on sheet.status=d.id
  left outer join base_person person on wait.prevsubmitmanid = person.id
  left outer join base_person p1 on sheet.creator = p1.id
  left outer join base_person p2 on wait.handingmanid = p2.id
  left outer join base_menu m on wait.menuid=m.menucode
 where menuid = 'receipt_details') t
 where t.status=0 and t.id in (select max(id) from wz_waittask  group by sheetid)
;
--------------------------------------------------------
--  DDL for View V_WAREHOUSE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_WAREHOUSE" ("ID", "GUID", "CODE", "NAME", "PARENTID", "LEVELCOUNT", "LEVELCODE", "ENDFLAG", "STATUS", "SORT", "MEMO", "CREATOR", "CREATEDATE", "PROPERTY", "ZTID", "PROPERTYNAME", "STATUSNAME", "PARENTCODE", "PARENTNAME", "PERSONNAME", "ZTIDNAME") AS 
  SELECT
A.ID,
A.GUID,
A.CODE,
A.NAME,
A.PARENTID,
A.LEVELCOUNT,
A.LEVELCODE,
A.ENDFLAG,
A.STATUS,
A.SORT,
A.MEMO,
A.CREATOR,
A.CREATEDATE,
A.PROPERTY,
A.ZTID,
(CASE A.PROPERTY WHEN 1 THEN '库房' WHEN 2 THEN '库区' WHEN 3 THEN '货架' WHEN 4 THEN '货位' ELSE '' END) AS PROPERTYNAME,
(CASE A.STATUS WHEN 1 THEN '启用' WHEN 0 THEN '禁用' ELSE '' END) AS STATUSNAME,
B.CODE AS PARENTCODE,
B.NAME AS PARENTNAME,
C.NAME AS PERSONNAME,
D.NAME AS ZTIDNAME  FROM BASE_WAREHOUSE A
LEFT JOIN BASE_WAREHOUSE B ON A.PARENTID=B.ID
LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID
LEFT JOIN BASE_ORGANIZATION D ON A.ZTID=D.ID
;
--------------------------------------------------------
--  DDL for View V_WZ_SECONDARYSTOCK
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_WZ_SECONDARYSTOCK" ("ID", "PRODUCTID", "PRODUCTNAME", "TLLHEIGHT", "TANKNAME", "PROPORTION", "WEIGHT", "CREATER", "CREATEDATE", "REMARK") AS 
  select ws.id,
       ws.productid,
       ws.productname,
       ws.tllheight,
       ws.tankname,
       ws.proportion,
       ws.weight,
       b.name as creater,
       ws.createdate,
       ws.remark
  from wz_secondarystock ws
  left join base_person b on b.id=ws.creater
;
--------------------------------------------------------
--  DDL for View V_YWD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_YWD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "ORDERNUM", "RECEIVENUM", "USEDDEPARTID", "STOREMANID", "USEDMANID", "PROVIDERDEPID", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDINT4", "EXTENDSTRING6", "EXTENDSTRING8", "OWNERDEP", "PERSONNAME", "DEPNAME", "STATUSNAME", "URL") AS 
  SELECT
 A.ID,
 A.GUID,
 A.NAME,
 A.CODE,
 A.KINDID,
 A.TYPEID,
 A.DUTYID,
 A.DEPARTID,
 A.ROUTEID,
 A.ROUTE_STEPID,
 A.ROLEID,
 A.RELATESHEET,
 A.SUBMITMANID,
 A.SUBMITTIME,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.UPDATOR,
 A.UPDATEDATE,
 A.ZTID,
 A.ORDERNUM,
 A.RECEIVENUM,
 A.USEDDEPARTID,
 A.STOREMANID,
 A.USEDMANID,
 A.PROVIDERDEPID,
 A.EXTENDINT1,
 A.EXTENDINT2,
 A.EXTENDINT3,
 A.EXTENDINT4,
 A.Extendstring6,
 A.Extendstring8,
 A.OWNERDEP,
 B.NAME AS PERSONNAME,
 C.NAME AS DEPNAME,
 D.NAME AS STATUSNAME,
 a.url
 FROM WZ_SHEET A LEFT JOIN BASE_PERSON B ON A.CREATOR=B.ID
 LEFT JOIN BASE_ORGANIZATION C ON A.DEPARTID=C.ID
 LEFT JOIN BASE_DICTIONARY D ON A.STATUS=D.ID
 where A.KindId=161
;
--------------------------------------------------------
--  DDL for View V_YWDBETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_YWDBETAILS" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "DETAILCOUNT", "DETAILUNIT", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "PROVIDERDEPID", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "DESCRIPTION", "EXPIRATIONTIME", "TAGCODE", "TAXPRICE", "TAXSUM", "EXTENDINT4", "EXTENDINT5", "EXTENDSTRING5", "EXTENDSTRING6", "OLDHOUSENAME", "PERSONNAME", "NAME") AS 
  SELECT
 A.ID,
 A.GUID,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.MATERIALSPECIFICATION,
 A.DETAILCOUNT,
 A.DETAILUNIT,
 A.STOREID,
 A.STORELOCATIONID,
 A.STORELOCATIONCODE,
 A.STORELOCATIONNAME,
 A.PROVIDERDEPID,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.ZTID,
 A.NOTAXPRICE,
 A.TAXRATE,
 A.NOTAXSUM,
 A.DESCRIPTION,
 A.EXPIRATIONTIME,
 A.TAGCODE,
 A.TAXPRICE,
 A.TAXSUM,
 A.EXTENDINT4,
 A.EXTENDINT5,
 A.EXTENDSTRING5,
 A.EXTENDSTRING6,
 C.NAME AS OLDHOUSENAME,
 F.NAME AS PERSONNAME,
 D.NAME
FROM WZ_SHEETDETAIL A
LEFT JOIN BASE_WAREHOUSE C ON A.STOREID=C.ID --移动后库房
LEFT JOIN BASE_WAREHOUSE D ON A.storelocationid=D.Id --移动后库位
LEFT JOIN BASE_PERSON F ON A.CREATOR=F.ID
;
--------------------------------------------------------
--  DDL for View V_YWDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_YWDETAILS" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "DETAILCOUNT", "DETAILUNIT", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "PROVIDERDEPID", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "DESCRIPTION", "EXPIRATIONTIME", "TAGCODE", "TAXPRICE", "TAXSUM", "EXTENDINT4", "EXTENDINT5", "EXTENDSTRING5", "EXTENDSTRING6", "DETAILUNITNAME", "NEWHOUSENAME", "OLDHOUSENAME", "PERSONNAME", "PROVIDERDEPNAME") AS 
  SELECT
 A.ID,
 A.GUID,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.MATERIALSPECIFICATION,
 A.DETAILCOUNT,
 A.DETAILUNIT,
 A.STOREID,
 A.STORELOCATIONID,
 A.STORELOCATIONCODE,
 A.STORELOCATIONNAME,
 A.PROVIDERDEPID,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.ZTID,
 A.NOTAXPRICE,
 A.TAXRATE,
 A.NOTAXSUM,
 A.DESCRIPTION,
 A.EXPIRATIONTIME,
 A.TAGCODE,
 A.TAXPRICE,
 A.TAXSUM,
 A.EXTENDINT4,
 A.EXTENDINT5,
 A.EXTENDSTRING5,
 A.EXTENDSTRING6,
 A.Detailunitname,
 C.NAME AS NEWHOUSENAME,
 E.NAME AS OLDHOUSENAME,
 F.NAME AS PERSONNAME,
 P.NAME AS PROVIDERDEPNAME

FROM WZ_SHEETDETAIL A
LEFT JOIN BASE_WAREHOUSE C ON A.STOREID=C.ID --移动后库房
LEFT JOIN BASE_WAREHOUSE E ON A.EXTENDINT4=E.ID--移动前库房
LEFT JOIN BASE_PERSON F ON A.CREATOR=F.ID
LEFT JOIN BASE_PROVIDER P ON A.PROVIDERDEPID=P.ID
;
--------------------------------------------------------
--  DDL for View V_YWDETAILSFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_YWDETAILSFORAPI" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "DETAILCOUNT", "DETAILUNIT", "STOREID", "STORELOCATIONID", "STORELOCATIONCODE", "STORELOCATIONNAME", "PROVIDERDEPID", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "DESCRIPTION", "EXPIRATIONTIME", "TAGCODE", "TAXPRICE", "TAXSUM", "DETAILUNITNAME", "EXTENDINT4", "EXTENDINT5", "EXTENDSTRING5", "EXTENDSTRING6", "ENABLESN", "SNCODE", "NEWHOUSENAME", "OLDHOUSENAME", "PERSONNAME", "SHEETCODE") AS 
  SELECT
 A.ID,
 A.GUID,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.MATERIALSPECIFICATION,
 A.DETAILCOUNT,
 A.DETAILUNIT,
 A.STOREID,
 A.STORELOCATIONID,
 A.STORELOCATIONCODE,
 A.STORELOCATIONNAME,
 A.PROVIDERDEPID,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.ZTID,
 A.NOTAXPRICE,
 A.TAXRATE,
 A.NOTAXSUM,
 A.DESCRIPTION,
 A.EXPIRATIONTIME,
 A.TAGCODE,
 A.TAXPRICE,
 A.TAXSUM,
 A.DETAILUNITNAME,
 A.EXTENDINT4,
 A.EXTENDINT5,
 A.EXTENDSTRING5,
 A.EXTENDSTRING6,
 A.ENABLESN,
 A.SNCODE,
 C.NAME AS NEWHOUSENAME,
 E.NAME AS OLDHOUSENAME,
 F.NAME AS PERSONNAME,
 J.CODE AS SHEETCODE
FROM WZ_SHEETDETAIL A
LEFT JOIN BASE_WAREHOUSE C ON A.STOREID=C.ID --移动后库房
LEFT JOIN BASE_WAREHOUSE E ON A.EXTENDINT4=E.ID--移动前库房
LEFT JOIN BASE_PERSON F ON A.CREATOR=F.ID
LEFT JOIN WZ_SHEET J ON A.SHEETID=J.ID
WHERE J.KINDID=161 AND A.EXTENDINT8=1
;
--------------------------------------------------------
--  DDL for View V_YWDFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_YWDFORAPI" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "ORDERNUM", "RECEIVENUM", "USEDDEPARTID", "STOREMANID", "USEDMANID", "PROVIDERDEPID", "EXTENDINT1", "EXTENDINT2", "EXTENDINT3", "EXTENDINT4", "EXTENDSTRING6", "EXTENDSTRING8", "OWNERDEP", "PERSONNAME", "DEPNAME", "STATUSNAME") AS 
  SELECT
 A.ID,
 A.GUID,
 A.NAME,
 A.CODE,
 A.KINDID,
 A.TYPEID,
 A.DUTYID,
 A.DEPARTID,
 A.ROUTEID,
 A.ROUTE_STEPID,
 A.ROLEID,
 A.RELATESHEET,
 A.SUBMITMANID,
 A.SUBMITTIME,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.UPDATOR,
 A.UPDATEDATE,
 A.ZTID,
 A.ORDERNUM,
 A.RECEIVENUM,
 A.USEDDEPARTID,
 A.STOREMANID,
 A.USEDMANID,
 A.PROVIDERDEPID,
 A.EXTENDINT1,
 A.EXTENDINT2,
 A.EXTENDINT3,
 A.EXTENDINT4,
 A.Extendstring6,
 A.Extendstring8,
 A.OWNERDEP,
 B.NAME AS PERSONNAME,
 C.NAME AS DEPNAME,
 D.NAME AS STATUSNAME
 FROM WZ_SHEET A LEFT JOIN BASE_PERSON B ON A.CREATOR=B.ID
 LEFT JOIN BASE_ORGANIZATION C ON A.DEPARTID=C.ID
 LEFT JOIN BASE_DICTIONARY D ON A.STATUS=D.ID
 WHERE A.STATUS=39 AND A.KINDID=161
;
--------------------------------------------------------
--  DDL for View V_YWLIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_YWLIST" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "TAGCODE", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "STORECOUNT", "DETAILUNIT", "CURRENCYUNIT", "STOREID", "STORELOCATIONCODE", "STORELOCATIONNAME", "STORELOCATIONID", "PROVIDERDEPID", "STATUS", "MEMO", "ZTID", "NOTAXPRICE", "TAXPRICE", "TAXRATE", "DESCRIPTION", "ORDERNUM", "RECEIVENUM", "PLANDEPARTID", "CATEGORYID", "DETAILPRICE", "DETAILSUM", "OWNERDEP", "PURCHASETYPE", "CREATOR", "CREATEDATE", "DETAILUNITNAME", "HOUSENAME", "HOUSECODE", "ISEQUIPMENT", "ENABLESN", "SNCODE", "OWNERTYPE", "ISCOUNT", "PROVIDERDEPNAME", "EXPIRATIONTIME") AS 
  SELECT
  A.ID,
  A.GUID,
  A.SHEETID,
  A.SHEETDETAILID,
  A.TAGCODE,
  A.MATERIALID,
  A.MATERIALCODE,
  A.MATERIALNAME,
  A.MATERIALBRAND,
  A.MATERIALMODEL,
  A.MATERIALSPECIFICATION,
  A.STORECOUNT,
  A.DETAILUNIT,
  A.CURRENCYUNIT,
  A.STOREID,
  A.STORELOCATIONCODE,
  A.STORELOCATIONNAME,
  A.STORELOCATIONID,
  A.PROVIDERDEPID,
  A.STATUS,
  A.MEMO,
  A.ZTID,
  A.NOTAXPRICE,
  nvl(A.TAXPRICE,0) TAXPRICE ,
  A.TAXRATE,
  A.DESCRIPTION,
  A.ORDERNUM,
  A.RECEIVENUM,
  A.PLANDEPARTID,
  A.CATEGORYID,
  A.DETAILPRICE,
  A.DETAILSUM,
  A.OWNERDEP,
  A.PURCHASETYPE,
  A.CREATOR,
  A.CREATEDATE,
  A.DETAILUNITNAME,
  B.NAME AS HOUSENAME,
  B.CODE AS HOUSECODE,
  A.ISEQUIPMENT,
  A.ENABLESN,
  A.SNCODE,
  A.OWNERTYPE,
 A.STORECOUNT- (SELECT NVL(SUM(WZ_SHEETDETAIL.DETAILCOUNT),0) FROM WZ_SHEETDETAIL LEFT JOIN WZ_SHEET ON wz_sheet.id = wz_sheetdetail.sheetid WHERE wz_sheet.status <> 41 and wz_sheet.kindid=161 AND WZ_SHEETDETAIL.SHEETDETAILID=A.ID) AS ISCOUNT,
 p.name as PROVIDERDEPNAME,
 A.Expirationtime

  FROM WZ_STOCK A
LEFT JOIN BASE_WAREHOUSE B ON A.STOREID=B.ID
LEFT JOIN BASE_PROVIDER P ON A.PROVIDERDEPID=P.ID
/*where a.id not in (
select sheetdetailid
          from wz_sheetdetail
          left join wz_sheet on wz_sheet.id = wz_sheetdetail.sheetid
         where wz_sheet.status <> 41 and wz_sheet.kindid=161
 );*/
;
--------------------------------------------------------
--  DDL for View V_YWLISTFORAPI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_YWLISTFORAPI" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "TAGCODE", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "STORECOUNT", "DETAILUNIT", "CURRENCYUNIT", "STOREID", "STORELOCATIONCODE", "STORELOCATIONNAME", "STORELOCATIONID", "PROVIDERDEPID", "STATUS", "MEMO", "ZTID", "NOTAXPRICE", "TAXPRICE", "TAXRATE", "DESCRIPTION", "ORDERNUM", "RECEIVENUM", "PLANDEPARTID", "CATEGORYID", "DETAILPRICE", "DETAILSUM", "OWNERDEP", "PURCHASETYPE", "CREATOR", "CREATEDATE", "DETAILUNITNAME", "HOUSENAME", "HOUSECODE", "ISEQUIPMENT", "ENABLESN", "SNCODE", "OWNERTYPE", "PROVIDERNAME", "ISCOUNT") AS 
  SELECT
  A.ID,
  A.GUID,
  A.SHEETID,
  A.SHEETDETAILID,
  A.TAGCODE,
  A.MATERIALID,
  A.MATERIALCODE,
  A.MATERIALNAME,
  A.MATERIALBRAND,
  A.MATERIALMODEL,
  A.MATERIALSPECIFICATION,
  A.STORECOUNT,
  A.DETAILUNIT,
  A.CURRENCYUNIT,
  A.STOREID,
  A.STORELOCATIONCODE,
  A.STORELOCATIONNAME,
  A.STORELOCATIONID,
  A.PROVIDERDEPID,
  A.STATUS,
  A.MEMO,
  A.ZTID,
  A.NOTAXPRICE,
  A.TAXPRICE,
  A.TAXRATE,
  A.DESCRIPTION,
  A.ORDERNUM,
  A.RECEIVENUM,
  A.PLANDEPARTID,
  A.CATEGORYID,
  A.DETAILPRICE,
  A.DETAILSUM,
  A.OWNERDEP,
  A.PURCHASETYPE,
  A.CREATOR,
  A.CREATEDATE,
  A.DETAILUNITNAME,
  B.NAME AS HOUSENAME,
  B.CODE AS HOUSECODE,
  A.ISEQUIPMENT,
  A.ENABLESN,
  A.SNCODE,
  A.OWNERTYPE,
  C.NAME AS PROVIDERNAME,
  A.STORECOUNT- (SELECT NVL(SUM(WZ_SHEETDETAIL.DETAILCOUNT),0) FROM WZ_SHEETDETAIL LEFT JOIN WZ_SHEET ON wz_sheet.id = wz_sheetdetail.sheetid WHERE wz_sheet.status <> 41 and wz_sheet.kindid=161 AND WZ_SHEETDETAIL.SHEETDETAILID=A.ID) AS ISCOUNT
  FROM WZ_STOCK A
LEFT JOIN BASE_WAREHOUSE B ON A.STOREID=B.ID
LEFT JOIN BASE_PROVIDER C ON A.PROVIDERDEPID=C.ID ORDER BY ID DESC
;
--------------------------------------------------------
--  DDL for View V_ZCD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ZCD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ZTID", "ORDERNUM", "RECEIVENUM", "STOREMANID", "USEDMANID", "PROVIDERDEPID", "OWNERDEP", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "EXTENDSTRING6", "EXTENDINT1", "STATUSNAME", "PERSONNAME", "PROVIDERNAME", "DEPNAME", "EXTENDSTRING7", "URL") AS 
  SELECT
 A.ID,
 A.GUID,
 A.NAME,
 A.CODE,
 A.KINDID,
 A.TYPEID,
 A.DUTYID,
 A.DEPARTID,
 A.ROUTEID,
 A.ROUTE_STEPID,
 A.ROLEID,
 A.RELATESHEET,
 A.SUBMITMANID,
 A.SUBMITTIME,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.ZTID,
 A.ORDERNUM,
 A.RECEIVENUM,
/* A.USEDDEPARTID,*/
 A.STOREMANID,
 A.USEDMANID,
 A.PROVIDERDEPID,
 A.OWNERDEP,
 A.EXTENDSTRING1,--供应商
 A.EXTENDSTRING2,--库存组织
 A.EXTENDSTRING3,--订单类型
 A.EXTENDSTRING4,--业务实体
 A.EXTENDSTRING5,--入库单号
 A.EXTENDSTRING6,--接收号
 A.EXTENDINT1,
 B.NAME AS STATUSNAME,
 C.NAME AS PERSONNAME,
 D.NAME AS PROVIDERNAME,
 E.NAME AS DEPNAME,
 /*F.CODE AS HOUSECODE,*/
 A.EXTENDSTRING7， --ERP接收单号
A.url
 FROM WZ_SHEET A LEFT JOIN BASE_DICTIONARY B ON A.STATUS=B.ID
 LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID
 LEFT JOIN BASE_PROVIDER D ON A.PROVIDERDEPID=D.ID
 LEFT JOIN BASE_ORGANIZATION E ON A.DEPARTID=E.ID
 /*INNER JOIN BASE_WAREHOUSE F ON F.ID=(SELECT STOREID FROM WZ_SHEETDETAIL WHERE sheetid=A.ID AND ROWNUM=1)*/

 WHERE A.KINDID=835
;
--------------------------------------------------------
--  DDL for View V_ZCDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ZCDETAILS" ("HOUSENAME", "ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "DETAILCOUNT", "DETAILUNIT", "CURRENCYUNIT", "STOREID", "PROVIDERDEPID", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "UPDATOR", "UPDATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "MATERIALSPECIFICATION", "DESCRIPTION", "EXPIRATIONTIME", "STORELOCATIONCODE", "TAGCODE", "TAXPRICE", "TAXSUM", "STORELOCATIONID", "PLANDEPARTID", "DETAILUNITNAME", "ISEQUIPMENT", "ENABLESN", "SNCODE", "EXTENDFLOAT1", "STORELOCATIONNAME", "FLNAME", "JSCODE") AS 
  SELECT
 C.NAME AS HOUSENAME,
 A.ID,
 A.GUID,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.DETAILCOUNT,
 A.DETAILUNIT,
 A.CURRENCYUNIT,
 A.STOREID,
 A.PROVIDERDEPID,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.UPDATOR,
 A.UPDATEDATE,
 A.ZTID,
 A.NOTAXPRICE,
 A.TAXRATE,
 A.NOTAXSUM,
 A.MATERIALSPECIFICATION,
 A.DESCRIPTION,
 A.EXPIRATIONTIME,
 A.STORELOCATIONCODE,
 A.TAGCODE,
 A.TAXPRICE,
 A.TAXSUM,
 A.STORELOCATIONID,
 A.PLANDEPARTID,
 A.DETAILUNITNAME,
 A.ISEQUIPMENT,
 A.ENABLESN,
 A.SNCODE,
 A.EXTENDFLOAT1,
 A.STORELOCATIONNAME,
 E.NAME AS FLNAME,
 F.CODE AS JSCODE

FROM WZ_SHEETDETAIL A

LEFT JOIN BASE_WAREHOUSE C ON A.STOREID=C.ID
LEFT JOIN WZ_SHEET D ON A.SHEETID=D.ID
LEFT JOIN BASE_SPAREPARTSCATE E ON A.CATEGORYID=E.ID
LEFT JOIN BASE_DICTIONARY F ON A.OWNERTYPE=F.ID
WHERE D.KINDID=835
;
--------------------------------------------------------
--  DDL for View V_ZJTKDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ZJTKDETAILS" ("ID", "SHEETID", "MATERIALCODE", "MATERIALNAME", "MATERIALID", "MATERIALMODEL", "MATERIALSPECIFICATION", "STOREID", "STORELOCATIONID", "STORELOCATIONNAME", "STORELOCATIONCODE", "DESCRIPTION", "DETAILUNITNAME", "CODE", "NOTAXPRICE", "PROVIDERDEPID", "PROVIDERNAME", "DETAILCOUNT", "HAVETKCOUNT", "ZTID", "WAREHOUSECODE", "NAME", "OWNERTYPE", "HASCJ") AS 
  select a.id,
       a.sheetid,
       a.materialcode,
       a.materialname,
       a.materialid,
       a.materialmodel,
       a.materialspecification,
       a.storeid,
       a.storelocationid,
       a.storelocationname,
       a.storelocationcode,
       a.description,--物料描述
       a.detailunitname,--单位名称
       b.code,
       a.notaxprice,
       a.providerdepid,
       c.name PROVIDERNAME,
       a.detailcount,
       (select nvl(sum(c.detailcount),0) from wz_sheetdetail c where c.sheetdetailid=a.id) as havetkcount,
       a.ztid,
       d.code warehousecode,
       e.name, 
       a.ownertype,
       CASE WHEN  a.EXTENDINT6=1 THEN  '是' ELSE '否' END  AS HasCJ
       
  from wz_sheetckdetail a
  left join wz_sheet_ck b on a.sheetid = b.id
  left join base_provider c on a.providerdepid=c.id
  left join base_warehouse d on a.storeid=d.id
  left join base_warehouse e on a.storelocationid=e.id
;
--------------------------------------------------------
--  DDL for View V_ZRD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ZRD" ("ID", "GUID", "NAME", "CODE", "KINDID", "TYPEID", "DUTYID", "DEPARTID", "PROVIDERDEPID", "ROUTEID", "ROUTE_STEPID", "ROLEID", "RELATESHEET", "SUBMITMANID", "SUBMITTIME", "STATUS", "MEMO", "CREATOR", "CREATEDATE", "ORDERNUM", "RECEIVENUM", "STATUSNAME", "PERSONNAME", "DEPNAME", "EXTENDSTRING1", "EXTENDSTRING2", "EXTENDSTRING3", "EXTENDSTRING4", "EXTENDSTRING5", "ZTID", "EXTENDINT1", "EXTENDINT2", "URL", "DBNUM", "TYPENAME", "EXTENDSTRING6") AS 
  SELECT
  A.ID,
  A.GUID,
  A.NAME,
  A.CODE,
  A.KINDID,
  A.TYPEID,
  A.DUTYID,
  A.DEPARTID,
  A.PROVIDERDEPID,
  A.ROUTEID,
  A.ROUTE_STEPID,
  A.ROLEID,
  A.RELATESHEET,
  A.SUBMITMANID,
  A.SUBMITTIME,
  A.STATUS,
  A.MEMO,
  A.CREATOR,
  A.CREATEDATE,
  A.ORDERNUM,
  A.RECEIVENUM,
  B.NAME AS STATUSNAME,
  C.NAME AS PERSONNAME,
  D.NAME AS DEPNAME,
  A.EXTENDSTRING1,
  A.EXTENDSTRING2,
  A.EXTENDSTRING3,
  A.EXTENDSTRING4,
  A.EXTENDSTRING5,
  A.ZTID,
  A.EXTENDINT1,
  A.EXTENDINT2,
  A.URL,
  E.CODE AS DBNUM,
F.NAME as TYPENAME,
A.EXTENDSTRING6
 FROM WZ_SHEET_RK A
  LEFT JOIN BASE_DICTIONARY B ON A.STATUS=B.ID
  LEFT JOIN BASE_PERSON C ON A.CREATOR=C.ID
  LEFT JOIN BASE_ORGANIZATION D ON A.DEPARTID=D.ID
  LEFT JOIn WZ_SHEET E ON A.EXTENDINT2=E.ID AND E.KINDID=506
  LEFT JOIN BASE_DICTIONARY F ON A.TYPEID=F.ID
  WHERE A.KINDID=832
;
--------------------------------------------------------
--  DDL for View V_ZRDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "V_ZRDETAILS" ("ID", "GUID", "SHEETID", "SHEETDETAILID", "CATEGORYID", "MATERIALID", "MATERIALCODE", "MATERIALNAME", "MATERIALBRAND", "MATERIALMODEL", "MATERIALSPECIFICATION", "CREATOR", "CREATEDATE", "ZTID", "NOTAXPRICE", "TAXRATE", "NOTAXSUM", "DESCRIPTION", "TAXPRICE", "TAXSUM", "ISEQUIPMENT", "OWNERTYPE", "ENABLESN", "SNCODE", "DETAILUNITNAME", "EXTENDSTRING1", "NAME", "DETAILCOUNT", "PROVIDERNAME", "SUBTOTALCOUNT", "JSTYPE", "EXTENDFLOAT1", "LOCATIONNAME", "SUMCOUNT", "STOREID") AS 
  SELECT A.ID,
       A.GUID,
       A.SHEETID,
       A.SHEETDETAILID,
       A.CATEGORYID,
       A.MATERIALID,
       A.MATERIALCODE,
       A.MATERIALNAME,
       A.MATERIALBRAND,
       A.MATERIALMODEL,
       A.MATERIALSPECIFICATION,
       A.CREATOR,
       A.CREATEDATE,
       A.ZTID,
       A.NOTAXPRICE,
       A.TAXRATE,
       A.NOTAXSUM,
       A.DESCRIPTION,
       A.TAXPRICE,
       A.TAXSUM,
       A.ISEQUIPMENT,
       A.OWNERTYPE,
       A.ENABLESN,
       A.SNCODE,
       A.DETAILUNITNAME,
       A.EXTENDSTRING1,
       wh.name,
       A.DETAILCOUNT,
       B.EXTENDSTRING1 AS PROVIDERNAME,
       (SELECT SUM(E.SUBDETAILCOUNT) FROM WZ_SHEETRKSUBDETAIL E WHERE E.DETAILID=A.ID) AS SUBTOTALCOUNT,
       C.NAME AS JSTYPE,
       A.EXTENDFLOAT1,
       (select wm_concat(to_char('[' || D.STORELOCATIONNAME) || ']') from wz_sheetrksubdetail D where D.detailid=A.Id) AS LOCATIONNAME,
       (SELECT NVL( SUM(Z.SUBDETAILCOUNT) ,0)AS Expr1 FROM WZ_SHEETRKSUBDETAIL Z WHERE (Z.DETAILID=A.ID)) AS SUMCOUNT,
       wh.id as storeID
   FROM WZ_SHEETRKDETAIL A
  LEFT JOIN WZ_SHEET_RK B ON A.SHEETID = B.ID
  LEFT JOIN BASE_DICTIONARY C ON A.OWNERTYPE=C.ID
  left join base_warehouse wh on A.EXTENDSTRING1=wh.code and A.ZTID=wh.ztid
  WHERE B.KINDID=832
;
REM INSERTING into ACT_EVT_LOG
SET DEFINE OFF;
REM INSERTING into ACT_GE_BYTEARRAY
SET DEFINE OFF;
Insert into ACT_GE_BYTEARRAY (ID_,REV_,NAME_,DEPLOYMENT_ID_,GENERATED_) values ('545002',1,'source',null,null);
REM INSERTING into ACT_GE_PROPERTY
SET DEFINE OFF;
Insert into ACT_GE_PROPERTY (NAME_,VALUE_,REV_) values ('schema.version','5.22.0.0',1);
Insert into ACT_GE_PROPERTY (NAME_,VALUE_,REV_) values ('schema.history','create(5.22.0.0)',1);
Insert into ACT_GE_PROPERTY (NAME_,VALUE_,REV_) values ('next.dbid','547501',220);
REM INSERTING into ACT_HI_ACTINST
SET DEFINE OFF;
REM INSERTING into ACT_HI_ATTACHMENT
SET DEFINE OFF;
REM INSERTING into ACT_HI_COMMENT
SET DEFINE OFF;
REM INSERTING into ACT_HI_DETAIL
SET DEFINE OFF;
REM INSERTING into ACT_HI_IDENTITYLINK
SET DEFINE OFF;
REM INSERTING into ACT_HI_PROCINST
SET DEFINE OFF;
REM INSERTING into ACT_HI_TASKINST
SET DEFINE OFF;
REM INSERTING into ACT_HI_VARINST
SET DEFINE OFF;
REM INSERTING into ACT_ID_GROUP
SET DEFINE OFF;
REM INSERTING into ACT_ID_INFO
SET DEFINE OFF;
REM INSERTING into ACT_ID_MEMBERSHIP
SET DEFINE OFF;
REM INSERTING into ACT_ID_USER
SET DEFINE OFF;
REM INSERTING into ACT_PROCDEF_INFO
SET DEFINE OFF;
REM INSERTING into ACT_RE_DEPLOYMENT
SET DEFINE OFF;
REM INSERTING into ACT_RE_MODEL
SET DEFINE OFF;
REM INSERTING into ACT_RE_PROCDEF
SET DEFINE OFF;
REM INSERTING into ACT_RU_EVENT_SUBSCR
SET DEFINE OFF;
REM INSERTING into ACT_RU_EXECUTION
SET DEFINE OFF;
REM INSERTING into ACT_RU_IDENTITYLINK
SET DEFINE OFF;
REM INSERTING into ACT_RU_JOB
SET DEFINE OFF;
REM INSERTING into ACT_RU_TASK
SET DEFINE OFF;
REM INSERTING into ACT_RU_VARIABLE
SET DEFINE OFF;
REM INSERTING into BASE_APPLYDEP
SET DEFINE OFF;
REM INSERTING into BASE_BUTTON
SET DEFINE OFF;
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('accept','验收',1,'icon-standard-bricks',null,210,'do_accept()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('accredit','授权',1,'icon-standard-bricks',null,250,'do_accredit()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('add','新增',1,'icon-standard-add',null,120,'do_add()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('audit','审核',1,'icon-standard-bricks','NULL',185,'do_audit()',0,1,'数据初始化5',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('bind','绑定',1,'icon-standard-bricks',null,230,'do_bind()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('browse','浏览',1,'icon-standard-world','NULL',101,'do_browse()',0,0,'数据初始化678',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('cancel','取消',1,'icon-standard-bricks',null,270,'do_cancel()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('confirm','确认',1,'icon-standard-bricks','NULL',200,'do_confirm()',0,1,'数据初始化88',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('copy','复制',1,'icon-standard-page-white-copy','NULL',340,'do_copy()',0,1,'数据初始化t',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('delete','删除',1,'icon-standard-delete','NULL',140,'do_delete()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('detail','详细',1,'icon-standard-bricks',null,160,'do_detail()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('download','下载',1,'icon-standard-page-white-put','NULL',330,'do_download()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('edit','编辑',1,'icon-standard-pencil',null,130,'do_edit()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('executive','执行',1,'icon-standard-bricks','NULL',220,'do_executive()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('export','导出',1,'icon-standard-bricks','NULL',320,'do_export()',0,1,'数据初始化-',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('hhh','test1',1,'icon-standard-bricks','NULL',100,'hhh888()',0,1,'11888',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('inport','导入',1,'icon-standard-bricks','NULL',310,'do_inport()',0,1,'数据初始化-',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('lock','锁定',1,'icon-standard-bricks',null,260,'do_lock()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('print','打印',1,'icon-hamburg-print','NULL',280,'do_print()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('print2','打印2',1,'icon-standard-printer','NULL',290,'do_print2()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('print3','打印3',1,'icon-standard-printer','NULL',300,'do_print3()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('refresh','刷新',1,'icon-standard-arrow-refresh',null,150,'do_refresh()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('resetpwd','密码重置',1,'icon-standard-lock-edit','NULL',820,'do_resetpwd()',0,1,'密码重置',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('rolerights','角色权限',1,'icon-standard-key','NULL',810,'do_rolerights()',0,1,'rolerights',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('search','查询',1,'icon-standard-zoom','NULL',110,'do_search()',0,1,'数据初始化88',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('submit','提交',1,'icon-standard-bricks',null,170,'do_submit()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('unaudit','反审',1,'icon-standard-bricks','NULL',190,'do_unaudit()',0,1,'数据初始化99',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_BUTTON (CODE,NAME,BUTTONTYPE,ICON,ICONURL,SORT,JSEVENT,SPLIT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,MENUCODE,URL,AUTHIDENTITY) values ('unbind','解绑',1,'icon-standard-bricks',null,240,'do_unbind()',0,1,'数据初始化',0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('08-11-2015 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
REM INSERTING into BASE_CATEGORY_ASSET
SET DEFINE OFF;
REM INSERTING into BASE_COMPANY
SET DEFINE OFF;
Insert into BASE_COMPANY (COMPANYID,COMPANYCODE,COMPANYNAME,SHORTNAME,COMPANYTYPE,SORT,ENABLED,REMARK,MANAGER,TEL,PHONE,FAX,EMAIL,ZIPCODE,WEBSITE,CREATOR,ZTID,CREATEDATE,UPDATOR,UPDATEDATE,PARENTID,LEVELCOUNT,LEVELCODE) values (100001,'010','中国中煤能源股份有限公司采购中心','中国中煤能源股份有限公司采购中心',1,1,1,null,null,null,null,null,null,null,null,null,1000,to_date('05-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('01-01-1900 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,1,'100001');
REM INSERTING into BASE_COSTUPDATE
SET DEFINE OFF;
REM INSERTING into BASE_DICTIONARY
SET DEFINE OFF;
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (888,'5d993da2-3ea4-4d73-8c2f-722eeac8af60','aaaaa','测试',33,null,null,null,2,1,null,1010,to_date('11-10-2018 20:05:28','dd-mm-yyyy hh24:mi:ss'),1010,to_date('11-10-2018 22:40:37','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (889,'b48267b8-2c57-440f-bdae-ec177d34ca08','aaaaaa','测试流程',30,null,null,null,1,1,null,1010,to_date('11-10-2018 20:06:29','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (306,'d7f53a90-8587-4f1c-a851-1ba1482edacf','wasteType','废料类型',0,null,null,null,1,1,null,1010,to_date('23-11-2016 09:35:11','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (307,'b9e1db34-d123-40b0-883c-d2735e6046e2','floorMaterial_PP','PP落地料',306,null,null,null,1,1,null,1010,to_date('23-11-2016 09:53:37','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-11-2016 10:41:04','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (308,'e36f1b65-4927-42ad-b027-8269bd62ecdf','powderMaterial_PP','PP粉料',306,null,null,null,1,2,null,1010,to_date('23-11-2016 09:55:04','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-11-2016 10:40:56','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (309,'4a17b37c-fc7d-4b4d-938e-72dcea60830e','chunkMaterial_PP','PP大块料',306,null,null,null,1,3,null,1010,to_date('23-11-2016 09:56:28','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-11-2016 10:41:13','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (310,'d0955499-15a8-4d06-ab18-dd4095487fb9','goldTestMaterial_PP','PP金检料',306,null,null,null,1,4,null,1010,to_date('23-11-2016 09:58:06','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-11-2016 10:41:25','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (315,'d9f195ec-250e-4e65-a95b-a6b6582e6178','TK','物资退库单',33,null,null,null,1,4,null,1010,to_date('24-11-2016 10:53:36','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-08-2017 09:36:33','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (32,'NULL','RKLC','物资入库',30,1,'NULL',0,1,2,'测试3',0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-08-2017 09:48:09','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (33,'NULL','ReceiptType','单据种类',0,1,'NULL',0,0,0,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),8001,to_date('12-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (316,'2deafdb9-ae8c-4abf-b888-4b0a862c0484','TKLC','物资退库',30,null,null,null,1,5,null,1010,to_date('24-11-2016 10:54:03','dd-mm-yyyy hh24:mi:ss'),1010,to_date('06-04-2017 09:56:21','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (35,'NULL','RK','物资入库单',33,1,'NULL',0,1,2,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-08-2017 09:34:21','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (36,'NULL','CK','物资出库单',33,1,'NULL',0,1,3,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('23-02-2017 15:57:33','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (37,'NULL','CKLC','物资出库',30,1,'NULL',0,1,4,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('23-02-2017 15:59:03','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (38,'NULL','ReceiptStatus','单据状态',0,1,'NULL',0,1,3,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('16-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (39,'NULL','ZDZ','制单中',38,1,'NULL',0,1,1,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('17-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (40,'NULL','SHZ','审核中',38,1,'NULL',0,1,2,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (41,'NULL','YWC','已完成',38,1,'NULL',0,1,3,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('19-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (42,'NULL','YZZ','已终止',38,1,'NULL',0,0,5,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('08-10-2018 16:37:51','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (628,'9d13454d-493d-4cd2-9bef-aa44b4018a10','FundSource','资金来源',0,null,null,null,1,1,null,1010,to_date('07-07-2017 18:03:17','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (629,'a8f1a7c6-e39b-4072-afdb-3cb13299f87b','FS_Product','生产',628,null,null,null,1,1,null,1010,to_date('07-07-2017 18:04:20','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (630,'04afc1f2-d4c5-443a-8cd9-c8d34d0064ed','FS_BaseConstruction','基建',628,null,null,null,1,1,null,1010,to_date('07-07-2017 18:05:02','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (690,'3da6b6f4-28fe-4064-9e90-c7c079c16653','SQTK','申请退库',688,null,null,null,1,1,null,1010,to_date('01-08-2017 09:26:35','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (650,'3ae168eb-6acb-457f-b3cc-450ca01f057f','WZLLD','物资领料单',33,null,null,null,1,3,null,1010,to_date('10-07-2017 15:25:22','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-08-2017 09:35:39','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (651,'d131ee53-d447-489a-a413-c81f3658f9f4','WZLLDLC','物资领料',30,null,null,null,1,3,null,1010,to_date('10-07-2017 15:29:09','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (669,'f5b431d4-08c5-49e4-8efb-d2a891b1348a','IntoStock','调拨入库',44,null,null,null,1,16,null,1010,to_date('19-07-2017 09:03:40','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (769,'d06e1383-6606-4e0e-80f3-1f6989b77c5a','OrderStatus','采购订单状态',0,null,null,null,1,22,null,3413,to_date('21-09-2017 14:24:55','dd-mm-yyyy hh24:mi:ss'),3413,to_date('21-09-2017 14:25:15','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (773,'734bd860-a889-45f3-8d38-7cfc37987814','WaitCk','待出库',38,null,null,null,1,7,null,1010,to_date('21-09-2017 17:26:59','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (774,'e0026974-fd58-4be2-889e-67d4d2f6d01e','WaitRK','待入库',38,null,null,null,1,8,null,1010,to_date('21-09-2017 17:27:33','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (788,'7576afda-b205-496a-922f-cd5a9c616300','RKType','入库类型',0,null,null,null,1,23,null,1010,to_date('23-09-2017 08:46:07','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (748,'4eed28f2-c21f-43e7-b663-daede309c8ec','YCK','已出库',38,null,null,null,1,3,null,1010,to_date('19-09-2017 15:38:55','dd-mm-yyyy hh24:mi:ss'),1010,to_date('19-09-2017 15:49:31','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (770,'562b0bd2-6b56-4c05-a4f1-22bcfdac98d0','Normal','正常',769,null,null,null,1,1,null,3413,to_date('21-09-2017 14:26:26','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (771,'ff00a0b3-2ccf-49b1-a186-8d19545fbe8d','Invalid','失效',769,null,null,null,1,2,null,3413,to_date('21-09-2017 14:28:06','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (772,'8f7f0ce9-7b52-4cb6-ba3f-685cd63d331c','dbck','调拨出库',447,null,null,null,1,3,null,3413,to_date('21-09-2017 15:19:31','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (768,'dd76e872-82b2-43a9-b2e7-a37e21793fd4','ZJTKLC','直接退库流程',30,null,null,null,1,1,null,1010,to_date('20-09-2017 18:55:26','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (728,'9703b3db-363b-46ad-8e53-03b03fe2e32b','YQR','已确认',38,null,null,null,1,1,null,1010,to_date('12-09-2017 15:02:46','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (43,'NULL','YGD','已归档',38,1,'NULL',0,0,5,'c',0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('08-10-2018 16:38:09','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (44,'NULL','buttonPower','按钮权限',0,1,'NULL',0,1,1,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('22-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (45,'NULL','addDetails','新增明细',44,3,'NULL',0,1,3,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('23-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (46,'NULL','editDetails','编辑明细',44,4,'NULL',0,1,4,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('24-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (47,'NULL','saveSheet','保存单据',44,1,'NULL',0,1,1,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('25-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (48,'NULL','deleteDetails','删除明细',44,5,'NULL',0,1,5,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('26-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (49,'NULL','submit','提交',44,7,'NULL',0,1,7,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('27-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (50,'NULL','review','审核',44,8,'NULL',0,1,8,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('28-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (51,'NULL','importfiles','附件',44,9,'NULL',0,1,9,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('29-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (325,'275debc0-6ea4-4336-83f4-53840bfe52a6','GiftRK','赠送品入库单',33,null,null,null,1,9,null,1010,to_date('28-11-2016 10:14:56','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-08-2017 09:39:38','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (327,'53009627-96c5-401a-be8a-b561411337a1','floorMaterial_PE','PE落地料',306,null,null,null,1,5,null,1010,to_date('28-11-2016 10:41:47','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (328,'f78a610c-0641-424e-a6d3-b8160b339758','powderMaterial_PE','PE粉料',306,null,null,null,1,6,null,1010,to_date('28-11-2016 10:42:27','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (329,'7ace40c1-c96e-4c12-bc01-263b88a0be4d','chunkMaterial_PE','PE大块料',306,null,null,null,1,7,null,1010,to_date('28-11-2016 10:42:47','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (668,'3e6958c1-ff1c-42b6-b6bd-9d6281b06c6a','outStock','调拨出库',44,null,null,null,1,15,null,1010,to_date('19-07-2017 09:03:26','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (346,'c8ccaf21-aace-4eb8-bcdb-397892222148','ERP','ERP',345,null,null,null,1,1,null,1010,to_date('06-12-2016 16:24:35','dd-mm-yyyy hh24:mi:ss'),1010,to_date('21-07-2017 14:31:49','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (347,'28643b98-534f-4afe-963f-7760ea6027cc','mobileOffice','移动办公',345,null,null,null,1,2,null,1010,to_date('06-12-2016 16:25:30','dd-mm-yyyy hh24:mi:ss'),1010,to_date('21-07-2017 14:33:50','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (708,'e47262fa-3b26-474c-baa3-f8f6e01bb0cc','ZSP','赠送品',608,null,null,null,1,3,null,1010,to_date('30-08-2017 09:40:53','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (350,'d979d35a-492b-4dbb-bf0a-d6df9d404f55','WMS','仓储管理系统',345,null,null,null,1,5,null,1010,to_date('06-12-2016 16:27:45','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (101,'00000000-0000-0000-0000-000000000000','importDetails','导入明细',44,6,null,null,1,6,null,1010,to_date('23-09-2016 17:08:33','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (688,'075f0e52-9f5c-426f-81a4-b44671de1400','TKType','退库类型',0,null,null,null,1,1,null,1010,to_date('01-08-2017 09:25:15','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (689,'5dfdda4b-89b4-4e62-956b-208f5f41bf79','ZJTK','直接退库',688,null,null,null,1,1,null,1010,to_date('01-08-2017 09:25:42','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (161,'1fdbca0d-b326-4056-8e44-d74230fa1107','YKYW','移库移位单',33,null,null,null,1,6,null,1010,to_date('13-10-2016 17:15:08','dd-mm-yyyy hh24:mi:ss'),1010,to_date('23-11-2016 11:15:16','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (407,'a46fc71f-60f1-42b7-b7e2-046bbcc342f1','dai','袋',405,null,null,null,1,2,null,1010,to_date('06-01-2017 16:27:01','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (408,'2f3948df-5447-4579-a5c6-e51694156100','dui','对',405,null,null,null,1,3,null,1010,to_date('06-01-2017 16:27:18','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (446,'53c0782b-411f-4ad1-8733-5230933c9d3a','WZSQ','物资申请',30,null,null,null,1,13,null,1010,to_date('21-02-2017 09:17:19','dd-mm-yyyy hh24:mi:ss'),1010,to_date('23-02-2017 15:58:44','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (330,'55d79bb6-3300-4998-b718-66b52e96e544','goldTestMaterial_PE','PE金检料',306,null,null,null,1,8,null,1010,to_date('28-11-2016 10:43:11','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (348,'e25dbee2-8647-44d6-a3e7-2df1005d0c67','masterData','中煤主数据系统',345,null,null,null,1,3,null,1010,to_date('06-12-2016 16:25:57','dd-mm-yyyy hh24:mi:ss'),1010,to_date('21-07-2017 14:53:50','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (102,'00000000-0000-0000-0000-000000000000','editSheet','编辑单据',44,2,null,null,1,2,null,1010,to_date('23-09-2016 17:09:35','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (409,'c191f42c-dccd-4a1a-a426-58f3e992bccb','duo','垛',405,null,null,null,1,4,null,1010,to_date('06-01-2017 16:27:43','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (813,'7f7bd72a-547f-4002-bdbb-2745782b8c4a','test','测试',0,null,null,null,2,12,null,1010,to_date('10-07-2018 16:21:37','dd-mm-yyyy hh24:mi:ss'),1010,to_date('10-07-2018 16:22:07','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (814,'9a581134-bce7-430c-94aa-cae38b57a889','test1','1',813,null,null,null,1,1,null,1010,to_date('10-07-2018 16:22:03','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (828,'f73f6d75-885c-4f11-b4cf-b4e60a260356','exprotPdResult','导出盘点明细',44,null,null,null,1,null,null,1010,to_date('17-07-2018 15:46:44','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (948,'71bf5196-dd41-41c2-994b-e7755c126d78','importPdResult','导入盘点结果',44,null,null,null,1,null,null,1010,to_date('17-07-2018 15:46:44','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);

Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (843,'1433681b-5683-429a-8066-2103b073fde6','split','拆单',44,null,null,null,1,20,null,1010,to_date('09-07-2018 10:55:36','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (841,'931370cc-807b-46c9-ac89-6bf1fa24b224','labelPrint','标签打印',44,null,null,null,1,null,null,1010,to_date('09-07-2018 10:39:50','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (837,'3f96e070-665e-45e6-a512-4c6e3891055a','addPlanDetail','添加计划明细',44,null,null,null,1,1,'1',1010,to_date('29-06-2018 15:23:27','dd-mm-yyyy hh24:mi:ss'),1010,to_date('29-06-2018 15:23:53','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (0,'null',' ','数据字典分类',null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (789,'00589e51-d445-4765-a1de-73611a7a4ef8','JSRK','接收入库',788,null,null,null,1,1,null,1010,to_date('23-09-2017 08:47:49','dd-mm-yyyy hh24:mi:ss'),1010,to_date('10-07-2018 16:21:16','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (836,'98e8a957-2744-4bcf-817c-c89ab2326c34','addNoPlanDetail','添加无计划明细',44,null,null,null,1,1,'1',1010,to_date('29-06-2018 15:24:40','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (835,'f9c478c9-18e7-4959-8115-658639fcad4e','wzzc','杂出',33,null,null,null,1,null,null,1010,to_date('03-07-2018 16:48:15','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (834,'c9aaefe3-cda6-4da8-8d58-1cfd52ae9351','WZZC','杂出单',30,null,null,null,1,null,null,1010,to_date('03-07-2018 16:49:19','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (833,'da1daf33-fb80-422a-8d06-54caa6ad3d19','addPlanOther','填写计划',44,null,null,null,1,null,null,1010,to_date('06-07-2018 17:33:13','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (832,'4469d593-6746-4622-962e-b6fc551f7aaf','ZR','物资杂入单',33,null,null,null,1,null,null,1010,to_date('05-07-2018 14:23:26','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (831,'c6d6b8c3-3534-4ccd-8942-74e486a66fa3','ZRLC','物资杂入',30,null,null,null,1,null,null,1010,to_date('05-07-2018 14:24:45','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (790,'00498db5-ad7f-4ba2-8d6b-9e2f907c6c35','DBRK','调拨入库',788,null,null,null,1,2,null,1010,to_date('23-09-2017 08:48:39','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (815,'b8fabfe4-da5b-4096-95ab-a5c4ca3427e1','123312','台',405,null,null,null,1,null,null,1010,to_date('12-07-2018 10:26:51','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (848,'null',' ','数据字典分类',null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (30,'NULL','ReceiptProcess','单据流程',0,1,'NULL',1,1,1,null,0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,'NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL',0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (868,'7885687e-c6c7-4935-9f79-ae7abb254359','32432','23',249,null,null,null,2,null,null,1010,to_date('28-09-2018 10:40:23','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-09-2018 10:40:30','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (246,'d87d5e56-dc13-4d35-8c58-6ecf055ff547','KCPD','库存盘点单',33,null,null,null,1,8,null,1010,to_date('26-10-2016 15:42:12','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-08-2017 09:38:52','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (285,'08cb7d3f-79e5-43b9-877c-d5df61b460d3','BatchModify','批量修改',44,null,null,null,1,7,null,1010,to_date('18-11-2016 14:08:31','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (326,'6f371c18-42d9-4064-8d6a-ed499bf71c3a','GIFTRKRoute','赠送品入库',30,null,null,null,1,10,null,1010,to_date('28-11-2016 10:17:38','dd-mm-yyyy hh24:mi:ss'),1010,to_date('11-07-2017 16:45:24','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (353,'082e5f42-c941-43ef-9ab6-41181e35e002','YCX','已冲销',38,null,null,null,0,6,null,1010,to_date('09-12-2016 15:38:45','dd-mm-yyyy hh24:mi:ss'),1010,to_date('08-10-2018 16:38:02','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (267,'f9a4f3b9-54fa-4ea3-9868-30b558a4d0fa','GJDJTJ','根据等级统计',265,null,null,null,1,2,null,1010,to_date('31-10-2016 11:07:57','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (465,'38bad167-84f0-42dc-b6da-352c9f924e6a','wzjcrkd','物资寄存入库单',33,null,null,null,1,10,null,1010,to_date('07-03-2017 10:22:29','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-08-2017 09:40:16','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (486,'173b8806-e6e9-4612-a150-d2d6b2358d42','THLC','物资退货',30,null,null,null,1,6,null,1010,to_date('10-04-2017 09:50:53','dd-mm-yyyy hh24:mi:ss'),1010,to_date('10-04-2017 10:14:12','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (507,'b0face1f-2622-47a6-97f3-951f1cd806bc','WZDB','物资调拨',30,null,null,null,1,7,null,1010,to_date('14-04-2017 12:49:39','dd-mm-yyyy hh24:mi:ss'),1010,to_date('10-10-2018 15:25:39','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (510,'df45a8d6-43ab-45da-a4c5-907391230da8','ZJDB','直接调拨',508,null,null,null,1,1,null,1010,to_date('17-04-2017 10:04:38','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (568,'41362736-5bd6-48cf-aaa1-a7515038fa50','QCJZ','期初建账',33,null,null,null,1,145,null,1010,to_date('22-06-2017 20:07:46','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (569,'8154ad5b-fd2e-486f-9ed2-35582dd4c69a','QCJZLC','期初建账',30,null,null,null,1,134,null,1010,to_date('22-06-2017 20:08:56','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (608,'62ad9d26-b6a4-46cf-8b55-925585702478','JSType','拥有方类型',0,null,null,null,1,21,null,1010,to_date('03-07-2017 14:14:50','dd-mm-yyyy hh24:mi:ss'),1010,to_date('04-07-2017 08:58:49','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (609,'9efa7596-9640-40aa-8d4d-3b0d3a209b40','IsJS','寄售',608,null,null,null,1,1,null,1010,to_date('03-07-2017 14:15:25','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (610,'9bd20d82-c41c-480b-b56a-f1ef113c00aa','NoJs','自有',608,null,null,null,1,2,null,1010,to_date('03-07-2017 14:16:10','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (588,'cbddc4cb-3990-4396-ab29-23c30af3679f','WZJSD','物资接收单',33,null,null,null,1,1,null,1010,to_date('30-06-2017 14:49:47','dd-mm-yyyy hh24:mi:ss'),1010,to_date('30-06-2017 14:50:57','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (589,'4a66ee4d-2b8b-4e37-9ffc-8ecf144c10f6','returnGoods','退货',44,null,null,null,1,14,null,1010,to_date('30-06-2017 14:51:47','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (590,'4a468a44-da93-49dd-b75a-f3f8d5fe7f8d','WZJSLC','物资接收',30,null,null,null,1,1,null,1010,to_date('30-06-2017 14:52:18','dd-mm-yyyy hh24:mi:ss'),1010,to_date('30-06-2017 14:52:36','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (445,'6678b4a5-097f-4146-8169-98c8f611269e','wzsqd','物资申请单',33,null,null,null,1,16,null,1010,to_date('21-02-2017 09:16:51','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-08-2017 09:41:46','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (449,'53ac9240-2a70-45b5-ab9e-e588756aacd8','slck','申领出库',447,null,null,null,1,2,null,1010,to_date('22-02-2017 09:59:45','dd-mm-yyyy hh24:mi:ss'),1010,to_date('22-02-2017 09:59:56','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (466,'d1b2fd2a-8e86-4ff4-aaa1-02c002f89529','wzjcckd','物资寄存出库单',33,null,null,null,1,11,null,1010,to_date('07-03-2017 10:22:48','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-08-2017 09:40:48','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (467,'17b85818-7b08-460c-8bb4-0c18569ca4a8','WZJCRK','物资寄存入库',30,null,null,null,1,11,null,1010,to_date('07-03-2017 10:23:30','dd-mm-yyyy hh24:mi:ss'),1010,to_date('07-03-2017 10:23:52','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (468,'cad1688a-1df5-4617-a3ac-dc508dc7bb83','WZJCCK','物资寄存出库',30,null,null,null,1,12,null,1010,to_date('07-03-2017 10:24:26','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (485,'5510b7c0-de4b-441d-89f2-c618ae332a77','TH','物资退货单',33,null,null,null,1,6,null,1010,to_date('10-04-2017 09:48:28','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-08-2017 09:37:11','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (548,'bf72b1a9-0057-4f82-920c-f883ba12732f','mobileDWMP','mobileDWMP',345,null,null,null,1,7,null,1010,to_date('07-06-2017 09:20:57','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (506,'9991a84c-99ef-43a8-965d-54438fae1f2d','WZDBD','物资调拨申请',33,null,null,null,1,7,null,1010,to_date('14-04-2017 12:39:49','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-08-2017 09:37:57','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (447,'e78b0416-a663-4807-b5b6-a674e0ebf0f5','cktype','出库类型',0,null,null,null,1,20,null,1010,to_date('22-02-2017 09:59:20','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (448,'85189057-d998-47aa-9953-208d983199f7','zjck','直接出库',447,null,null,null,1,1,null,1010,to_date('22-02-2017 09:59:33','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (508,'bb458c31-ef2a-446a-b5be-66e12f7152ef','AllocationStatus','调拨类型',0,null,null,null,1,1,null,1010,to_date('17-04-2017 09:49:49','dd-mm-yyyy hh24:mi:ss'),1010,to_date('17-04-2017 10:04:00','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (405,'ca357f8e-1d14-4d4d-bdf4-16ab765ce91c','materialUnit','物资计量单位',0,null,null,null,1,18,null,1010,to_date('06-01-2017 16:25:09','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (406,'2a0e4725-9c61-46df-a089-39484939328e','kg','千克',405,null,null,null,1,1,null,1010,to_date('06-01-2017 16:25:41','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (107,'00000000-0000-0000-0000-000000000000','BGLC','变更',30,null,null,null,1,46,null,1010,to_date('27-09-2016 11:52:18','dd-mm-yyyy hh24:mi:ss'),1010,to_date('07-03-2017 10:24:04','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (162,'b3a5846d-1c8c-47cc-a03f-34377c077a7d','YW','移库移位',30,null,null,null,1,8,null,1010,to_date('13-10-2016 17:17:49','dd-mm-yyyy hh24:mi:ss'),1010,to_date('21-10-2016 14:45:57','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (265,'568ba0f9-5265-42ab-8acc-d01b95a30607','TJTYPE','统计类型',0,null,null,null,1,1,null,1010,to_date('31-10-2016 11:07:10','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (248,'34dc345d-a11e-4fca-ae7b-aa13672cd521','KCPDDJ','库存盘点',30,null,null,null,1,9,null,1010,to_date('26-10-2016 15:43:56','dd-mm-yyyy hh24:mi:ss'),1010,to_date('10-04-2017 09:49:23','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (345,'e0d16c01-ff8d-4130-83ad-2a1a8f1813a0','relateSystem','相关系统',0,null,null,null,1,18,null,1010,to_date('06-12-2016 16:23:52','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (104,'00000000-0000-0000-0000-000000000000','getBack','找回',44,null,null,null,0,11,null,1010,to_date('23-09-2016 17:10:36','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (103,'00000000-0000-0000-0000-000000000000','reject','驳回',44,11,null,null,1,11,null,1010,to_date('23-09-2016 17:10:10','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (105,'00000000-0000-0000-0000-000000000000','print','打印',44,null,null,null,0,12,null,1010,to_date('26-09-2016 08:58:41','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (106,'00000000-0000-0000-0000-000000000000','BG','产品变更单',33,null,null,null,1,66,null,1010,to_date('27-09-2016 11:51:16','dd-mm-yyyy hh24:mi:ss'),1010,to_date('07-03-2017 10:22:59','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (249,'946d839a-dfeb-48d3-b847-ef84cbb11ace','PDTYPE','盘点类型',0,null,null,null,1,1,null,1010,to_date('27-10-2016 10:56:28','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (250,'15d823da-03ff-4c48-b56e-9bdfa3c22a4c','XHPD','循环盘点',249,null,null,null,1,1,null,1010,to_date('27-10-2016 10:56:49','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (251,'6fe42262-79b0-4c5d-8692-56fdf4908de9','QMPD','期末盘点',249,null,null,null,1,1,null,1010,to_date('27-10-2016 10:57:11','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
Insert into BASE_DICTIONARY (ID,GUID,CODE,NAME,PARENTID,LEVELCOUNT,LEVELCODE,ENDFLAG,STATUS,SORT,MEMO,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDINT5,EXTENDINT6,EXTENDINT7,EXTENDINT8,EXTENDINT9,EXTENDINT10,EXTENDFLOAT1,EXTENDFLOAT2,EXTENDFLOAT3,EXTENDFLOAT4,EXTENDFLOAT5,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,EXTENDSTRING5,EXTENDSTRING6,EXTENDSTRING7,EXTENDSTRING8,EXTENDSTRING9,EXTENDSTRING10,ADDTYPE,BTNFUN) values (266,'bbdc9617-250b-44d7-addf-c585daff41eb','GJWZTJ','根据位置统计',265,null,null,null,1,1,null,1010,to_date('31-10-2016 11:07:38','dd-mm-yyyy hh24:mi:ss'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null);
REM INSERTING into BASE_DIC_ACT
SET DEFINE OFF;
REM INSERTING into BASE_FORMPRINT
SET DEFINE OFF;
REM INSERTING into BASE_FORMSET
SET DEFINE OFF;
REM INSERTING into BASE_FORMSET_BASE
SET DEFINE OFF;
REM INSERTING into BASE_LOG
SET DEFINE OFF;
REM INSERTING into BASE_MAPPING
SET DEFINE OFF;
REM INSERTING into BASE_MATERIAL
SET DEFINE OFF;
REM INSERTING into BASE_MENU
SET DEFINE OFF;
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('WZZC','新增物资杂出单','ZRZC',2,1,'/sheet/zc/add','fa-newspaper-o',null,3,1,null,1010,to_date('03-07-2018 16:21:04','dd-mm-yyyy hh24:mi:ss'),1010,to_date('03-07-2018 16:55:39','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('qxjlr01','清洗剂制单','QXJLRMGR',2,1,'/OtherMgr/OtherInput/Index/',null,null,1,2,null,1010,to_date('18-10-2016 14:51:11','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('xsjlr02','稀释剂管理','XSJLRMGR',2,1,'/OtherMgr/OtherInput/EntryForm/',null,null,2,2,null,1010,to_date('18-10-2016 15:00:56','dd-mm-yyyy hh24:mi:ss'),1010,to_date('01-12-2016 11:44:23','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('ymlr02','油墨管理','YMLRMGR',2,1,'/OtherMgr/OtherInput/EntryForm/',null,null,1,2,null,1010,to_date('18-10-2016 15:03:04','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('ymsy01','油墨使用制单','YMSYMGR',2,1,'/OtherMgr/OtherManagement/Index/',null,null,1,2,null,1010,to_date('18-10-2016 15:05:18','dd-mm-yyyy hh24:mi:ss'),1010,to_date('18-10-2016 15:07:54','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('ymsy02','油墨使用管理','YMSYMGR',2,1,'/OtherMgr/OtherManagement/EntryForm/',null,null,2,2,null,1010,to_date('18-10-2016 15:09:55','dd-mm-yyyy hh24:mi:ss'),1010,to_date('02-11-2016 15:16:55','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('bzmsy01','包装膜使用制单','BZMSYMGR',2,1,'/OtherMgr/OtherManagement/Index/',null,null,1,2,null,1010,to_date('18-10-2016 15:11:50','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('bzmsy02','包装膜使用管理','BZMSYMGR',2,1,'/OtherMgr/OtherManagement/EntryForm/',null,null,1,2,null,1010,to_date('18-10-2016 15:12:41','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('xsjsy01','稀释剂使用制单','XSJSYMGR',2,1,'/OtherMgr/OtherManagement/Index/',null,null,1,2,null,1010,to_date('18-10-2016 15:13:25','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('xsjsy02','稀释剂使用管理','XSJSYMGR',2,1,'/OtherMgr/OtherManagement/EntryForm/',null,null,2,2,null,1010,to_date('18-10-2016 15:14:07','dd-mm-yyyy hh24:mi:ss'),1010,to_date('02-11-2016 15:15:19','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('f_query','查询','query',2,1,'#',null,null,1,2,null,1010,to_date('27-10-2016 17:33:18','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('basic','盘点管理','0',1,1,'#','fa-address-book-o',null,5,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('05-09-2016 17:31:44','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('transfermgr','移库移位单管理','dev',2,1,'/sheet/ykyw','fa-edit',null,8,1,null,1010,to_date('10-10-2016 15:43:11','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-09-2017 09:39:40','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('bzmlr01','包装膜制单','BZMLRMGR',2,1,'/OtherMgr/OtherInput/Index/',null,null,1,2,null,1010,to_date('18-10-2016 14:57:45','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('bzmlr02','包装膜管理','BZMLRMGR',2,1,'/OtherMgr/OtherInput/EntryForm/',null,null,1,2,null,1010,to_date('18-10-2016 14:58:49','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('dev','库存管理','0',1,1,'#','fa-hand-lizard-o',null,3,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('05-09-2016 17:30:57','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sheet_YW','新增移库移位单','dev',2,1,'/sheet/ykyw/add','fa-truck',null,7,1,null,1010,to_date('09-09-2016 15:50:57','dd-mm-yyyy hh24:mi:ss'),1010,to_date('10-10-2016 15:37:28','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('xsjlr01','稀释剂制单','XSJLRMGR',2,1,'/OtherMgr/OtherInput/Index/',null,null,1,2,null,1010,to_date('18-10-2016 14:59:55','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('dev_database','数据库管理','dev',2,1,'/Dev/Base_DataBase/Index',null,null,1002,2,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('dev_sysapi','接口API','dev',1,3,'#',null,null,1003,2,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('dev_sysapi_01','用户接口','dev_sysapi',2,1,'/Dev/Base_SysAPI/Index',null,'NULL',100301,2,'NULL',8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('dev_sysapi_02','权限接口','dev_sysapi',2,1,'/Dev/Base_SysAPI/Index',null,'NULL',100301,2,'NULL',8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('receipt_details','新增物资入库单','intostorage',2,1,'sheet/rk/wzrk.htm','fa-file-archive-o',null,3,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-06-2017 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys','系统管理','0',1,3,'#','fa-gear',null,30,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_MenuNew',' 菜单管理','sys',2,1,'system/menu/manageMenu.htm','fa-sliders',null,10,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_attribute','附加属性','sys',2,1,'/Sys/Base_Attribute/Index',null,null,3010,2,'禁用',8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_button','权限按钮','sys',2,1,'/Sys/Base_Button/Index',null,null,104,2,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('09-12-2016 10:33:18','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_coderule','编码规则','sys',2,1,'/Sys/Base_CodeRule/Index',null,null,3006,2,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_dicts','数据字典','sys',2,1,'system/dic','fa-legal',null,100,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_material','物料管理','sys',2,1,'system/material','fa-puzzle-piece',null,60,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),3413,to_date('24-09-2017 22:23:36','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_organazition','组织机构管理','sys',2,1,'system/dept/manageDepart.htm','fa-users',null,20,1,'ttttt',8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),3413,to_date('24-09-2017 22:21:07','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_Person',' 人员管理','sys',2,1,'system/user/manageUser.htm','fa-user',null,30,1,'c',8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_provider','供应商管理','sys',2,1,'system/provider/manageProvider.htm','fa-university',null,140,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('12-12-2016 11:48:02','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_receipt','单据管理','sys',2,1,'formTemplate/formTemplateManage/formTemplate.htm','fa-file',null,110,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_role','角色管理','sys',2,1,'system/role/manageRole.htm','fa-user-times',null,40,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_Route',' 流程管理','sys',2,1,'system/activitiManage/modelList.htm','fa-arrows-v',null,120,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('Sys_RouteMonitor','流程监控','sys',2,1,'system/activitiListener/processList.htm','fa-warning','NULL',130,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_setting','系统配置','sys',2,1,'/Sys/Base_Setting/Index',null,null,3009,2,'禁用2333',8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('20-09-2016 10:12:46','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_sparepartscate','物料分类管理','sys',2,1,'system/spare','fa-pencil-square-o',null,106,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),3413,to_date('24-09-2017 22:22:24','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_syslog','系统日志','sys',2,1,'system/log/manageLog.htm','fa-calendar',null,180,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('12-12-2016 11:46:33','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_sysparam','系统参数','sys',2,1,'/Sys/Base_SysParam/Index',null,null,3007,2,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_user','用户管理','sys',2,1,'/Sys/Base_User/Index',null,null,3004,2,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),0,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_Warehouse','库房库区管理','sys',2,1,'system/ware','fa-fort-awesome',null,80,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('13-01-2017 14:08:36','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('stockdm','库存收支报表','query',2,1,'/sheet/query/queryKCSZ.htm','fa-shopping-bag',null,6,1,null,1010,to_date('01-11-2016 15:40:17','dd-mm-yyyy hh24:mi:ss'),1010,to_date('01-11-2016 16:17:58','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('taskManage','任务管理','sys',2,1,'system/task','fa-tasks',null,70,1,null,1010,to_date('06-12-2016 14:59:35','dd-mm-yyyy hh24:mi:ss'),1010,to_date('07-06-2017 09:19:49','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('tasklog','接口日志','sys',2,1,'system/taskLog/manageTaskLog.htm','fa-calendar',null,170,1,null,1010,to_date('06-12-2016 15:00:42','dd-mm-yyyy hh24:mi:ss'),1010,to_date('07-06-2017 09:19:20','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_testInter','测试接口','sys',2,1,'/Sys/TSJK/Index',null,null,116,2,null,1010,to_date('08-12-2016 17:20:24','dd-mm-yyyy hh24:mi:ss'),1010,to_date('15-02-2017 08:47:26','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sheet_CK','新增物资出库单','dev',2,1,'/sheet/ck/sheetCK.htm','fa-vcard',null,3,1,null,1010,to_date('07-09-2016 17:17:36','dd-mm-yyyy hh24:mi:ss'),1010,to_date('15-02-2017 09:11:25','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sheet_BG','变更制单','BG',2,1,'/SheetMgr/Sheet_BG/Index',null,null,1,2,null,1010,to_date('12-09-2016 10:27:57','dd-mm-yyyy hh24:mi:ss'),1010,to_date('16-02-2017 15:42:17','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('KCPDZD','新增物资盘点单','basic',2,1,'sheet/pd/add.htm','fa-navicon',null,1,1,null,1010,to_date('27-10-2016 11:22:36','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-09-2017 09:37:28','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('BG','产品变更','dev',1,1,'#',null,null,8,2,null,1010,to_date('29-09-2016 15:37:16','dd-mm-yyyy hh24:mi:ss'),1010,to_date('16-02-2017 15:42:44','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('LLDGL','物资申领单管理','dev',2,1,'/sheet/apply/manageApply.htm','fa-braille',null,2,1,null,1010,to_date('03-07-2017 16:28:09','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-09-2017 09:33:19','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('WZLL','领用申请','dev',2,1,'#',null,null,1,2,null,1010,to_date('03-07-2017 16:25:35','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-09-2017 09:34:34','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('XZLLD','新增物资申领单','dev',2,1,'/sheet/apply/apply.htm','fa-file-text',null,1,1,null,1010,to_date('03-07-2017 16:27:13','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-09-2017 09:32:58','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('CGJH','采购计划查询','query',2,1,'/sheet/query/queryCGJH.htm','fa-sign-out',null,4,1,null,1010,to_date('03-07-2017 16:56:18','dd-mm-yyyy hh24:mi:ss'),1010,to_date('03-07-2017 17:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('ApplyDep','申请单位管理','sys',2,1,'system/applyDep/manageApplyDep.htm','fa-th-large',null,160,1,null,1010,to_date('03-07-2017 16:58:34','dd-mm-yyyy hh24:mi:ss'),1010,to_date('03-07-2017 17:22:42','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('LablePrint','货位标签打印','sys',2,1,'system/ware/printLocation','fa-print',null,90,1,null,1010,to_date('15-09-2017 09:40:31','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('pmjstatis','喷码机耗材使用统计','other',2,1,'/OtherMgr/TPJSY_TJ/Index',null,null,12,2,null,1010,to_date('24-10-2016 15:34:50','dd-mm-yyyy hh24:mi:ss'),1010,to_date('15-02-2017 10:27:16','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('DBinitialization','数据库初始化','sys',2,1,'/Admin/DBinitialization/AdminLogin',null,null,12,2,null,1010,to_date('25-10-2016 10:14:02','dd-mm-yyyy hh24:mi:ss'),1010,to_date('14-12-2016 14:16:30','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('ckcx','物资出库查询','query',2,1,'/sheet/query/queryCKCX.htm','fa-search-minus',null,3,1,null,1010,to_date('26-10-2016 14:49:04','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-10-2016 17:34:02','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('deOutomanage','寄存物资出库单管理','deposit',2,1,'sheet/jcwzck/manageJcWzck.htm','fa-vcard-o',null,4,1,null,1010,to_date('15-02-2017 11:27:34','dd-mm-yyyy hh24:mi:ss'),1010,to_date('04-08-2017 09:00:20','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('ckmgr','物资出库单管理','dev',2,1,'/sheet/ck/manageSheetCK.htm','fa-vcard-o',null,4,1,null,1010,to_date('29-09-2016 16:21:58','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-09-2017 09:33:35','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('intostorage','入库管理','0',1,1,'#','fa-truck',null,2,1,null,8001,to_date('05-09-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('05-09-2016 17:29:57','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('other','其它管理','0',1,1,'#','icon-th-list',null,4,2,null,8001,to_date('05-09-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('15-02-2017 10:32:40','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('query','查询统计','0',1,1,'#','fa-line-chart',null,8,1,null,8001,to_date('05-09-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('waithandle','我的待办','PersonalWorkbench',2,1,'system/activitiListener/findProcessing.htm','fa-pencil-square',null,1,1,null,1010,to_date('18-10-2016 11:42:33','dd-mm-yyyy hh24:mi:ss'),1010,to_date('02-11-2016 09:53:26','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('handle','我的已办','PersonalWorkbench',2,1,'system/activitiListener/findProcessed.htm','fa-share-square',null,2,1,null,1010,to_date('18-10-2016 11:42:58','dd-mm-yyyy hh24:mi:ss'),1010,to_date('02-11-2016 09:53:37','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('depositInto','寄存物资入库','deposit',2,1,'#',null,null,1,2,null,1010,to_date('15-02-2017 11:16:19','dd-mm-yyyy hh24:mi:ss'),1010,to_date('04-08-2017 09:01:01','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('KCPDGL','物资盘点单管理','basic',2,1,'sheet/pd/manageKcpd.htm','fa-newspaper-o',null,2,1,null,1010,to_date('28-10-2016 09:27:47','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-09-2017 09:37:44','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sheet_tk','物资退库','dev',2,1,'#',null,null,4,2,null,1010,to_date('24-11-2016 10:33:07','dd-mm-yyyy hh24:mi:ss'),1010,to_date('16-02-2017 17:42:12','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('ZRZC','杂入杂出管理','0',1,1,'#','fa-address-book-o',null,5,1,null,1010,to_date('05-07-2018 14:26:13','dd-mm-yyyy hh24:mi:ss'),1010,to_date('05-07-2018 14:27:33','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('WZZR','新增物资杂入单','ZRZC',2,1,'/sheet/zr/add','fa-navicon',null,1,1,null,1010,to_date('05-07-2018 14:26:58','dd-mm-yyyy hh24:mi:ss'),1010,to_date('05-07-2018 14:47:45','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('UseDep','使用单位管理','sys',2,1,'system/useDep/manageUseDep.htm','fa-th-large',null,150,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('13-01-2017 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sheet_receipt','物资入库单管理','intostorage',2,1,'sheet/rk/manageWzrk.htm','fa-file-powerpoint-o',null,4,1,null,1010,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-06-2017 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('wzjs_sheet','新增物资接收单','intostorage',2,1,'sheet/wzjs/order.htm','fa-file-text-o',null,1,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-06-2017 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sheet_wzjs','物资接收单管理','intostorage',2,1,'sheet/wzjs/manageOrder.htm','fa-tasks',null,2,1,null,8001,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-06-2017 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('addzcck','新增资产出库单','zcout',2,1,'/AssetMgr/Sheet_ZCCK/Index',null,null,1,2,null,1010,to_date('03-01-2017 14:38:49','dd-mm-yyyy hh24:mi:ss'),1010,to_date('06-02-2017 09:22:23','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('wzsq','领料申请','dev',1,1,'#',null,null,9,2,null,1010,to_date('16-02-2017 17:35:07','dd-mm-yyyy hh24:mi:ss'),1010,to_date('17-07-2017 14:03:53','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sheet_th_add','新增物资退货单','dev',2,1,'/sheet/th/add','fa-credit-card',null,9,1,null,1010,to_date('16-02-2017 17:45:32','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-09-2017 09:36:10','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sheet_th_manager','物资退货单管理','dev',2,1,'/sheet/th','fa-credit-card-alt',null,10,1,null,1010,to_date('16-02-2017 17:47:08','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-09-2017 09:36:24','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('QCJZ','期初建账','dev',1,1,'#',null,null,7,2,null,1010,to_date('22-06-2017 20:03:13','dd-mm-yyyy hh24:mi:ss'),3413,to_date('25-09-2017 14:22:44','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('depositQuery','寄存材料库存查询','deposit',2,1,'sheet/query/queryJCCX.htm','fa-search',null,5,1,null,1010,to_date('01-04-2017 15:05:02','dd-mm-yyyy hh24:mi:ss'),1010,to_date('04-08-2017 09:00:03','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('QCJZGL','新增期初建账','QCJZ',2,1,'/SheetMgr/Sheet_QCJZ/Index',null,null,1,2,null,1010,to_date('22-06-2017 20:05:21','dd-mm-yyyy hh24:mi:ss'),3413,to_date('25-09-2017 14:22:56','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('queryPlan','计划库存管理报表','query',2,1,'/sheet/query/queryPlanDetail.htm','fa-shopping-bag',null,7,1,null,1010,to_date('01-11-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('01-11-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('CGDD','采购订单查询','query',2,1,'/sheet/query/queryCGDD.htm','fa-hourglass-1',null,5,1,null,1010,to_date('03-07-2017 10:43:35','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('ZC','物资杂出单管理','ZRZC',2,1,'/sheet/zc','fa-newspaper-o',null,4,1,null,1010,to_date('03-07-2018 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('03-07-2018 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('wzjs','物资接收','intostorage',2,1,'#',null,null,1,2,null,1010,to_date('28-06-2017 14:00:29','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('wzsqadd','新增领料申请单','wzsq',2,1,'/SheetMgr/Sheet_SQ/Index',null,null,1,2,null,1010,to_date('16-02-2017 17:36:02','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-06-2017 15:14:23','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('wzdb','物资调拨','dev',2,1,'#',null,null,6,2,null,1010,to_date('14-04-2017 15:26:58','dd-mm-yyyy hh24:mi:ss'),1010,to_date('17-07-2017 14:02:13','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sheet_th','物资退货','dev',2,1,'#',null,null,5,2,null,1010,to_date('16-02-2017 17:43:21','dd-mm-yyyy hh24:mi:ss'),1010,to_date('16-02-2017 17:44:22','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('ZR','物资杂入单管理','ZRZC',2,1,'/sheet/zr/manageWzzr.htm','fa-newspaper-o',null,2,1,null,1010,to_date('05-07-2018 00:00:00','dd-mm-yyyy hh24:mi:ss'),1010,to_date('05-07-2018 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('deposit','寄存管理','0',1,1,'#','fa-file-powerpoint-o',null,4,1,null,1010,to_date('15-02-2017 11:15:29','dd-mm-yyyy hh24:mi:ss'),1010,to_date('04-08-2017 09:01:21','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('BZQGJ','保质期告警','xtgj',2,1,'/system/bzqgj/showBZQGJ.htm','fa-bell-o',null,1,1,null,1010,to_date('01-04-2017 17:32:45','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('deIntoadd','新增寄存物资入库单','deposit',2,1,'sheet/jcwzrk/jcwzrk.htm','fa-file-archive-o',null,1,1,null,1010,to_date('15-02-2017 11:18:13','dd-mm-yyyy hh24:mi:ss'),1010,to_date('04-08-2017 09:00:52','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('deIntomanage','寄存物资入库单管理','deposit',2,1,'sheet/jcwzrk/manageJcWzrk.htm','fa-file-powerpoint-o',null,2,1,null,1010,to_date('15-02-2017 11:18:41','dd-mm-yyyy hh24:mi:ss'),1010,to_date('04-08-2017 09:00:42','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('deOutoadd','新增寄存物资出库单','deposit',2,1,'sheet/jcwzck/jcwzck.htm','fa-vcard',null,3,1,null,1010,to_date('15-02-2017 11:27:09','dd-mm-yyyy hh24:mi:ss'),1010,to_date('04-08-2017 09:00:11','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('wzdbsq','新增物资调拨单','dev',2,1,'/sheet/db/add','fa-cart-plus',null,9,1,null,1010,to_date('14-04-2017 15:29:10','dd-mm-yyyy hh24:mi:ss'),1010,to_date('17-07-2017 14:03:06','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sys_tagmanage','物料标签管理','sys',2,1,'/Sys/Base_Tag/Index',null,null,118,2,null,1010,to_date('21-04-2017 09:37:56','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('wzdbjl','物资调拨单管理','dev',2,1,'/sheet/db','fa-cart-arrow-down',null,10,1,null,1010,to_date('14-04-2017 15:29:46','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-09-2017 09:36:39','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('xtgj','系统告警','0',1,1,'#','fa-bell',null,7,1,null,1010,to_date('01-04-2017 15:10:37','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('SXXGJ','上下限告警','xtgj',2,1,'/system/sxxgj/showSXXGJ.htm','fa-sort-amount-desc',null,2,1,null,1010,to_date('01-04-2017 17:34:36','dd-mm-yyyy hh24:mi:ss'),1010,to_date('01-04-2017 17:34:50','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('wzsqmanage','领料申请管理','wzsq',2,1,'/SheetMgr/Sheet_SQ/SQManage',null,null,2,2,null,1010,to_date('14-04-2017 15:36:45','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-06-2017 15:14:36','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('CK','物资出库','dev',1,1,'#',null,null,2,2,null,1010,to_date('05-09-2016 17:16:14','dd-mm-yyyy hh24:mi:ss'),1010,to_date('16-02-2017 17:35:18','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('intomanage','物资入库单管理','ProductIntoStorage',2,1,'/SheetMgr/Sheet_JSRK/JSRKManage',null,null,2,2,null,1010,to_date('19-09-2016 11:23:30','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-09-2017 09:32:36','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('transfer','移库移位','dev',2,1,'#',null,null,3,2,null,1010,to_date('10-10-2016 15:37:07','dd-mm-yyyy hh24:mi:ss'),1010,to_date('01-04-2017 15:06:10','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('rkcx','物资入库查询','query',2,1,'/sheet/query/queryWZSheetRKDetail.htm','fa-shopping-cart',null,2,1,null,1010,to_date('26-10-2016 09:31:08','dd-mm-yyyy hh24:mi:ss'),1010,to_date('04-08-2017 09:16:53','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('ymlr01','油墨制单','YMLRMGR',2,1,'/OtherMgr/OtherInput/Index/',null,null,1,2,null,1010,to_date('18-10-2016 15:01:50','dd-mm-yyyy hh24:mi:ss'),1010,to_date('18-10-2016 15:03:13','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sheet_tk_add','新增物资退库单','dev',2,1,'/sheet/tk/add','fa-minus',null,5,1,null,1010,to_date('24-11-2016 10:34:27','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-09-2017 09:35:40','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('TK','物资退库单管理','dev',2,1,'/sheet/tk','fa-minus-circle',null,6,1,null,1010,to_date('24-11-2016 10:35:43','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-09-2017 09:35:53','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('QXJSYMGR','清洗剂使用','other',2,1,'#',null,null,8,2,null,1010,to_date('18-10-2016 10:42:32','dd-mm-yyyy hh24:mi:ss'),1010,to_date('19-10-2016 09:25:30','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('BZMLRMGR','包装膜录入','other',2,1,'#',null,null,1,2,null,1010,to_date('18-10-2016 10:43:04','dd-mm-yyyy hh24:mi:ss'),null,null,null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('YMSYMGR','油墨使用','other',2,1,'#',null,null,4,2,null,1010,to_date('18-10-2016 10:50:12','dd-mm-yyyy hh24:mi:ss'),1010,to_date('19-10-2016 09:24:53','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('YMLRMGR','油墨录入','other',2,1,'#',null,null,3,2,null,1010,to_date('18-10-2016 10:43:51','dd-mm-yyyy hh24:mi:ss'),1010,to_date('19-10-2016 09:24:46','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('BZMSYMGR','包装膜使用','other',2,1,'#',null,null,2,2,null,1010,to_date('18-10-2016 10:45:37','dd-mm-yyyy hh24:mi:ss'),1010,to_date('19-10-2016 09:24:30','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('XSJLRMGR','稀释剂录入','other',2,1,'#',null,null,5,2,null,1010,to_date('18-10-2016 10:50:39','dd-mm-yyyy hh24:mi:ss'),1010,to_date('19-10-2016 09:25:07','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('XSJSYMGR','稀释剂使用','other',2,1,'#',null,null,6,2,null,1010,to_date('18-10-2016 10:51:03','dd-mm-yyyy hh24:mi:ss'),1010,to_date('19-10-2016 09:25:16','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('PersonalWorkbench','个人工作台','0',1,1,'#','fa-user-circle',null,1,1,null,1010,to_date('18-10-2016 11:40:32','dd-mm-yyyy hh24:mi:ss'),1010,to_date('06-02-2017 00:00:00','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('QXJLRMGR','清洗剂录入','other',2,1,'#',null,null,7,2,null,1010,to_date('18-10-2016 14:47:33','dd-mm-yyyy hh24:mi:ss'),1010,to_date('19-10-2016 09:25:24','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('qxjlr02','清洗剂管理','QXJLRMGR',2,1,'/OtherMgr/OtherInput/EntryForm/',null,null,2,2,null,1010,to_date('18-10-2016 14:50:29','dd-mm-yyyy hh24:mi:ss'),1010,to_date('02-11-2016 15:16:34','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('qxjsy01','清洗剂使用制单','QXJSYMGR',2,1,'/OtherMgr/OtherManagement/Index/',null,null,1,2,null,1010,to_date('18-10-2016 14:53:07','dd-mm-yyyy hh24:mi:ss'),1010,to_date('18-10-2016 15:06:28','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('qxjsy02','清洗剂使用管理','QXJSYMGR',2,1,'/OtherMgr/OtherManagement/EntryForm/',null,null,2,2,null,1010,to_date('18-10-2016 14:55:51','dd-mm-yyyy hh24:mi:ss'),1010,to_date('02-11-2016 15:14:54','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('querys','库存查询','query',2,1,'/sheet/query/queryInventory.htm','fa-search',null,1,1,null,1010,to_date('25-10-2016 14:09:30','dd-mm-yyyy hh24:mi:ss'),1010,to_date('27-10-2016 17:33:34','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('ProductIntoStorage','物资入库','intostorage',2,1,'#',null,null,2,2,null,1010,to_date('28-11-2016 09:31:01','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-06-2017 14:00:37','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('giftIntoStorage','赠送品入库','intostorage',2,1,'#',null,null,3,2,null,1010,to_date('28-11-2016 09:31:58','dd-mm-yyyy hh24:mi:ss'),3413,to_date('25-09-2017 14:22:03','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('sheet_gift','新增赠送品入库单','giftIntoStorage',2,1,'/SheetMgr/Sheet_GiftRK/Index',null,null,1,2,null,1010,to_date('28-11-2016 09:36:42','dd-mm-yyyy hh24:mi:ss'),3413,to_date('25-09-2017 14:22:21','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('giftmanage','赠送品入库','giftIntoStorage',2,1,'/SheetMgr/Sheet_GiftRK/GIFTManage',null,null,2,2,null,1010,to_date('28-11-2016 09:38:36','dd-mm-yyyy hh24:mi:ss'),3413,to_date('25-09-2017 14:22:33','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('fcpcx','副产品查询','query',2,1,'/QueryMgr/Stat_FCP/Index',null,null,1,2,null,1010,to_date('29-11-2016 14:43:34','dd-mm-yyyy hh24:mi:ss'),1010,to_date('18-01-2017 11:24:17','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('assetmgr','资产管理','0',2,1,'#','icon-credit-card',null,6,2,null,1010,to_date('27-12-2016 13:56:32','dd-mm-yyyy hh24:mi:ss'),1010,to_date('06-02-2017 09:22:43','dd-mm-yyyy hh24:mi:ss'),null);
Insert into BASE_MENU (CODE,NAME,PARENTCODE,TYPE,BUTTONMODE,URL,ICON,ICONURL,SORT,STATUS,MEMO,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,AUTHIDENTITY) values ('zcout','资产出库','assetmgr',2,1,'#',null,null,2,2,null,1010,to_date('03-01-2017 14:38:03','dd-mm-yyyy hh24:mi:ss'),1010,to_date('06-02-2017 09:22:33','dd-mm-yyyy hh24:mi:ss'),null);
REM INSERTING into BASE_MENUBUTTON
SET DEFINE OFF;
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('handle','search',0,'查询');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('addzcck','browse',0,'浏览');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('addzcck','search',0,'查询');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('addzcck','add',1,'新增1');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('handle','add',1,'新增');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_button','refresh',0,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_code_gen3','cs11',1,'测试');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_codegen','add',11,'新增2');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_codegen','delete',22,'删除2');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_codegen','edit',33,'更新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_codegen','refresh',44,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_database','refresh',150,'刷新数据表');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_sysapi_01','add',120,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_sysapi_01','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_sysapi_01','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_sysapi_01','refresh',150,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_sysapi_02','add',120,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_sysapi_02','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_sysapi_02','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('dev_sysapi_02','refresh',150,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys/MenuNew','search',110,'查询');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_button','add',120,'new');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_button','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_button','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_coderule','add',120,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_coderule','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_coderule','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_coderule','refresh',150,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_dict','add',120,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_dict','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_dict','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_dict','refresh',150,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_dicts','search',110,'查询');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_material','add',120,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_material','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_material','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_menu','add',120,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_menu','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_menu','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_menu','refresh',150,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_organazition','add',121,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_organazition','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_organazition','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_Person','add',120,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_Person','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_Person','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_provider','add',120,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_provider','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_provider','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_provider','refresh',150,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_provider','search',110,'查询');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_role','add',120,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_role','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_role','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_role','refresh',150,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_role','rolerights',810,'授权');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_sparepartscate','add',120,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_sparepartscate','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_sparepartscate','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_sparepartscate','refresh',150,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_sysparam','add',120,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_sysparam','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_sysparam','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_sysparam','refresh',150,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_user','add',120,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_user','audit',185,'授权');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_user','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_user','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_user','refresh',150,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_user','resetpwd',820,'重置密码');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_Warehouse','add',120,'添加');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_Warehouse','delete',140,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_Warehouse','edit',130,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_Warehouse','refresh',150,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_Route','search',0,'查询');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_Route','add',0,'新增');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_Route','edit',0,'编辑');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_Route','delete',0,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_Route','refresh',0,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys/MenuNew','cancel',0,'取消');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys/MenuNew','refresh',0,'刷新');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_syslog','search',0,'查询');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('tasklog','search',0,'查询');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys/MenuNew','browse',0,'浏览');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('sys_syslog','delete',0,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('tasklog','delete',0,'删除');
Insert into BASE_MENUBUTTON (MENUCODE,BUTTONCODE,BUTTONSORT,BUTTONTEXT) values ('handle','browse',0,'浏览');
REM INSERTING into BASE_OFFICES_SCOPE
SET DEFINE OFF;
REM INSERTING into BASE_OFFSETINFO
SET DEFINE OFF;
REM INSERTING into BASE_ORGANIZATION
SET DEFINE OFF;
REM INSERTING into BASE_PERSON
SET DEFINE OFF;
Insert into BASE_PERSON (ID,GUID,USERTYPE,CODE,SPELL,NAME,SEX,EMAIL,PHONE,QQ,PASSWORD,SECRETKEY,DEPARTID,COMPANYID,STATUS,SORT,MEMO,ISAUDIT,AUDITBY,AUDITTIME,ISSINGLELOGIN,ISONLINE,LOGINCOUNT,LOGINTIME,LOGINIP,LOGINCITY,LASTCHANGEPASSWORD,CREATOR,CREATEDATE,UPDATER,UPDATEDATE,ZTID,EXTENDINT1,EXTENDINT2,EXTENDINT3,EXTENDINT4,EXTENDSTRING1,EXTENDSTRING2,EXTENDSTRING3,EXTENDSTRING4,OFFICESID) values (1010,'58CC5D7A-14AF-43B8-92BE-698386FBAD30',null,'sysadmin','superadmin','超级管理员','0         ','1234@163.com','123456','123','202cb962ac59075b964b07152d234b70','NULL',200294,100001,1,0,'超级管理员，禁止删除',1,null,to_date('24-08-2016 09:37:09','dd-mm-yyyy hh24:mi:ss'),0,0,17825,to_date('11-10-2018 22:39:06','dd-mm-yyyy hh24:mi:ss'),'0:0:0:0:0:0:0:1','北京/北京',null,null,null,1010,to_date('08-10-2018 10:47:28','dd-mm-yyyy hh24:mi:ss'),200294,1,0,0,0,null,null,null,null,null);
REM INSERTING into BASE_PERSON_SCOPE
SET DEFINE OFF;
REM INSERTING into BASE_PRINTTEMP
SET DEFINE OFF;
REM INSERTING into BASE_PROVIDER
SET DEFINE OFF;
REM INSERTING into BASE_RECEIPT
SET DEFINE OFF;
REM INSERTING into BASE_ROLE
SET DEFINE OFF;
Insert into BASE_ROLE (ROLECODE,ROLENAME,ROLETYPE,SORT,ENABLED,REMARK,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE) values ('000','超级管理员',1,0,1,'禁止删除',1,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'),1,to_date('18-08-2016 00:00:00','dd-mm-yyyy hh24:mi:ss'));
Insert into BASE_ROLE (ROLECODE,ROLENAME,ROLETYPE,SORT,ENABLED,REMARK,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE) values ('001','库房主管',1,1,-1,'禁止删除',1010,to_date('02-09-2016 10:50:27','dd-mm-yyyy hh24:mi:ss'),1010,to_date('10-07-2018 14:26:45','dd-mm-yyyy hh24:mi:ss'));
Insert into BASE_ROLE (ROLECODE,ROLENAME,ROLETYPE,SORT,ENABLED,REMARK,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE) values ('004','使用单位负责人',1,4,1,'禁止删除',1010,to_date('02-09-2016 10:52:23','dd-mm-yyyy hh24:mi:ss'),null,null);
Insert into BASE_ROLE (ROLECODE,ROLENAME,ROLETYPE,SORT,ENABLED,REMARK,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE) values ('002','保管员',1,2,1,'禁止删除',1010,to_date('02-09-2016 10:50:52','dd-mm-yyyy hh24:mi:ss'),1010,to_date('28-09-2018 10:13:54','dd-mm-yyyy hh24:mi:ss'));
Insert into BASE_ROLE (ROLECODE,ROLENAME,ROLETYPE,SORT,ENABLED,REMARK,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE) values ('003','物资站站长',1,3,1,'禁止删除',1010,to_date('02-09-2016 10:51:18','dd-mm-yyyy hh24:mi:ss'),null,null);
Insert into BASE_ROLE (ROLECODE,ROLENAME,ROLETYPE,SORT,ENABLED,REMARK,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE) values ('005','科室科长',1,5,1,'禁止删除',1010,to_date('02-09-2016 10:52:47','dd-mm-yyyy hh24:mi:ss'),null,null);
Insert into BASE_ROLE (ROLECODE,ROLENAME,ROLETYPE,SORT,ENABLED,REMARK,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE) values ('006','分管矿领导',2,6,1,'禁止删除',1010,to_date('02-09-2016 10:53:11','dd-mm-yyyy hh24:mi:ss'),null,null);
Insert into BASE_ROLE (ROLECODE,ROLENAME,ROLETYPE,SORT,ENABLED,REMARK,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE) values ('007','中心副主任',1,7,1,'禁止删除',1010,to_date('02-09-2016 10:53:31','dd-mm-yyyy hh24:mi:ss'),null,null);
Insert into BASE_ROLE (ROLECODE,ROLENAME,ROLETYPE,SORT,ENABLED,REMARK,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE) values ('008','中心计划员',1,8,1,'禁止删除',1010,to_date('02-09-2016 10:53:53','dd-mm-yyyy hh24:mi:ss'),null,null);
Insert into BASE_ROLE (ROLECODE,ROLENAME,ROLETYPE,SORT,ENABLED,REMARK,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE) values ('009','一般用户',2,9,1,'cs',1010,to_date('28-12-2016 16:42:26','dd-mm-yyyy hh24:mi:ss'),null,null);
Insert into BASE_ROLE (ROLECODE,ROLENAME,ROLETYPE,SORT,ENABLED,REMARK,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE) values ('010','矿长',2,10,1,'禁止删除',1010,to_date('28-08-2017 09:24:08','dd-mm-yyyy hh24:mi:ss'),null,null);
Insert into BASE_ROLE (ROLECODE,ROLENAME,ROLETYPE,SORT,ENABLED,REMARK,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE) values ('011','中心主任',2,11,1,'禁止删除',1010,to_date('28-08-2017 09:24:36','dd-mm-yyyy hh24:mi:ss'),null,null);
Insert into BASE_ROLE (ROLECODE,ROLENAME,ROLETYPE,SORT,ENABLED,REMARK,CREATOR,CREATEDATE,UPDATOR,UPDATEDATE) values ('T01','管理员（test）',1,100,1,'管理员（test）',1010,to_date('11-07-2018 15:11:15','dd-mm-yyyy hh24:mi:ss'),null,null);
REM INSERTING into BASE_ROLEMENU
SET DEFINE OFF;
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','ApplyDep');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','BZQGJ');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','CGDD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','CGJH');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','KCPDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','KCPDZD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','LLDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','LablePrint');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','PersonalWorkbench');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','SXXGJ');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','Sys_RouteMonitor');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','TK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','UseDep');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','WZZC');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','WZZR');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','XZLLD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','ZC');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','ZR');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','ZRZC');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','basic');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','ckcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','ckmgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','deIntoadd');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','deIntomanage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','deOutoadd');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','deOutomanage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','deposit');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','depositQuery');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','dev');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','handle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','intostorage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','query');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','queryPlan');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','querys');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','receipt_details');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','rkcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sheet_CK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sheet_YW');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sheet_receipt');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sheet_th_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sheet_th_manager');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sheet_tk_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sheet_wzjs');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','stockdm');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sys');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sys_MenuNew');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sys_Person');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sys_Route');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sys_Warehouse');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sys_dicts');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sys_material');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sys_organazition');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sys_provider');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sys_receipt');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sys_role');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sys_sparepartscate');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','sys_syslog');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','taskManage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','tasklog');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','transfermgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','waithandle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','wzdbjl');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','wzdbsq');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','wzjs_sheet');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('000','xtgj');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','ApplyDep');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','BZQGJ');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','CGDD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','CGJH');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','KCPDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','KCPDZD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','LLDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','LablePrint');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','PersonalWorkbench');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','SXXGJ');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','Sys_RouteMonitor');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','TK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','UseDep');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','WZZC');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','WZZR');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','XZLLD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','ZC');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','ZR');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','ZRZC');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','basic');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','ckcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','ckmgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','deIntoadd');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','deIntomanage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','deOutoadd');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','deOutomanage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','deposit');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','depositQuery');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','dev');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','handle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','intostorage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','query');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','queryPlan');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','querys');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','receipt_details');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','rkcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sheet_CK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sheet_YW');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sheet_receipt');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sheet_th_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sheet_th_manager');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sheet_tk_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sheet_wzjs');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','stockdm');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sys');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sys_MenuNew');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sys_Person');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sys_Route');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sys_Warehouse');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sys_dicts');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sys_material');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sys_organazition');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sys_provider');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sys_receipt');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sys_role');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sys_sparepartscate');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','sys_syslog');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','taskManage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','tasklog');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','transfermgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','waithandle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','wzdbjl');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','wzdbsq');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','wzjs_sheet');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('001','xtgj');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','ApplyDep');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','BZQGJ');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','CGDD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','CGJH');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','KCPDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','KCPDZD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','LLDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','LablePrint');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','PersonalWorkbench');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','SXXGJ');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','Sys_RouteMonitor');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','TK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','UseDep');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','XZLLD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','basic');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','ckcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','ckmgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','dev');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','handle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','intostorage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','query');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','querys');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','receipt_details');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','rkcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sheet_CK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sheet_YW');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sheet_th_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sheet_th_manager');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sheet_tk_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','stockdm');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sys');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sys_MenuNew');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sys_Person');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sys_Route');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sys_Warehouse');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sys_dicts');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sys_material');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sys_organazition');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sys_provider');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sys_receipt');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sys_role');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sys_sparepartscate');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','sys_syslog');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','taskManage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','tasklog');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','transfermgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','waithandle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','wzdbjl');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','wzdbsq');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','wzjs_sheet');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('002','xtgj');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','KCPDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','KCPDZD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','PersonalWorkbench');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','TK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','basic');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','ckcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','ckmgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','dev');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','handle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','intostorage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','query');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','querys');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','receipt_details');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','rkcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','sheet_CK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','sheet_YW');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','sheet_tk_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','stockdm');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','transfermgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('003','waithandle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','KCPDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','KCPDZD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','PersonalWorkbench');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','TK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','basic');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','ckmgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','dev');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','handle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','intostorage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','receipt_details');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','sheet_CK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','sheet_YW');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','sheet_tk_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','transfermgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('004','waithandle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','LLDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','PersonalWorkbench');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','TK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','XZLLD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','ckcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','ckmgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','dev');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','handle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','query');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','querys');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','rkcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','sheet_CK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','sheet_tk_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','stockdm');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('005','waithandle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('006','PersonalWorkbench');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('006','ckcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('006','handle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('006','query');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('006','querys');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('006','rkcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('006','stockdm');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('006','waithandle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','KCPDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','KCPDZD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','PersonalWorkbench');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','TK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','basic');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','ckmgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','dev');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','handle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','intostorage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','query');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','querys');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','receipt_details');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','rkcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','sheet_CK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','sheet_YW');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','sheet_tk_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','stockdm');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','transfermgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('007','waithandle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','BZQGJ');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','CGDD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','CGJH');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','KCPDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','KCPDZD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','LLDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','PersonalWorkbench');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','SXXGJ');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','TK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','XZLLD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','basic');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','ckcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','ckmgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','dev');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','handle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','intostorage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','query');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','querys');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','receipt_details');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','rkcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','sheet_CK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','sheet_YW');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','sheet_th_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','sheet_th_manager');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','sheet_tk_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','stockdm');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','transfermgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','waithandle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','wzdbjl');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','wzdbsq');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','wzjs_sheet');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('009','xtgj');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','ApplyDep');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','BZQGJ');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','CGDD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','CGJH');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','KCPDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','KCPDZD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','LLDGL');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','LablePrint');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','PersonalWorkbench');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','SXXGJ');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','Sys_RouteMonitor');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','TK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','UseDep');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','WZZC');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','WZZR');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','XZLLD');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','ZC');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','ZR');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','ZRZC');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','basic');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','ckcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','ckmgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','deIntoadd');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','deIntomanage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','deOutoadd');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','deOutomanage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','deposit');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','depositQuery');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','dev');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','handle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','intostorage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','query');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','queryPlan');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','querys');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','receipt_details');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','rkcx');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sheet_CK');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sheet_YW');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sheet_receipt');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sheet_th_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sheet_th_manager');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sheet_tk_add');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sheet_wzjs');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','stockdm');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sys');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sys_MenuNew');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sys_Person');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sys_Route');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sys_Warehouse');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sys_dicts');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sys_material');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sys_organazition');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sys_provider');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sys_receipt');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sys_role');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sys_sparepartscate');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','sys_syslog');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','taskManage');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','tasklog');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','transfermgr');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','waithandle');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','wzdbjl');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','wzdbsq');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','wzjs_sheet');
Insert into BASE_ROLEMENU (ROLECODE,MENUCODE) values ('T01','xtgj');
REM INSERTING into BASE_ROLEMENUBUTTON
SET DEFINE OFF;
REM INSERTING into BASE_ROUTESTEP
SET DEFINE OFF;
REM INSERTING into BASE_SPAREPARTSCATE
SET DEFINE OFF;
REM INSERTING into BASE_UNITCONVERSION
SET DEFINE OFF;
REM INSERTING into BASE_USEDEP
SET DEFINE OFF;
REM INSERTING into BASE_USERROLE
SET DEFINE OFF;
Insert into BASE_USERROLE (USERID,ROLECODE) values (1010,'000');
Insert into BASE_USERROLE (USERID,ROLECODE) values (1010,'001');
Insert into BASE_USERROLE (USERID,ROLECODE) values (1010,'002');
REM INSERTING into BASE_USERROLES
SET DEFINE OFF;
Insert into BASE_USERROLES (USERID,ROLECODE,ID) values (1010,'000',3003050);
Insert into BASE_USERROLES (USERID,ROLECODE,ID) values (1010,'001',3003051);
Insert into BASE_USERROLES (USERID,ROLECODE,ID) values (1010,'002',3003052);
Insert into BASE_USERROLES (USERID,ROLECODE,ID) values (1010,'003',3003053);
Insert into BASE_USERROLES (USERID,ROLECODE,ID) values (1010,'004',3003054);
Insert into BASE_USERROLES (USERID,ROLECODE,ID) values (1010,'005',3003055);
Insert into BASE_USERROLES (USERID,ROLECODE,ID) values (1010,'006',3003056);
Insert into BASE_USERROLES (USERID,ROLECODE,ID) values (1010,'007',3003057);
Insert into BASE_USERROLES (USERID,ROLECODE,ID) values (1010,'008',3003058);
Insert into BASE_USERROLES (USERID,ROLECODE,ID) values (1010,'009',3003059);
Insert into BASE_USERROLES (USERID,ROLECODE,ID) values (1010,'010',3003060);
Insert into BASE_USERROLES (USERID,ROLECODE,ID) values (1010,'011',3003061);
Insert into BASE_USERROLES (USERID,ROLECODE,ID) values (1010,'T01',3003062);
REM INSERTING into BASE_WAREHOUSE
SET DEFINE OFF;
REM INSERTING into EQUIPMENTSTOCKPILE_TEST
SET DEFINE OFF;
REM INSERTING into INF_TASK
SET DEFINE OFF;
REM INSERTING into INF_TASKLOG
SET DEFINE OFF;
REM INSERTING into MES_CK
SET DEFINE OFF;
REM INSERTING into MES_RK
SET DEFINE OFF;
REM INSERTING into ST_MAXCODE
SET DEFINE OFF;
REM INSERTING into SYS_FORMTEMPLATE
SET DEFINE OFF;
REM INSERTING into TEMP_DATA
SET DEFINE OFF;
REM INSERTING into WZ_ATTACHFILE
SET DEFINE OFF;
REM INSERTING into WZ_ORDERINFO
SET DEFINE OFF;
REM INSERTING into WZ_PDDETAIL
SET DEFINE OFF;
REM INSERTING into WZ_PURCHASEPLAN
SET DEFINE OFF;
REM INSERTING into WZ_RECEIVINGLOG
SET DEFINE OFF;
REM INSERTING into WZ_ROUTEHISTORY
SET DEFINE OFF;
REM INSERTING into WZ_SHEET
SET DEFINE OFF;
REM INSERTING into WZ_SHEETCKDETAIL
SET DEFINE OFF;
REM INSERTING into WZ_SHEETDETAIL
SET DEFINE OFF;
REM INSERTING into WZ_SHEETRKDETAIL
SET DEFINE OFF;
REM INSERTING into WZ_SHEETRKSUBDETAIL
SET DEFINE OFF;
REM INSERTING into WZ_SHEETSUBDETAIL
SET DEFINE OFF;
REM INSERTING into WZ_SHEET_CK
SET DEFINE OFF;
REM INSERTING into WZ_SHEET_RK
SET DEFINE OFF;
REM INSERTING into WZ_STOCK
SET DEFINE OFF;
REM INSERTING into WZ_STOCKSUBDETAIL
SET DEFINE OFF;
REM INSERTING into WZ_STORELOG
SET DEFINE OFF;
REM INSERTING into WZ_WAITTASK
SET DEFINE OFF;
REM INSERTING into V_ALLSHEET
SET DEFINE OFF;
REM INSERTING into V_ALLSONDETAILS
SET DEFINE OFF;
REM INSERTING into V_ALLWAITTASK
SET DEFINE OFF;
REM INSERTING into V_APPLYDEP
SET DEFINE OFF;
REM INSERTING into V_ATTACHFILE
SET DEFINE OFF;
REM INSERTING into V_BASE_DEPART
SET DEFINE OFF;
REM INSERTING into V_BASE_MENUBUTTON
SET DEFINE OFF;
REM INSERTING into V_BASE_ROLEMENUBUTTON
SET DEFINE OFF;
REM INSERTING into V_BGD
SET DEFINE OFF;
REM INSERTING into V_BZQ
SET DEFINE OFF;
REM INSERTING into V_CKCX
SET DEFINE OFF;
REM INSERTING into V_CKD
SET DEFINE OFF;
REM INSERTING into V_CKDETAILS
SET DEFINE OFF;
REM INSERTING into V_CKDETAILSFORAPI
SET DEFINE OFF;
REM INSERTING into V_CKDFORAPI
SET DEFINE OFF;
REM INSERTING into V_CKLIST
SET DEFINE OFF;
REM INSERTING into V_CKLISTFORAPI
SET DEFINE OFF;
REM INSERTING into V_CKMERGEDETAILS
SET DEFINE OFF;
REM INSERTING into V_CKNUM
SET DEFINE OFF;
REM INSERTING into V_CKSONDETAILS
SET DEFINE OFF;
REM INSERTING into V_DBCKLIST
SET DEFINE OFF;
REM INSERTING into V_DBD
SET DEFINE OFF;
REM INSERTING into V_DBDDETAILS
SET DEFINE OFF;
REM INSERTING into V_DBDLIST
SET DEFINE OFF;
REM INSERTING into V_DBLIST
SET DEFINE OFF;
REM INSERTING into V_DDB
SET DEFINE OFF;
REM INSERTING into V_FETCHGOODSHEET
SET DEFINE OFF;
REM INSERTING into V_GETDBCKDETAILS
SET DEFINE OFF;
REM INSERTING into V_GETDBD
SET DEFINE OFF;
REM INSERTING into V_GETDBRKDETAILS
SET DEFINE OFF;
REM INSERTING into V_GETPERSON
SET DEFINE OFF;
REM INSERTING into V_GETUSABLECOUNT
SET DEFINE OFF;
REM INSERTING into V_GIFTRKD
SET DEFINE OFF;
REM INSERTING into V_GIFTRKDETAILS
SET DEFINE OFF;
REM INSERTING into V_GIFTRKREPORTDETAILS
SET DEFINE OFF;
REM INSERTING into V_INTOSTOCK
SET DEFINE OFF;
REM INSERTING into V_JCCKD
SET DEFINE OFF;
REM INSERTING into V_JCCKDETAILS
SET DEFINE OFF;
REM INSERTING into V_JCCKLIST
SET DEFINE OFF;
REM INSERTING into V_JCRKD
SET DEFINE OFF;
REM INSERTING into V_JCRKDETAILS
SET DEFINE OFF;
REM INSERTING into V_JCSTOCK
SET DEFINE OFF;
REM INSERTING into V_JKRW
SET DEFINE OFF;
REM INSERTING into V_JKRZ
SET DEFINE OFF;
REM INSERTING into V_JLDW
SET DEFINE OFF;
REM INSERTING into V_JSD
SET DEFINE OFF;
REM INSERTING into V_JSDETAILS
SET DEFINE OFF;
REM INSERTING into V_JSDFORAPI
SET DEFINE OFF;
REM INSERTING into V_JSDMORE
SET DEFINE OFF;
REM INSERTING into V_JSLIST
SET DEFINE OFF;
REM INSERTING into V_JSLISTFORAPI
SET DEFINE OFF;
REM INSERTING into V_JSLOG
SET DEFINE OFF;
REM INSERTING into V_JSRKDETAILS
SET DEFINE OFF;
REM INSERTING into V_JSRKDFORAPI
SET DEFINE OFF;
REM INSERTING into V_JSRKLIST
SET DEFINE OFF;
REM INSERTING into V_JSRKLISTFORAPI
SET DEFINE OFF;
REM INSERTING into V_JSSHEETFORAPI
SET DEFINE OFF;
REM INSERTING into V_JSTHDETAILS
SET DEFINE OFF;
REM INSERTING into V_KCDETAIL
SET DEFINE OFF;
REM INSERTING into V_KCPD
SET DEFINE OFF;
REM INSERTING into V_KCPDDETAILS
SET DEFINE OFF;
REM INSERTING into V_KCPDJSLIST
SET DEFINE OFF;
REM INSERTING into V_KCSUBDETAIL
SET DEFINE OFF;
REM INSERTING into V_KCXHPDLIST
SET DEFINE OFF;
REM INSERTING into V_LOCATION
SET DEFINE OFF;
REM INSERTING into V_MATERIAL_SELECT
SET DEFINE OFF;
REM INSERTING into V_OFFICESSPARESCOPE
SET DEFINE OFF;
REM INSERTING into V_ORDERDETAILS
SET DEFINE OFF;
REM INSERTING into V_ORDERINFO
SET DEFINE OFF;
REM INSERTING into V_ORDERINFOFORAPI
SET DEFINE OFF;
REM INSERTING into V_OTERTD
SET DEFINE OFF;
REM INSERTING into V_PDDETAILFORAPI
SET DEFINE OFF;
REM INSERTING into V_PDSHEETFORAPI
SET DEFINE OFF;
REM INSERTING into V_PERSONSCOPE
SET DEFINE OFF;
REM INSERTING into V_PERSON_ROLE_SCOPE
SET DEFINE OFF;
REM INSERTING into V_PRINT_DBCKD
SET DEFINE OFF;
REM INSERTING into V_PRINT_DBCKDETAILS
SET DEFINE OFF;
REM INSERTING into V_PRINT_DBRKD
SET DEFINE OFF;
REM INSERTING into V_PRINT_DBRKDETAILS
SET DEFINE OFF;
REM INSERTING into V_PRINT_JSD
SET DEFINE OFF;
REM INSERTING into V_PRINT_JSDETAILS
SET DEFINE OFF;
REM INSERTING into V_PRINT_LLD
SET DEFINE OFF;
REM INSERTING into V_PRINT_LLDETAILS
SET DEFINE OFF;
REM INSERTING into V_PRINT_TKD
SET DEFINE OFF;
REM INSERTING into V_PRINT_TKDETAILS
SET DEFINE OFF;
REM INSERTING into V_PROCKDETAIL
SET DEFINE OFF;
REM INSERTING into V_PRORKDETAIL
SET DEFINE OFF;
REM INSERTING into V_PURCHASEPLAN
SET DEFINE OFF;
REM INSERTING into V_QCJZDETAIL
SET DEFINE OFF;
REM INSERTING into V_RKCX
SET DEFINE OFF;
REM INSERTING into V_RKD
SET DEFINE OFF;
REM INSERTING into V_RKDETAILS
SET DEFINE OFF;
REM INSERTING into V_RKDETAILSFORAPI
SET DEFINE OFF;
REM INSERTING into V_RKDETAILSPRINT
SET DEFINE OFF;
REM INSERTING into V_RKDMORE
SET DEFINE OFF;
REM INSERTING into V_RKSUBDETAIL
SET DEFINE OFF;
REM INSERTING into V_ROLEMENUQ
SET DEFINE OFF;
REM INSERTING into V_ROLEPERSONS
SET DEFINE OFF;
REM INSERTING into V_ROLE_PERSON
SET DEFINE OFF;
REM INSERTING into V_ROUTESTEP
SET DEFINE OFF;
REM INSERTING into V_SCOPEHOUSE
SET DEFINE OFF;
REM INSERTING into V_SCOPESPARE
SET DEFINE OFF;
REM INSERTING into V_SHEET
SET DEFINE OFF;
REM INSERTING into V_SHEET_CK
SET DEFINE OFF;
REM INSERTING into V_SHEET_CK_ROUTE
SET DEFINE OFF;
REM INSERTING into V_SHEET_CURROUTE
SET DEFINE OFF;
REM INSERTING into V_SHEET_RK
SET DEFINE OFF;
REM INSERTING into V_SHEET_RKDETAIL
SET DEFINE OFF;
REM INSERTING into V_SHEET_RK_ROUTE
SET DEFINE OFF;
REM INSERTING into V_SHEET_ROUTE
SET DEFINE OFF;
REM INSERTING into V_SJSHEETFORAPI
SET DEFINE OFF;
REM INSERTING into V_SLDETAILS
SET DEFINE OFF;
REM INSERTING into V_SLNOPLANDETAIL
SET DEFINE OFF;
REM INSERTING into V_SLNOPLANDETAILS
SET DEFINE OFF;
REM INSERTING into V_SLOTHERDETAILS
SET DEFINE OFF;
REM INSERTING into V_SLPLANDETAIL
SET DEFINE OFF;
REM INSERTING into V_SONCKDETAILS
SET DEFINE OFF;
REM INSERTING into V_SONDBDETAILS
SET DEFINE OFF;
REM INSERTING into V_SQCKLIST
SET DEFINE OFF;
REM INSERTING into V_SQCKLISTFORAPI
SET DEFINE OFF;
REM INSERTING into V_SQD
SET DEFINE OFF;
REM INSERTING into V_SQDETAILS
SET DEFINE OFF;
REM INSERTING into V_SQLIST
SET DEFINE OFF;
REM INSERTING into V_SQNUM
SET DEFINE OFF;
REM INSERTING into V_SQNUMFORAPI
SET DEFINE OFF;
REM INSERTING into V_STOCKQUERYFORAPI
SET DEFINE OFF;
REM INSERTING into V_SXX
SET DEFINE OFF;
REM INSERTING into V_TAG
SET DEFINE OFF;
REM INSERTING into V_TEST
SET DEFINE OFF;
REM INSERTING into V_THD
SET DEFINE OFF;
REM INSERTING into V_THDETAILS
SET DEFINE OFF;
REM INSERTING into V_THD_PRINT
SET DEFINE OFF;
REM INSERTING into V_THLIST
SET DEFINE OFF;
REM INSERTING into V_THSTORELIST
SET DEFINE OFF;
REM INSERTING into V_THSUMMARYDETAILS
SET DEFINE OFF;
REM INSERTING into V_TKD
SET DEFINE OFF;
REM INSERTING into V_TKDETAILS
SET DEFINE OFF;
REM INSERTING into V_TKD_PRINT
SET DEFINE OFF;
REM INSERTING into V_TKLIST
SET DEFINE OFF;
REM INSERTING into V_USEDEP
SET DEFINE OFF;
REM INSERTING into V_WAITTASK
SET DEFINE OFF;
REM INSERTING into V_WAITTASK_MONITOR
SET DEFINE OFF;
REM INSERTING into V_WAREHOUSE
SET DEFINE OFF;
REM INSERTING into V_WZ_SECONDARYSTOCK
SET DEFINE OFF;
REM INSERTING into V_YWD
SET DEFINE OFF;
REM INSERTING into V_YWDBETAILS
SET DEFINE OFF;
REM INSERTING into V_YWDETAILS
SET DEFINE OFF;
REM INSERTING into V_YWDETAILSFORAPI
SET DEFINE OFF;
REM INSERTING into V_YWDFORAPI
SET DEFINE OFF;
REM INSERTING into V_YWLIST
SET DEFINE OFF;
REM INSERTING into V_YWLISTFORAPI
SET DEFINE OFF;
REM INSERTING into V_ZCD
SET DEFINE OFF;+-
REM INSERTING into V_ZCDETAILS
SET DEFINE OFF;
REM INSERTING into V_ZJTKDETAILS
SET DEFINE OFF;
REM INSERTING into V_ZRD
SET DEFINE OFF;
REM INSERTING into V_ZRDETAILS
SET DEFINE OFF;
--------------------------------------------------------
--  DDL for Index ACT_IDX_ATHRZ_PROCEDEF
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_ATHRZ_PROCEDEF" ON "ACT_RU_IDENTITYLINK" ("PROC_DEF_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_BYTEAR_DEPL
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_BYTEAR_DEPL" ON "ACT_GE_BYTEARRAY" ("DEPLOYMENT_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_EXEC_BUSKEY
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_EXEC_BUSKEY" ON "ACT_RU_EXECUTION" ("BUSINESS_KEY_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_EXE_PARENT
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_EXE_PARENT" ON "ACT_RU_EXECUTION" ("PARENT_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_EXE_PROCDEF
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_EXE_PROCDEF" ON "ACT_RU_EXECUTION" ("PROC_DEF_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index
=ACT_IDX_EXE_PROCINST
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_EXE_PROCINST" ON "ACT_RU_EXECUTION" ("PROC_INST_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_EXE_SUPER
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_EXE_SUPER" ON "ACT_RU_EXECUTION" ("SUPER_EXEC_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_HI_ACT_INST_END
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_HI_ACT_INST_END" ON "ACT_HI_ACTINST" ("END_TIME_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_HI_ACT_INST_EXEC
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_HI_ACT_INST_EXEC" ON "ACT_HI_ACTINST" ("EXECUTION_ID_", "ACT_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_HI_ACT_INST_PROCINST
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_HI_ACT_INST_PROCINST" ON "ACT_HI_ACTINST" ("PROC_INST_ID_", "ACT_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_HI_ACT_INST_START
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_HI_ACT_INST_START" ON "ACT_HI_ACTINST" ("START_TIME_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_HI_IDENT_LNK_PROCINST
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_HI_IDENT_LNK_PROCINST" ON "ACT_HI_IDENTITYLINK" ("PROC_INST_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_HI_IDENT_LNK_TASK
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_HI_IDENT_LNK_TASK" ON "ACT_HI_IDENTITYLINK" ("TASK_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_HI_IDENT_LNK_USER
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_HI_IDENT_LNK_USER" ON "ACT_HI_IDENTITYLINK" ("USER_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_HI_PROCVAR_NAME_TYPE
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_HI_PROCVAR_NAME_TYPE" ON "ACT_HI_VARINST" ("NAME_", "VAR_TYPE_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_HI_PROCVAR_PROC_INST
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_HI_PROCVAR_PROC_INST" ON "ACT_HI_VARINST" ("PROC_INST_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_HI_PROCVAR_TASK_ID
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_HI_PROCVAR_TASK_ID" ON "ACT_HI_VARINST" ("TASK_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_HI_PRO_INST_END
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_HI_PRO_INST_END" ON "ACT_HI_PROCINST" ("END_TIME_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_HI_PRO_I_BUSKEY
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_HI_PRO_I_BUSKEY" ON "ACT_HI_PROCINST" ("BUSINESS_KEY_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_HI_TASK_INST_PROCINST
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_HI_TASK_INST_PROCINST" ON "ACT_HI_TASKINST" ("PROC_INST_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_IDENT_LNK_GROUP
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_IDENT_LNK_GROUP" ON "ACT_RU_IDENTITYLINK" ("GROUP_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_IDENT_LNK_USER
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_IDENT_LNK_USER" ON "ACT_RU_IDENTITYLINK" ("USER_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_IDL_PROCINST
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_IDL_PROCINST" ON "ACT_RU_IDENTITYLINK" ("PROC_INST_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_MODEL_DEPLOYMENT
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_MODEL_DEPLOYMENT" ON "ACT_RE_MODEL" ("DEPLOYMENT_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_MODEL_SOURCE
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_MODEL_SOURCE" ON "ACT_RE_MODEL" ("EDITOR_SOURCE_VALUE_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_MODEL_SOURCE_EXTRA
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_MODEL_SOURCE_EXTRA" ON "ACT_RE_MODEL" ("EDITOR_SOURCE_EXTRA_VALUE_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_TASK_CREATE
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_TASK_CREATE" ON "ACT_RU_TASK" ("CREATE_TIME_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_TASK_EXEC
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_TASK_EXEC" ON "ACT_RU_TASK" ("EXECUTION_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_TASK_PROCDEF
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_TASK_PROCDEF" ON "ACT_RU_TASK" ("PROC_DEF_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_TASK_PROCINST
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_TASK_PROCINST" ON "ACT_RU_TASK" ("PROC_INST_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_TSKASS_TASK
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_TSKASS_TASK" ON "ACT_RU_IDENTITYLINK" ("TASK_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_VARIABLE_TASK_ID
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_VARIABLE_TASK_ID" ON "ACT_RU_VARIABLE" ("TASK_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_VAR_BYTEARRAY
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_VAR_BYTEARRAY" ON "ACT_RU_VARIABLE" ("BYTEARRAY_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_VAR_EXE
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_VAR_EXE" ON "ACT_RU_VARIABLE" ("EXECUTION_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_IDX_VAR_PROCINST
--------------------------------------------------------

  CREATE INDEX "ACT_IDX_VAR_PROCINST" ON "ACT_RU_VARIABLE" ("PROC_INST_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ACT_UNIQ_PROCDEF
--------------------------------------------------------

  CREATE UNIQUE INDEX "ACT_UNIQ_PROCDEF" ON "ACT_RE_PROCDEF" ("KEY_", "VERSION_", "TENANT_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BCD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BCD_PK" ON "BASE_ROLEMENU" ("ROLECODE", "MENUCODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BC_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BC_PK" ON "BASE_COMPANY" ("COMPANYID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BD_PK" ON "BASE_DICTIONARY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BFB_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BFB_PK" ON "BASE_FORMSET_BASE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BF_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BF_PK" ON "BASE_FORMSET" ("FORMDATA_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BM_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BM_PK" ON "BASE_MATERIAL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 5242880 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BM_PK_CODE
--------------------------------------------------------

  CREATE INDEX "BM_PK_CODE" ON "BASE_MATERIAL" ("CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 9437184 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BO_PK" ON "BASE_ORGANIZATION" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BPK_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BPK_PK" ON "BASE_PROVIDER" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BP_PK" ON "BASE_PERSON" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BRC_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BRC_PK" ON "BASE_ROLE" ("ROLECODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BRS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BRS_PK" ON "BASE_ROUTESTEP" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BR_PK" ON "BASE_RECEIPT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BS_PK" ON "BASE_SPAREPARTSCATE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 131072 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BUNIT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BUNIT_PK" ON "BASE_UNITCONVERSION" ("UNITID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BU_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BU_PK" ON "BASE_USERROLE" ("USERID", "ROLECODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index BW_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BW_PK" ON "BASE_WAREHOUSE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 2097152 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index B_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "B_PK" ON "BASE_BUTTON" ("CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "ID" ON "BASE_LOG" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 458752 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index MBD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MBD_PK" ON "BASE_ROLEMENUBUTTON" ("ROLECODE", "MENUCODE", "BUTTONCODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index MB_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MB_PK" ON "BASE_MENUBUTTON" ("MENUCODE", "BUTTONCODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index M_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "M_PK" ON "BASE_MENU" ("CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_BASE_APPLYDEP
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_BASE_APPLYDEP" ON "BASE_APPLYDEP" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_BASE_CATEGORY_ASSET
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_BASE_CATEGORY_ASSET" ON "BASE_CATEGORY_ASSET" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_BASE_OFFICES_SCOPE
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_BASE_OFFICES_SCOPE" ON "BASE_OFFICES_SCOPE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_BASE_PRINTTEMP
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_BASE_PRINTTEMP" ON "BASE_PRINTTEMP" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_BASE_USEDEP
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_BASE_USEDEP" ON "BASE_USEDEP" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_FORMPRINT
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_FORMPRINT" ON "BASE_FORMPRINT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_INFTASK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_INFTASK" ON "INF_TASK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_INFTASKLOG
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_INFTASKLOG" ON "INF_TASKLOG" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 2097152 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_MES_CK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_MES_CK" ON "MES_CK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  
--------------------------------------------------------
--  DDL for Index PK_MES_RK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_MES_RK" ON "MES_RK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  
--------------------------------------------------------
--  DDL for Index PK_ST_MAXCODE
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_ST_MAXCODE" ON "ST_MAXCODE" ("ST_MAXCODE_PREFIX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_ATTACHFILE
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WZ_ATTACHFILE" ON "WZ_ATTACHFILE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_ORDERINFO
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WZ_ORDERINFO" ON "WZ_ORDERINFO" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_PDDETAIL
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WZ_PDDETAIL" ON "WZ_PDDETAIL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_PURCHASEPLAN
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WZ_PURCHASEPLAN" ON "WZ_PURCHASEPLAN" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_RECEIVINGLOG
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WZ_RECEIVINGLOG" ON "WZ_RECEIVINGLOG" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_SD_SHEETDETAILID
--------------------------------------------------------

  CREATE INDEX "PK_WZ_SD_SHEETDETAILID" ON "WZ_SHEETDETAIL" ("SHEETDETAILID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_SD_SHEETID
--------------------------------------------------------

  CREATE INDEX "PK_WZ_SD_SHEETID" ON "WZ_SHEETDETAIL" ("SHEETID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_SHEET
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WZ_SHEET" ON "WZ_SHEET" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_SHEETCKDETAIL
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WZ_SHEETCKDETAIL" ON "WZ_SHEETCKDETAIL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_SHEETDETAIL
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WZ_SHEETDETAIL" ON "WZ_SHEETDETAIL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_SHEETRKDETAIL
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WZ_SHEETRKDETAIL" ON "WZ_SHEETRKDETAIL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_SHEET_CK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WZ_SHEET_CK" ON "WZ_SHEET_CK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_SHEET_RK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WZ_SHEET_RK" ON "WZ_SHEET_RK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_STOCK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WZ_STOCK" ON "WZ_STOCK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index PK_WZ_WAITTASK
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_WZ_WAITTASK" ON "WZ_WAITTASK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SCOPEID
--------------------------------------------------------

  CREATE UNIQUE INDEX "SCOPEID" ON "BASE_PERSON_SCOPE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SHEETROUTEHISTORY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SHEETROUTEHISTORY_PK" ON "WZ_ROUTEHISTORY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 131072 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017598
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017598" ON "ACT_RE_DEPLOYMENT" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017600
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017600" ON "ACT_GE_BYTEARRAY" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017604
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017604" ON "ACT_GE_PROPERTY" ("NAME_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017612
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017612" ON "ACT_HI_ACTINST" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017617
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017617" ON "ACT_HI_COMMENT" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017624
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017624" ON "ACT_HI_IDENTITYLINK" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017629
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017629" ON "ACT_HI_PROCINST" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017630
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017630" ON "ACT_HI_PROCINST" ("PROC_INST_ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017633
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017633" ON "ACT_HI_TASKINST" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017636
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017636" ON "ACT_HI_VARINST" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017638
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017638" ON "ACT_ID_GROUP" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  
--------------------------------------------------------
--  DDL for Index SYS_C0017651
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017651" ON "ACT_RE_PROCDEF" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017662
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017662" ON "ACT_RE_MODEL" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017667
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017667" ON "ACT_RU_EXECUTION" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017682
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017682" ON "ACT_RU_TASK" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017687
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017687" ON "ACT_RU_IDENTITYLINK" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017699
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017699" ON "ACT_RU_VARIABLE" ("ID_") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017706
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017706" ON "BASE_DIC_ACT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index SYS_C0017714
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0017714" ON "SYS_FORMTEMPLATE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index TEMP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "TEMP_PK" ON "TEMP_DATA" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index WZSUBRK_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "WZSUBRK_ID" ON "WZ_SHEETRKSUBDETAIL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index WZSUB_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "WZSUB_ID" ON "WZ_SHEETSUBDETAIL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1
  FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Index WZ_STOCKLOGID
--------------------------------------------------------

  CREATE UNIQUE INDEX "WZ_STOCKLOGID" ON "WZ_STORELOG" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
--------------------------------------------------------
--  DDL for Trigger BASE_CATEGORY_ASSET_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "BASE_CATEGORY_ASSET_TG" --创建一个名为WZ_PLANTOAPPLY_TG的触发器
  BEFORE insert ON BASE_CATEGORY_ASSET               --定义发生什么事件时激发触发器，这里定义为在对WZ_PLANTOAPPLY表进行插入之前激发触发器
  FOR EACH ROW                            --循环每一行
  begin
  select BASE_CATEGORY_ASSET_SEQUENCE.nextval into:New.ID from dual; --查询序列当中nextval返回的值并返回给序列。
  end;




/
ALTER TRIGGER "BASE_CATEGORY_ASSET_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger BASE_COSTUPDATE_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "BASE_COSTUPDATE_TG" 
  BEFORE insert ON BASE_COSTUPDATE            
  FOR EACH ROW                            
  begin
  select BASE_CostUpdate_sequence.nextval into:New.ID from dual; 
  end;

/
ALTER TRIGGER "BASE_COSTUPDATE_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger BASE_DICTIONARY_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "BASE_DICTIONARY_TG" --创建一个名为Base_Log_TG的触发器
  BEFORE insert ON Base_Dictionary               --定义发生什么事件时激发触发器，这里定义为在对Base_Log表进行插入之前激发触发器
  FOR EACH ROW                            --循环每一行
  begin
  select basedictionary_sequence.nextval into:New.ID from dual; --查询序列当中nextval返回的值并返回给序列。
  end;



/
ALTER TRIGGER "BASE_DICTIONARY_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger BASE_FORMSET_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "BASE_FORMSET_TG" --创建一个名为Base_Log_TG的触发器
  BEFORE insert ON Base_FormSet               --定义发生什么事件时激发触发器，这里定义为在对Base_Log表进行插入之前激发触发器
  FOR EACH ROW                            --循环每一行
  begin
  select baseformSet_sequence.nextval into:New.FormData_ID from dual; --查询序列当中nextval返回的值并返回给序列。
  end;



/
ALTER TRIGGER "BASE_FORMSET_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger BASE_LOG_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "BASE_LOG_TG" 
  BEFORE insert ON Base_Log
  FOR EACH ROW
  begin
  select baselog_sequence.nextval into:New.ID from dual;
  end;



/
ALTER TRIGGER "BASE_LOG_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger BASE_MATERIAL_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "BASE_MATERIAL_TG" --创建一个名为Base_Log_TG的触发器
  BEFORE insert ON Base_Material               --定义发生什么事件时激发触发器，这里定义为在对Base_Log表进行插入之前激发触发器
  FOR EACH ROW                            --循环每一行
  begin
  select basematerial_sequence.nextval into:New.ID from dual; --查询序列当中nextval返回的值并返回给序列。
  end;



/
ALTER TRIGGER "BASE_MATERIAL_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger BASE_OFFICESSCOPE_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "BASE_OFFICESSCOPE_TG" --创建一个名为BASE_OFFICESSCOPE_TG的触发器
  BEFORE insert ON BASE_OFFICES_SCOPE               --定义发生什么事件时激发触发器，这里定义为在对Base_Log表进行插入之前激发触发器
  FOR EACH ROW                            --循环每一行
  begin
  select BASEOFFICESSCOPE_SEQUENCE.nextval into:New.ID from dual; --查询序列当中nextval返回的值并返回给序列。
  end;


/
ALTER TRIGGER "BASE_OFFICESSCOPE_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger BASE_PERSONSCOPE_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "BASE_PERSONSCOPE_TG" --创建一个名为Base_Log_TG的触发器
  BEFORE insert ON base_person_scope               --定义发生什么事件时激发触发器，这里定义为在对Base_Log表进行插入之前激发触发器
  FOR EACH ROW                            --循环每一行
  begin
  select scope_sequence.nextval into:New.ID from dual; --查询序列当中nextval返回的值并返回给序列。
  end;



/
ALTER TRIGGER "BASE_PERSONSCOPE_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger BASE_PERSON_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "BASE_PERSON_TG" --创建一个名为Base_Log_TG的触发器
  BEFORE insert ON Base_Person               --定义发生什么事件时激发触发器，这里定义为在对Base_Log表进行插入之前激发触发器
  FOR EACH ROW                            --循环每一行
  begin
  select baseperson_sequence.nextval into:New.ID from dual; --查询序列当中nextval返回的值并返回给序列。
  end;



/
ALTER TRIGGER "BASE_PERSON_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger BASE_PROVIDER_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "BASE_PROVIDER_TG" --创建一个名为Base_Log_TG的触发器
  BEFORE insert ON Base_Provider               --定义发生什么事件时激发触发器，这里定义为在对Base_Log表进行插入之前激发触发器
  FOR EACH ROW                            --循环每一行
  begin
  select baseprovider_sequence.nextval into:New.ID from dual; --查询序列当中nextval返回的值并返回给序列。
  end;



/
ALTER TRIGGER "BASE_PROVIDER_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger BASE_RECEIPT_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "BASE_RECEIPT_TG" --创建一个名为Base_Log_TG的触发器
  BEFORE insert ON Base_Receipt               --定义发生什么事件时激发触发器，这里定义为在对Base_Log表进行插入之前激发触发器
  FOR EACH ROW                            --循环每一行
  begin
  select basereceipt_sequence.nextval into:New.ID from dual; --查询序列当中nextval返回的值并返回给序列。
  end;



/
ALTER TRIGGER "BASE_RECEIPT_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger BASE_ROUTESTEP_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "BASE_ROUTESTEP_TG" --创建一个名为Base_Log_TG的触发器
  BEFORE insert ON Base_RouteStep               --定义发生什么事件时激发触发器，这里定义为在对Base_Log表进行插入之前激发触发器
  FOR EACH ROW                            --循环每一行
  begin
  select baseroutestep_sequence.nextval into:New.ID from dual; --查询序列当中nextval返回的值并返回给序列。
  end;



/
ALTER TRIGGER "BASE_ROUTESTEP_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger BASE_UNITCONVERSION_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "BASE_UNITCONVERSION_TG" --创建一个名为Base_Log_TG的触发器
  BEFORE insert ON Base_UnitConversion               --定义发生什么事件时激发触发器，这里定义为在对Base_Log表进行插入之前激发触发器
  FOR EACH ROW                            --循环每一行

begin
  select BASE_UNITCONVERSION_EQUENCE.nextval into:New.UNITID from dual; --查询序列当中nextval返回的值并返回给序列。
  end;


/
ALTER TRIGGER "BASE_UNITCONVERSION_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger INF_TASKLOG_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "INF_TASKLOG_TG" /*创建一个名为Base_Log_TG的触发器*/
  BEFORE insert ON INF_TASKLOG               /*定义发生什么事件时激发触发器，这里定义为在对Base_Log表进行插入之前激发触发器*/
  FOR EACH ROW                            /*循环每一行*/

begin
  select INF_TASKLOG_SEQUENCE.nextval into:New.ID from dual; /*查询序列当中nextval返回的值并返回给序列。*/
  end;



/
ALTER TRIGGER "INF_TASKLOG_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger WZ_ATTACHFILE_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "WZ_ATTACHFILE_TG" --创建一个名为Base_Log_TG的触发器
  BEFORE insert ON WZ_ATTACHFILE               --定义发生什么事件时激发触发器，这里定义为在对Base_Log表进行插入之前激发触发器
  FOR EACH ROW                            --循环每一行
  begin
  select WZFILE_SEQUENCE.nextval into:New.ID from dual; --查询序列当中nextval返回的值并返回给序列。
  end;



/
ALTER TRIGGER "WZ_ATTACHFILE_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger WZ_STORELOG_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "WZ_STORELOG_TG" --创建一个名为Base_Log_TG的触发器
  BEFORE insert ON WZ_STORELOG               --定义发生什么事件时激发触发器，这里定义为在对Base_Log表进行插入之前激发触发器
  FOR EACH ROW                            --循环每一行

begin
  select WZSTOCKLOG_SEQUENCE.nextval into:New.ID from dual; --查询序列当中nextval返回的值并返回给序列。
  end;



/
ALTER TRIGGER "WZ_STORELOG_TG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger wz_receivinglog_TG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "wz_receivinglog_TG" 
  BEFORE insert ON wz_receivinglog
  FOR EACH ROW

begin
  select WZRECEIVINGLOG_SEQUENCE.nextval into:New.ID from dual;
  end;


/
ALTER TRIGGER "wz_receivinglog_TG" ENABLE;
--------------------------------------------------------
--  DDL for Procedure ADD_FIRST_WAITTASK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "ADD_FIRST_WAITTASK" 
(
/*
创建：李鹏  2016-08-29
说明：创建第一个待办任务
*/
     PSHEETKIND         varchar2,
     PROUTESTEPID    integer,
     PSHEETID          integer,
     PMENUID           varchar2,
     PPERSONID         integer,
     PJUMPPATH         varchar2,
     PZTID             integer,
     RetInt       out    integer,
     RetHintStr      out  varchar2,
     RetErrorStr     out varchar2
)
is
   tempNum number;
   tempNum_1 number;
   maxNum  number;
   v_PASSWORD varchar2(50);
   RETSYSTEMLOG varchar2(200);
   TABLENAME varchar2(50);
   DATATYPE varchar2(50);
   DATA clob;
   PINPUTCONDITION varchar2(200);
   PINPUTPROC varchar2(50);
   POPERPROC varchar2(50);
   PLEVELCODE varchar2(200);

   PROUTEID integer;    --流程ID
   PPREVID integer;         --前置步骤ID
   PPREVPERSONID integer;   --提交人ID
   POPERPERSONID integer;   --处理人ID
   POPERROLEID integer;     --处理角色ID
   PNEXTPERSONID integer;   --下一步骤处理人ID

   PSHEETDEPARTID integer;   --单据所属部门
   PSHEETDEPARTCODE varchar2(200);  --单据所属的层级代码
   PJUDGEINT   integer;
   PJUDGESTRING   varchar2(50);
   PJUDGEERRSTRING   varchar2(50);

   PROUTEDETAILNAME varchar2(50);
   PSHEETSTATUS integer;
   PSTATUS integer;
   PROUTEDETAILID_bak  integer;
   maxid integer;
   SYS_DATE DATE;
   PGUID   CHAR (38);
begin
   create_routehistory(PSHEETKIND,PSHEETID, RetErrorStr);
   --根据单据ID获得流程ID
   CASE 
      WHEN PSHEETKIND='RK' or PSHEETKIND='GiftRK' THEN
        SELECT A.ROUTEID INTO PROUTEID  FROM V_SHEET_RK A WHERE ID = PSHEETID;
      WHEN PSHEETKIND='CK' THEN
        SELECT A.ROUTEID INTO PROUTEID  FROM V_SHEET_CK A WHERE ID = PSHEETID;
      ELSE
         SELECT A.ROUTEID INTO PROUTEID  FROM V_SHEET A WHERE ID = PSHEETID;
   END CASE;        
   --获取单据对应的制单步骤
   SELECT A.Id,A.name,A.SHEETSTATUSID into PROUTEDETAILID_bak ,PROUTEDETAILNAME,PSHEETSTATUS  
   FROM V_ROUTESTEP A WHERE A.ROUTEID = PROUTEID  AND A.ROUTETYPE = 0 and rownum=1;
   --PROUTEDETAILID:=PROUTEDETAILID_bak;
   --新建单据时处理人就应该是当前提交的人
   POPERPERSONID := PPERSONID;
   POPERROLEID := 0;
       ---校验成功,执行数据插入
   IF  PROUTEDETAILID_bak > 0
   THEN
     IF PSHEETSTATUS<>41 THEN
     --设置单据状态为制单中0,单据的状态统一定为 0：制单中，1：流转中 ,2 :已完成（通过）  3、已终止（拒绝）  4、挂起（暂缓）
     CASE 
        WHEN PSHEETKIND='RK' or PSHEETKIND='GiftRK' THEN
          /*UPDATE WZ_SHEET_RK A SET  A.STATUS = 0,A.ROUTEID = PROUTEID
          WHERE ID =PSHEETID;*/
          UPDATE WZ_SHEET_RK A SET A.STATUS=PSHEETSTATUS,A.ROUTE_STEPID=PROUTEDETAILID_bak
          WHERE ID=PSHEETID;
        WHEN PSHEETKIND='CK' THEN
          /*UPDATE WZ_SHEET_RK A SET  A.STATUS = 0,A.ROUTEID = PROUTEID
          WHERE ID =PSHEETID;*/ 
          UPDATE WZ_SHEET_CK A  SET A.STATUS=PSHEETSTATUS,A.ROUTE_STEPID=PROUTEDETAILID_bak
          WHERE ID=PSHEETID;
        ELSE
          /*UPDATE WZ_SHEET A SET  A.STATUS = 0,A.ROUTEID = PROUTEID
          WHERE ID =PSHEETID; */
          UPDATE WZ_SHEET A SET A.STATUS=PSHEETSTATUS,A.ROUTE_STEPID=PROUTEDETAILID_bak
          WHERE ID=PSHEETID;
      END CASE;
    ELSE
       PSHEETSTATUS:=39;
       CASE 
        WHEN PSHEETKIND='RK' or PSHEETKIND='GiftRK' THEN
          /*UPDATE WZ_SHEET_RK A SET  A.STATUS = 0,A.ROUTEID = PROUTEID
          WHERE ID =PSHEETID;*/
          UPDATE WZ_SHEET_RK A SET A.STATUS=PSHEETSTATUS,A.ROUTE_STEPID=PROUTEDETAILID_bak
          WHERE ID=PSHEETID;
        WHEN PSHEETKIND='CK' THEN
          /*UPDATE WZ_SHEET_RK A SET  A.STATUS = 0,A.ROUTEID = PROUTEID
          WHERE ID =PSHEETID;*/ 
          UPDATE WZ_SHEET_CK A  SET A.STATUS=PSHEETSTATUS,A.ROUTE_STEPID=PROUTEDETAILID_bak
          WHERE ID=PSHEETID;
        ELSE
          /*UPDATE WZ_SHEET A SET  A.STATUS = 0,A.ROUTEID = PROUTEID
          WHERE ID =PSHEETID; */
          UPDATE WZ_SHEET A SET A.STATUS=PSHEETSTATUS,A.ROUTE_STEPID=PROUTEDETAILID_bak
          WHERE ID=PSHEETID;
      END CASE;     

    END IF;       
     RetErrorStr := '1';
     IF RetErrorStr = '1'
     then
       BEGIN
        SELECT SYS_GUID () INTO PGUID FROM DUAL;
        select BASEROUTESTEP_SEQUENCE.nextval  into maxid from dual;
        select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;
        ---插入数据
        INSERT INTO WZ_WAITTASK (ID,GUID,
                                  RouteStepID,
                                  MENUID,
                                  SHEETID,
                                  HandingManID,
                                  HandingTime,
                                  PrevSubmitManID,
                                  PrevSubmitTime,
                                  JUMPPATH,
                                  HandSuggestion,
                                  HANDRESULT,  --0，未处理，1通过、不通过、2、驳回、3、终止
                                  ENCRYPTCODE,
                                  STATUS,
                                  ExtendInt1,
                                  ExtendInt3,
                                  ExtendInt4,
                                  ExtendString1,
                                  ZTID,
                                  CREATOR,
                                  --OPERRESULT,
                                  CreateTime)
                     VALUES  (maxid,PGUID,
                                PROUTEDETAILID_bak,
                                PMENUID,
                                  PSHEETID,
                                  POPERPERSONID,
                                  NULL,
                                  PPERSONID,
                                  SYS_DATE,
                                  PJUMPPATH,
                                  '',
                                  0,
                                  '',
                                  0,
                                  0,
                                  0,
                                  0,
                                  '制单中',
                                  PZTID,
                                  PPERSONID,
                                  --0,
                                  SYS_DATE);

--此处进行业务流程的处理，生成当前单据的业务流程表
          create_routehistory(PSHEETKIND,PSHEETID, RetErrorStr);
          RetInt := POPERPERSONID;   --返回处理人的ID
          RetErrorStr :='1';
          RetHintStr :=PROUTEDETAILNAME;
               --记录操作日志
           WRITE_BASE_LOG(1,
                         PROUTEDETAILNAME,
                         '新增待办事项',
                         PSHEETID,
                         0,
                                        PPERSONID,
                                        RETSYSTEMLOG);

        exception
          when OTHERS then
           -- SELECT @PERRORSTRING =[text]  from sys.messages where message_id = @@ERROR and language_id=2052
            RetErrorStr := '新增待办事项失败！'||RetErrorStr;

        END;

        END IF;

        else
        begin
          RetErrorStr  := '新增待办事项失败,未指定业务流程步骤！';
        end;
        end if;


end ADD_FIRST_WAITTASK;




/
--------------------------------------------------------
--  DDL for Procedure ADD_NEW_WAITTASK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "ADD_NEW_WAITTASK" 
(
                           PPSheetKind       varchar2, --单据种类
                           PROUTEDETAILID    integer, --流程步骤Id
                           PSHEETID          integer,  --单据id
                           PPREVROUTEID      integer,  --上一步骤id
                           PMENUID           varchar2,  --菜单id
                           PPERSONID         integer,  --上一提交人Id
                           PCURPERSONID       integer, --处理人Id
                           PPERSONIDLIST     varchar2, --多个处理人Id
                           PJUMPPATH         varchar2,  --跳转路径
                           PSHEETDETAILID       integer, --明细步骤Id
                           PROCESSHINT       varchar2,   --待办提示
                           PZTID             integer,  --zhangtaoid
                           PRETINT        out   integer,
                           PRETHINT     out   varchar2,
                           PRETERRORSTR   out   varchar2
 )
is
   PSheetKind varchar2(64);
   PRETSYSTEMLOG NVARCHAR2(200);
   PINPUTCONDITION NVARCHAR2(200);
   PINPUTPROC NVARCHAR2(50);
   POPERPROC NVARCHAR2(50);
   PLEVELCODE NVARCHAR2(200);
   PROUTEID INT;    --流程ID
   PPREVID INT;        --前置步骤ID
   PPREVPERSONID INT;   --提交人ID
   POPERPERSONID INT;   --处理人ID
   POPERPERSONID1 INT;   --处理人ID1
   POPERPERSONID2 INT;   --处理人ID2
   POPERPERSONID3 INT;   --处理人ID3
   POPERPERSONID4 INT;   --处理人ID4
   POPERROLEID INT;     --处理角色ID
   PNEXTPERSONID INT;   --下一步骤处理人ID
   PSHEETDEPARTID INT;   --单据所属部门
   PSHEETDEPARTCODE NVARCHAR2(200);  --单据所属的层级代码
   PJUDGEINT   INT;
   PJUDGESTRING   NVARCHAR2(50);
   PJUDGEERRSTRING   NVARCHAR2(50);
   PROUTEDETAILNAME NVARCHAR2(50);
   PSTATUS INT;
   TEMPINT INT;
   TYPE REF_CURESOR_TYPE IS REF CURSOR;
   ROLE_CURSOR REF_CURESOR_TYPE;
   PPROUTEDETAILID INT;
   PERROR INT;
   PGUID NVARCHAR2(64);
   maxid INT;
   SYS_DATE DATE;
  -- PPSheetKind VARCHAR2(64);
BEGIN
  if PPSheetKind<>'' or PPSheetKind is not null  then
          PSheetKind:=PPSheetKind;
        end if;
   create_routehistory(PSheetKind,PSHEETID,PRetErrorStr);
   --根据单据ID获得流程ID
   --PPSheetKind:=PSheetKind;
   CASE  WHEN PSheetKind='RK' THEN 
         SELECT A.ROUTEID INTO PROUTEID  FROM V_SHEET_RK A WHERE ID = PSHEETID;
      WHEN PSheetKind='CK' THEN 
         SELECT A.ROUTEID INTO PROUTEID  FROM V_SHEET_CK A WHERE ID = PSHEETID;
      ELSE 
         SELECT A.ROUTEID INTO PROUTEID  FROM V_SHEET A WHERE ID = PSHEETID; 
   END CASE;      
   --如果未指定步骤ID（新建单据时）
   if PROUTEDETAILID = 0 THEN
   BEGIN
       --获取单据对应的制单步骤
      SELECT A.Id,A.name INTO PPROUTEDETAILID,PROUTEDETAILNAME 
      FROM V_ROUTESTEP A WHERE A.ROUTEID = PROUTEID  AND A.ROUTETYPE = 0;
      --新建单据时处理人设为0（因为还没有提交，因此处理人是0）
      POPERPERSONID := PPERSONID;
      POPERROLEID := 0;
   END;
   ELSE
        --此处获得待办事项的处理人ID和角色ID
        SELECT A.name,A.PERSONID,A.ROLEID INTO PROUTEDETAILNAME ,POPERPERSONID,POPERROLEID FROM V_ROUTESTEP A  where A.ID= PROUTEDETAILID;
   END IF;
   IF  PROUTEDETAILID > 0 THEN
    PRETERRORSTR := '1';

  IF PCURPERSONID > 0 THEN

       POPERPERSONID :=PCURPERSONID;
       POPERPERSONID1 := 0;
       POPERPERSONID2 := 0;
       PRETERRORSTR := '1';
     END IF;

  IF (POPERPERSONID > 0) THEN
      SELECT COUNT(*) INTO TEMPINT FROM WZ_WAITTASK A WHERE A.SHEETID = PSHEETID AND A.ROUTESTEPID = PROUTEDETAILID AND 
      STATUS = 0 ;

       IF   TEMPINT IS NULL
             THEN
               TEMPINT := 0;
             END IF;



      IF TEMPINT=0 THEN 
           --先将已经处理过的流程设置为历史流程
        UPDATE WZ_WAITTASK A SET A.EXTENDINT4 = 1 WHERE SHEETID = PSHEETID AND A.ROUTESTEPID = PROUTEDETAILID AND 

A.HANDINGMANID = POPERPERSONID;
        SELECT SYS_GUID () INTO PGUID FROM DUAL;
        select BASEROUTESTEP_SEQUENCE.nextval  into maxid from dual;
        select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;
        ---插入数据
        INSERT INTO WZ_WAITTASK (ID,GUID,
                                  RouteStepID,
                                  MENUID,
                                  SHEETID,
                                  HandingManID,
                                  --HandingTime,
                                  PrevSubmitManID,
                                  PrevSubmitTime,
                                  JUMPPATH,
                                  HandSuggestion,
                                  HANDRESULT,  --0，未处理，1通过、不通过、2、驳回、3、终止
                                  ENCRYPTCODE,
                                  STATUS,
                                  ExtendInt1,           --上一步骤Id
                                  ExtendInt3,
                                  ExtendInt4,
                                  ExtendString1,        --每一待办步骤处理的提示
                                  ZTID,
                                  CREATOR,
                                  --OPERRESULT,
                                  CreateTime)
                     VALUES  (maxid,PGUID,
                                  PROUTEDETAILID,   --下一待办步骤Id
                                  PMENUID,
                                  PSHEETID,
                                  POPERPERSONID,    --待办处理人Id
                                 -- SYS_DATE,       --待办处理时间
                                  PPERSONID,       --上一提交人Id
                                  SYS_DATE,        --提交时间
                                  PJUMPPATH,
                                  '',
                                  0,
                                  '',
                                  0,
                                  0,
                                  0,
                                  0,
                                  '待审核',
                                  PZTID,
                                  PPERSONID,
                                  --0,
                                  SYS_DATE);
       END IF;  
       PERROR:=0;                     
   END IF ; 

  IF (POPERPERSONID =0 AND PPERSONIDLIST<>'') THEN
      open ROLE_CURSOR for SELECT * from table(f_SplitToInt(PPERSONIDLIST, ','));
      loop
           fetch ROLE_CURSOR into POPERPERSONID;
           exit when ROLE_CURSOR%notfound; 
              SELECT COUNT(*) INTO TEMPINT FROM WZ_WAITTASK A WHERE A.SHEETID = PSHEETID AND A.ROUTESTEPID = PROUTEDETAILID 

AND STATUS = 0 ;
           IF TEMPINT=0 THEN 
               --先将已经处理过的流程设置为历史流程
              UPDATE WZ_WAITTASK A SET A.EXTENDINT4 = 1 WHERE SHEETID = PSHEETID AND A.ROUTESTEPID = PROUTEDETAILID AND 

A.HANDINGMANID = POPERPERSONID;
              SELECT SYS_GUID () INTO PGUID FROM DUAL;
              select BASEROUTESTEP_SEQUENCE.nextval  into maxid from dual;
              select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;
              ---插入数据
              INSERT INTO WZ_WAITTASK (ID,GUID,
                                        RouteStepID,
                                        MENUID,
                                        SHEETID,
                                        HandingManID,
                                        --HandingTime,
                                        PrevSubmitManID,
                                        PrevSubmitTime,
                                        JUMPPATH,
                                        HandSuggestion,
                                        HANDRESULT,  --0，未处理，1通过、不通过、2、驳回、3、终止
                                        ENCRYPTCODE,
                                        STATUS,
                                        ExtendInt1,           --上一步骤Id
                                        ExtendInt3,
                                        ExtendInt4,
                                        ExtendString1,        --每一待办步骤处理的提示
                                        ZTID,
                                        CREATOR,
                                        --OPERRESULT,
                                        CreateTime)
                           VALUES  (maxid,PGUID,
                                        PROUTEDETAILID,   --下一待办步骤Id
                                        PMENUID,
                                        PSHEETID,
                                        POPERPERSONID,    --待办处理人Id
                                       -- SYS_DATE,       --待办处理时间
                                        PPERSONID,       --上一提交人Id
                                        SYS_DATE,        --提交时间
                                        PJUMPPATH,
                                        '',
                                        0,
                                        '',
                                        0,
                                        PPREVROUTEID,   --上一步骤Id
                                        0,
                                        0,
                                        '待审核',
                                        PZTID,
                                        PPERSONID,
                                        --0,
                                        SYS_DATE);
            END IF;    --TEMPINT                   
          END LOOP;
        CLOSE ROLE_CURSOR;--关闭游标 
        PERROR:=0; 
  END IF;                   

  IF(POPERROLEID > 0) THEN
        POPERPERSONID := 0;
        POPERPERSONID1 := 0;
        POPERPERSONID2 := 0;
        --获得单据的部门ID，和部门层级代码
        CASE 
          WHEN PSheetKind='RK' THEN 
            SELECT A.DEPARTID,A.DEPARTLEVELCODE INTO PSHEETDEPARTID,PSHEETDEPARTCODE  from V_SHEET_RK A where A.ID = 

PSHEETID;
          WHEN PSheetKind='CK' THEN 
            SELECT A.ROUTEID INTO PROUTEID  FROM V_SHEET_CK A WHERE ID = PSHEETID;
          ELSE 
            SELECT A.ROUTEID INTO PROUTEID  FROM V_SHEET A WHERE ID = PSHEETID; 
        END CASE;   
        --创建游标，获得对应角色、管理部门下的相应的人员的ID
        OPEN ROLE_CURSOR  FOR
            --上游 下一步骤处理人的所属部门包含制单部门 在组织架构位于部门的上级某节点
            SELECT A.id  from V_PERSON_ROLE_SCOPE A WHERE A.Rolecode = POPERROLEID and A.departid = PSHEETDEPARTID;
            --下游 下一步骤处理人的所属部门属于制单部门 在组织架构位于部门的下级某节点
            --中游 上游下游如果是有规律的 则直接用SQL脚本实现 如果不属于上游下游的，属于中游 规律不通用借助中间表 然后通过SQL脚本实现
         LOOP
           FETCH ROLE_CURSOR  INTO POPERPERSONID;
           EXIT WHEN ROLE_CURSOR%NOTFOUND;
           SELECT COUNT(*) INTO TEMPINT FROM WZ_WAITTASK A WHERE A.SHEETID = PSHEETID AND A.ROUTESTEPID = PROUTEDETAILID 

AND STATUS = 0 ;
           IF TEMPINT=0 THEN 
               --先将已经处理过的流程设置为历史流程
              UPDATE WZ_WAITTASK A SET A.EXTENDINT4 = 1 WHERE SHEETID = PSHEETID AND A.ROUTESTEPID = PROUTEDETAILID AND 

A.HANDINGMANID = POPERPERSONID;
              SELECT SYS_GUID () INTO PGUID FROM DUAL;
              select BASEROUTESTEP_SEQUENCE.nextval  into maxid from dual;
              select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;
              ---插入数据
              INSERT INTO WZ_WAITTASK (ID,GUID,
                                        RouteStepID,
                                        MENUID,
                                        SHEETID,
                                        HandingManID,
                                        --HandingTime,
                                        PrevSubmitManID,
                                        PrevSubmitTime,
                                        JUMPPATH,
                                        HandSuggestion,
                                        HANDRESULT,  --0，未处理，1通过、不通过、2、驳回、3、终止
                                        ENCRYPTCODE,
                                        STATUS,
                                        ExtendInt1,           --上一步骤Id
                                        ExtendInt3,
                                        ExtendInt4,
                                        ExtendString1,        --每一待办步骤处理的提示
                                        ZTID,
                                        CREATOR,
                                        --OPERRESULT,
                                        CreateTime)
                           VALUES  (maxid,PGUID,
                                        PROUTEDETAILID,   --下一待办步骤Id
                                        PMENUID,
                                        PSHEETID,
                                        POPERPERSONID,    --待办处理人Id
                                       -- SYS_DATE,       --待办处理时间
                                        PPERSONID,       --上一提交人Id
                                        SYS_DATE,        --提交时间
                                        PJUMPPATH,
                                        '',
                                        0,
                                        '',
                                        0,
                                        PPREVROUTEID,   --上一步骤Id
                                        0,
                                        0,
                                        '待审核',
                                        PZTID,
                                        PPERSONID,
                                        --0,
                                        SYS_DATE);
            END IF;    --TEMPINT                   
          END LOOP;
        CLOSE ROLE_CURSOR;--关闭游标
        PERROR:=0;
    END IF;

    END IF;


    IF (PERROR=0) THEN
          PRETINT := POPERPERSONID;   --返回处理人的ID
          PRETERRORSTR :='1';
          PRETHINT :=PROUTEDETAILNAME;
               --记录操作日志
           WRITE_BASE_LOG(1,
                         PROUTEDETAILNAME,
                         '新增待办事项',
                         PSHEETID,
                         0,
                                        PPERSONID,
                                        PRETERRORSTR);
       ELSE
            PRETERRORSTR := '新增待办事项失败！'||PRETERRORSTR;
       END IF;


END ADD_NEW_WAITTASK;




/
--------------------------------------------------------
--  DDL for Procedure ADD_RETURN_WAITTASK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "ADD_RETURN_WAITTASK" 
(
                           PSheetKind       varchar2, --单据种类
                           PROUTEDETAILID    integer, --当前流程步骤Id
                           PSHEETID          integer,  --单据id
                           PPREVROUTEID      integer,  --上一步骤id
                           PMENUID           varchar2,  --菜单id fbb 修改为:菜单编码，类型为varchar2(64)
                           PPERSONID         integer,  --上一提交人Id
                           PCURPERSONID       integer, --处理人Id
                           PPERSONIDLIST     varchar2, --多个处理人Id
                           PJUMPPATH         varchar2,  --跳转路径
                           PSHEETDETAILID       integer, --明细步骤Id
                           PROCESSHINT       varchar2,   --待办提示
                           PZTID             integer,  --zhangtaoid
                           PRETINT        out   integer,
                           PRETHINT     out   varchar2,
                           PRETERRORSTR   out   varchar2
 )
is
   PRETSYSTEMLOG NVARCHAR2(200);
   PINPUTCONDITION NVARCHAR2(200);
   PINPUTPROC NVARCHAR2(50);
   POPERPROC NVARCHAR2(50);
   PLEVELCODE NVARCHAR2(200);
   PROUTEID INT;    --流程ID
   PPREVID INT;        --前置步骤ID
   PPREVPERSONID INT;   --提交人ID
   POPERPERSONID INT;   --处理人ID
   POPERPERSONID1 INT;   --处理人ID1
   POPERPERSONID2 INT;   --处理人ID2
   POPERPERSONID3 INT;   --处理人ID3
   POPERPERSONID4 INT;   --处理人ID4
   POPERROLEID INT;     --处理角色ID
   PNEXTPERSONID INT;   --下一步骤处理人ID
   PSHEETDEPARTID INT;   --单据所属部门
   PSHEETDEPARTCODE NVARCHAR2(200);  --单据所属的层级代码
   PJUDGEINT   INT;
   PJUDGESTRING   NVARCHAR2(50);
   PJUDGEERRSTRING   NVARCHAR2(50);
   PROUTEDETAILNAME NVARCHAR2(50);
   PSTATUS INT;
   TEMPINT INT;
   TYPE REF_CURESOR_TYPE IS REF CURSOR;
   ROLE_CURSOR REF_CURESOR_TYPE;
   PPROUTEDETAILID INT;
   PERROR INT;
   PGUID NVARCHAR2(64);
   maxid INT;
   SYS_DATE DATE;
  -- PPSheetKind VARCHAR2(64);
BEGIN
      --获得驳回后的步骤和处理人，如果指定了流程
       IF PROUTEDETAILID > 0 THEN  
          SELECT A.ROUTESTEPID,A.HANDINGMANID INTO PPROUTEDETAILID,POPERPERSONID FROM V_SHEET_CURROUTE A WHERE A.SHEETID = PSHEETID AND A.ROUTESTEPID = PROUTEDETAILID AND A.Extendint4<>1; 
       ELSE
          --如果未指定步骤，则缺省驳回到第一个步骤（制单步骤）
          SELECT  A.ROUTESTEPID,A.HANDINGMANID INTO PPROUTEDETAILID,POPERPERSONID FROM V_SHEET_CURROUTE A WHERE A.SHEETID = PSHEETID AND A.SHEETSTATUS=39 AND ROWNUM=1;
       END IF;
      IF  PPROUTEDETAILID > 0 THEN
      BEGIN
          PRETERRORSTR := '1';
          IF (PRETERRORSTR = '1') then
          BEGIN
              --此处进行人员判定如果没有指定人员，则根据角色ID获得人员ID
                 --先将已经处理过的流程设置为历史流程


              UPDATE WZ_WAITTASK A SET A.EXTENDINT4 = 1 WHERE SHEETID = PSHEETID AND A.ROUTESTEPID = PPROUTEDETAILID AND 
                A.HANDINGMANID = POPERPERSONID;
               --zyf 2016.10.08  修改
              CASE 
                    WHEN PSheetKind='RK' THEN  
                         --fbb 修改单据的状态为制单中,单据步骤
                         UPDATE WZ_SHEET_RK R SET R.STATUS = 39, R.ROUTE_STEPID = PPROUTEDETAILID WHERE R.ID = PSHEETID;
                    WHEN PSheetKind = 'CK' THEN 
                         UPDATE WZ_SHEET_CK R SET R.STATUS = 39, R.ROUTE_STEPID = PPROUTEDETAILID WHERE R.ID = PSHEETID; 
                    ELSE 
                         UPDATE WZ_SHEET R SET R.STATUS = 39, R.ROUTE_STEPID = PPROUTEDETAILID WHERE R.ID = PSHEETID; 
              end case;
              SELECT SYS_GUID() INTO PGUID FROM DUAL;
              select BASEROUTESTEP_SEQUENCE.nextval  into maxid from dual;
              select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;
              ---插入数据
              INSERT INTO WZ_WAITTASK (ID,GUID,
                                        RouteStepID,
                                        MENUID,
                                        SHEETID,
                                        HandingManID,
                                        --HandingTime,
                                        PrevSubmitManID,
                                        PrevSubmitTime,
                                        JUMPPATH,
                                        HandSuggestion,
                                        HANDRESULT,  --0，未处理，1通过、不通过、2、驳回、3、终止
                                        ENCRYPTCODE,
                                        STATUS,
                                        ExtendInt1,           --上一步骤Id
                                        ExtendInt3,
                                        ExtendInt4,
                                        ExtendString1,        --每一待办步骤处理的提示
                                        ZTID,
                                        CREATOR,
                                        --OPERRESULT,
                                        CreateTime)
                           VALUES  (maxid,PGUID,
                                        PPROUTEDETAILID,   --下一待办步骤Id
                                        PMENUID,
                                        PSHEETID,
                                        POPERPERSONID,    --待办处理人Id
                                       -- SYS_DATE,       --待办处理时间
                                        PPERSONID,       --上一提交人Id
                                        SYS_DATE,        --提交时间
                                        PJUMPPATH,
                                        --PROCESSHINT,
                                        '',
                                        0,
                                        '',
                                        0,
                                        0,
                                        0,
                                        0,
                                        '待审核',
                                        PZTID,
                                        PPERSONID,
                                        --0,
                                        SYS_DATE);
             PERROR:=0; 
          end;                       
          END if; 

          IF (PERROR=0) THEN
            PRETINT := POPERPERSONID;   --返回处理人的ID
            PRETERRORSTR :='1';
            PRETHINT :=PROUTEDETAILNAME;
                 --记录操作日志
             WRITE_BASE_LOG(1,
                           PROUTEDETAILNAME,
                           '新增待办事项',
                           PSHEETID,
                           0,
                                          PPERSONID,
                                          PRETERRORSTR);
           ELSE
              PRETERRORSTR := '新增待办事项失败！'||PRETERRORSTR;
         END IF;

      END; 
      END IF;
END ADD_RETURN_WAITTASK;




/
--------------------------------------------------------
--  DDL for Procedure BASE_USER_LOGIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "BASE_USER_LOGIN" (UserCode  varchar2,
                                            PWD  varchar2,
                                            LoginIP   varchar2,
                                            LoginCity varchar2,
                                            ResultID  in out int,
                                            ResultMsg in out varchar2) is

  --ResultID integer :=0 ;
  --ResultMsg varchar2(128)  := '登录成功';
  num integer;
  num1 integer;
  ex_1 exception;
  ex_2 exception;
  ex_3 exception;
  ex_4 exception;
  ex_5 exception;
  ex_6 exception;

begin
  ResultID  := 0;
  ResultMsg := '登录成功';
  if UserCode = '' then
    raise ex_1;
  end if;

  if PWD = '' then
    raise ex_2;
  end if;
  select count(*) into num from base_person where Code = UserCode;
  if num = 0 then
    raise ex_3;
  end if;
  select count(*)
    into num1
    from base_person b
   where b.Code = UserCode and b.Password = PWD;
  if num1 = 0 then
    raise ex_4;
  end if;
  select count(*)
    into num
    from base_person
   where Code = UserCode
     and Password = PWD
     and IsAudit = 0;
  if num > 0 then
    raise ex_5;
  end if;
  select count(*)
    into num
    from base_person
   where Code = UserCode
     and Password = PWD
     and Status = 0;
  if num > 0 then
    raise ex_6;
  end if;

  --更新登录信息
  update base_person
     set LoginCount = nvl(LoginCount, 0) + 1,
         LoginTime  = sysdate,
         LoginIP    = LoginIP,
         LoginCity  = LoginCity
   where Code = UserCode;
  commit;
  ---------------------------------------------------------------------------

exception

  when ex_1 then
    ResultMsg := '账号不能为空，请确认！';
    ResultID  := -1;
  when ex_2 then
    ResultMsg := '密码不能为空，请确认！';
    ResultID  := -1;
  when ex_3 then
    ResultMsg := '账号不存在！';
    ResultID  := -1;
  when ex_4 then
    ResultMsg := '密码有误！';
    ResultID  := -1;
  when ex_5 then
    ResultMsg := '账号未审核！';
    ResultID  := -1;
  when ex_6 then
    ResultMsg := '账号已禁用！';
    ResultID  := -1;
    rollback;

    --表0[结果表]
    select ResultID, ResultMsg into ResultID, ResultMsg from dual;
    --DBMS_OUTPUT.put_line('ResultID :'||ResultID );
  --DBMS_OUTPUT.put_line('ResultMsg: '||ResultMsg );

end Base_User_Login;




/
--------------------------------------------------------
--  DDL for Procedure COM_PAGINATION_CLOWNFISH
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "COM_PAGINATION_CLOWNFISH" 
(TableName  varchar2,pColumns  varchar2,pOrder   varchar2,pWhere  varchar2,PageIndex  int,PageSize  int,TotalRecords out int)
is

begin
DECLARE
  sqlRecordCount varchar2(1000); --得到总记录条数的sql语句
  sqlSelect varchar2(1000); --查询语句
  recordCount integer; --保存总记录条数的变量
  ppColumns  varchar2(1000);
  ppOrder    varchar2(1000);
  ppWhere    varchar2(1000);
  pPageIndex integer;
  pPageSize  integer;
  begin
  ppColumns   := '*';
  ppOrder     := 'id asc';
  ppWhere     :='1=1';
  pPageIndex  :=0  ;
  pPageSize   :=10 ;

if pColumns=''
  then
    ppColumns :='*' ;
end if;

if pOrder=''
  then
   ppOrder  := 'id asc';
end if;

if pWhere=''
  then
  ppWhere  :='1=1';
end if;
if PageIndex=0
 then
  pPageIndex  :=1;
end if;

if PageSize=0
 then
  pPageSize  :=10;
end if;

    sqlRecordCount  := 'select count(*)  from ' || TableName|| ' where ' || ppWhere;
         DBMS_OUTPUT.put_line(sqlRecordCount);

    execute immediate sqlRecordCount into recordCount;
--执行动态sql语句，查询数据。
    sqlSelect  := 'select '|| ppColumns ||' from ( select ROW_NUMBER()  over (order by ' || ppOrder ||') as tempid,t.* from ' || TableName ||' t  where '|| ppWhere ||')  where tempid between ' ||to_char((pPageIndex - 1)*pPageSize + 1) ||' and '||to_char( pPageIndex * pPageSize);
             DBMS_OUTPUT.put_line(sqlSelect);

    execute immediate sqlSelect;
    TotalRecords := sqlRecordCount;--把总记录数赋值输出参数。
    end;
  end;




/
--------------------------------------------------------
--  DDL for Procedure COM_PAGINATION_FLUENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "COM_PAGINATION_FLUENT" 
(tableName varchar2,pcolumns  varchar2, pwhere varchar2,porder   varchar2,pageIndex   int,pageSize   int, total out int,p_cursor out cur_query.my_cursor)
is

BEGIN
DECLARE
  sqlRecordCount varchar2(2000); --得到总记录条数的sql语句
  sqlSelect varchar2(1000); --查询语句
  recordCount integer; --保存总记录条数的变量
  ppcolumns   varchar2(1000) ;
   pporder  varchar2(1000) ;
  ppwhere   varchar2(1000) ;
  ppageIndex integer;
   ppageSize integer;
   begin
  ppcolumns := '*';
  pporder     := '';
  ppwhere     :='1=1';
  ppageIndex  :=1  ;
  ppageSize   :=10 ;
if pcolumns='' or pcolumns is null
  then
    ppcolumns :='*' ;
   else
   ppcolumns := pcolumns;
end if;

if porder='' or porder is null
  then
   pporder  := 'id asc';
 else
  pporder :=porder;
end if;

if pwhere='' or pwhere is null
  then
  ppwhere  :='1=1';
  else
   ppwhere :=pwhere;
end if;

if pageIndex=0 or pageIndex is null
 then
  ppageIndex  :=1;
  else
  ppageIndex :=pageIndex;
end if;

if pageSize=0 or pageSize is null
 then
  ppageSize  :=10;
  else 
  ppageSize :=pageSize;
end if;




    sqlRecordCount  := 'select count(*) from ' || tableName|| ' where ' || ppwhere;
        dbms_output.put_line(sqlRecordCount);

    execute immediate sqlRecordCount into recordCount;
   -- sqlSelect  := 'select '|| ppcolumns ||' from (select ROW_NUMBER()over (order by ' || pporder || ') as tempid,t.* from ' || tableName ||' t  where '|| ppwhere ||') where tempid between ' ||(ppageIndex - 1)*ppageSize + 1 ||' and '|| ppageIndex * ppageSize;
    -- dbms_output.put_line(sqlSelect);
        sqlSelect  := 'select '|| ppcolumns ||
    ' from (select ROW_NUMBER()over (order by '
    || pporder ||
    ') as tempid,t.* from '
    || tableName ||
    ' t  where '
    || ppwhere ||
    ') where tempid between '
     ||to_char((ppageIndex - 1)*ppageSize + 1) ||
     ' and '
     || to_char(ppageIndex * ppageSize);
     DBMS_OUTPUT.put_line(sqlSelect);
  -- execute immediate sqlSelect;
   total := recordCount;--把总记录数赋值输出参数。
   open p_cursor for sqlSelect;

    end;
  end;




/
--------------------------------------------------------
--  DDL for Procedure COM_PAGINATION_FLUENTNEW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "COM_PAGINATION_FLUENTNEW" (
 tableName varchar2, pcolumns in  varchar2,porder in  varchar2,pwhere in  varchar2,pageIndex in  int,pageSize in  int,total out int)
 is
 begin
 DECLARE
      sqlRecordCount varchar2(2000); --得到总记录条数的sql语句
      sqlSelect varchar2(1000); --查询语句
      recordCount integer; --保存总记录条数的变量
      ppcolumns   varchar2(20) ;
   pporder  varchar2(20) ;
  ppwhere   varchar2(20) ;
  ppageIndex integer;
   ppageSize integer;
         begin
  ppcolumns   := '*';
  pporder     := '';
  ppwhere     :='1=1';
  ppageIndex  :=1  ;
  ppageSize   :=10 ;

 if pcolumns=''
  then
    ppcolumns :='*' ;
end if;

if porder='' or porder is null
  then
   pporder  := 'id asc';
   else
   pporder :=porder;
end if;

if pwhere=''
  then
  ppwhere  :='1=1';
end if;

if pageSize=0
 then
  ppageIndex  :=10;
end if;

ppageIndex  :=ppageIndex+1;



       sqlRecordCount  := ' select count(*)  from ' || tableName|| ' where ' || ppwhere;

       execute immediate sqlRecordCount into recordCount;
/*       sqlSelect  := 'select '|| pcolumns ||' from ( select ROW_NUMBER()  over (order by '+porder +') as tempid,* from ' || tableName ||' where '|| pwhere ||') as tempTableName where tempid between ' ||(pageIndex - 1)*pageSize + 1 ||' and '|| pageIndex * pageSize;
*/   
        sqlSelect  := 'select '|| ppcolumns ||' from ( select ROW_NUMBER()  over (order by '|| pporder ||') as tempid,t.* from ' || tableName ||' t  where '|| ppwhere ||')  where tempid between ' ||to_char((ppageIndex - 1)*ppageSize + 1) ||' and '||to_char(ppageIndex * ppageSize) ;
DBMS_OUTPUT.put_line(sqlSelect );       
 execute immediate sqlSelect;
    total := recordCount;--把总记录数赋值输出参数。
    end;
  end;




/
--------------------------------------------------------
--  DDL for Procedure CREATE_ROUTEHISTORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "CREATE_ROUTEHISTORY" 
(
     PSheetKind varchar2, --PSheetKind 单据业务 RK:入库 CK:出库 Other:其他单据
     PSHEETID         integer,
     PERRORSTRING     out   varchar2
)
is
        tempNum number;
        tempNum_1 number;  --cesi
        maxNum  number;
        PROUTEID integer;        --当前流程ID
       PROUTEDETAILID integer;  --当前步骤ID
       PSTATUS integer;

       PNEXTID integer;  --后续步骤ID
       PPREVID integer;  --前置步骤ID
       PLASTID integer;  --前一步骤ID
       PLASTROLEID varchar2(64);  --前一步骤处理角色   fbb 修改字段类型
       PLASTPERSONID integer;  --前一步骤处理人
       PREVFLAG    integer;     --前置流程标志 ，当前流程是前置流程还是后置流程
       PCOUNTZD    integer;     --判断是否存在流程
       CTFLAG    integer;       --循环标记

       PROUTETYPE integer;  --审批类型
       PSHEETTYPE varchar2(16); --单据类型
       PJUDGSTRING varchar2(200);
       PI integer;

       PROLEID varchar2(64);--fbb 修改字段类型
       PPERSONID integer;
       PDEPARTID integer;
       PCREATORID integer;
       --ROUTELIST_CURSOR  testpackage.test_cursor;
       TYPE ref_cursor_type IS REF CURSOR;  --定义一个动态游标

       maxid integer;
       maxidS integer;
        SYS_DATE DATE;
      PGUID   CHAR (38);
      v_sql varchar2(1000);
     usrs ref_cursor_type;
begin
     select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;
     PERRORSTRING  := '1' ;
       --首先根据单据ID删除单据流程列表 III
     DELETE FROM WZ_ROUTEHISTORY WHERE SHEETID = PSHEETID;
       --打开单据流程设置列表，逐个判断每个流程是否会经过，然后添加到单据流程表中
       --先获得制单流程
     CASE WHEN PSheetKind='RK' THEN
               SELECT COUNT(SHEETID) into PCOUNTZD   from V_SHEET_RK_ROUTE A WHERE A.SHEETID = PSHEETID AND A.ROUTETYPE = 0;
          WHEN PSheetKind='CK' THEN
               SELECT COUNT(SHEETID) into PCOUNTZD   from V_SHEET_CK_ROUTE A WHERE A.SHEETID = PSHEETID AND A.ROUTETYPE = 0;
          ELSE
               SELECT COUNT(SHEETID) into PCOUNTZD   from V_SHEET_ROUTE A WHERE A.SHEETID = PSHEETID AND A.ROUTETYPE = 0;
     END CASE;
       ---校验成功,执行数据插入
        IF  PCOUNTZD = 1
        THEN
         -- SELECT  流程ID,步骤ID,后续步骤ID,前置步骤ID,审批类型,单据种类,角色ID,人员ID,申请部门ID,创建人ID
          -- into  PROUTEID,PROUTEDETAILID,PNEXTID,PPREVID ,PROUTETYPE ,PSHEETTYPE ,PROLEID ,PPERSONID ,
          -- PDEPARTID ,PCREATORID  from V_SHEET_ROUTE WHERE 单据ID = PSHEETID AND 审批类型 = 0;
        CASE WHEN PSheetKind='RK' THEN
               SELECT A.ROUTEID,A.ROUTESTEPID,A.NEXTSTEPID,A.PREVSTEPID,A.ROUTETYPE,A.KINDID,A.ROLECODE,A.PERSONID,A.DEPARTID,A.CREATOR
               INTO PROUTEID,PROUTEDETAILID,PNEXTID,PPREVID,PROUTETYPE,PSHEETTYPE,PROLEID,PPERSONID,PDEPARTID,PCREATORID
               from V_SHEET_RK_ROUTE A WHERE A.SHEETID = PSHEETID AND A.ROUTETYPE = 0;
          WHEN PSheetKind='CK' THEN
               SELECT A.ROUTEID,A.ROUTESTEPID,A.NEXTSTEPID,A.PREVSTEPID,A.ROUTETYPE,A.KINDID,A.ROLECODE,A.PERSONID,A.DEPARTID,A.CREATOR
               INTO PROUTEID,PROUTEDETAILID,PNEXTID,PPREVID,PROUTETYPE,PSHEETTYPE,PROLEID,PPERSONID,PDEPARTID,PCREATORID
               from V_SHEET_CK_ROUTE A WHERE A.SHEETID = PSHEETID AND A.ROUTETYPE = 0;
          ELSE
               SELECT A.ROUTEID,A.ROUTESTEPID,A.NEXTSTEPID,A.PREVSTEPID,A.ROUTETYPE,A.KINDID,A.ROLECODE,A.PERSONID,A.DEPARTID,A.CREATOR
               INTO PROUTEID,PROUTEDETAILID,PNEXTID,PPREVID,PROUTETYPE,PSHEETTYPE,PROLEID,PPERSONID,PDEPARTID,PCREATORID
               from V_SHEET_ROUTE A WHERE A.SHEETID = PSHEETID AND A.ROUTETYPE = 0;
        END CASE;
          CTFLAG := 1;
          while CTFLAG = 1 loop
               SELECT SYS_GUID () INTO PGUID FROM DUAL;
                select WZROUTEHISTORY_SEQUENCE.nextval  into maxid from dual;
              --插入步骤
                   INSERT INTO WZ_ROUTEHISTORY (ID,SHEETID,
                                          ROUTEID,
                                          ROUTESTEPID,
                                          NEXTID,PREVID )
                                  VALUES(maxid,PSHEETID,
                                          PROUTEID,
                                          PROUTEDETAILID,
                                          PNEXTID,PPREVID);

                 IF PNEXTID > 0
                 THEN
                    --SELECT COUNT(单据ID) into PCOUNTZD  from V_SHEET_ROUTE WHERE 单据ID = PSHEETID AND  步骤ID = PNEXTID;
                   CASE WHEN PSheetKind='RK' THEN
                          SELECT COUNT(SHEETID) into PCOUNTZD   from V_SHEET_RK_ROUTE A WHERE A.SHEETID = PSHEETID AND A.ROUTESTEPID = PNEXTID;
                        WHEN PSheetKind='CK' THEN
                          SELECT COUNT(SHEETID) into PCOUNTZD   from V_SHEET_CK_ROUTE A WHERE A.SHEETID = PSHEETID AND A.ROUTESTEPID = PNEXTID;
                        ELSE
                          SELECT COUNT(SHEETID) into PCOUNTZD   from V_SHEET_ROUTE A WHERE A.SHEETID = PSHEETID AND A.ROUTESTEPID = PNEXTID;
                   END CASE;
                    IF PCOUNTZD > 0
                    THEN
                          PLASTID := PROUTEDETAILID;
                          PPREVID :=PLASTID;
                         -- SELECT 流程ID,步骤ID,后续步骤ID,审批类型,单据种类,角色ID,人员ID,申请部门ID,创建人ID  INTO  PROUTEID ,PROUTEDETAILID,PNEXTID ,PROUTETYPE ,PSHEETTYPE ,PROLEID ,PPERSONID ,PDEPARTID ,PCREATORID     
                          --from V_SHEET_ROUTE WHERE 单据ID = PSHEETID AND 步骤ID = PNEXTID;
                          CASE WHEN PSheetKind='RK' THEN
                                 SELECT A.ROUTEID,A.ROUTESTEPID,A.NEXTSTEPID,A.ROUTETYPE,A.KINDID,A.ROLECODE,A.PERSONID,A.DEPARTID,A.CREATOR
                                 INTO PROUTEID,PROUTEDETAILID,PNEXTID,PROUTETYPE,PSHEETTYPE,PROLEID,PPERSONID,PDEPARTID,PCREATORID
                                 from V_SHEET_RK_ROUTE A WHERE A.SHEETID = PSHEETID AND A.ROUTESTEPID = PNEXTID;
                            WHEN PSheetKind='CK' THEN
                                 SELECT A.ROUTEID,A.ROUTESTEPID,A.NEXTSTEPID,A.ROUTETYPE,A.KINDID,A.ROLECODE,A.PERSONID,A.DEPARTID,A.CREATOR
                                 INTO PROUTEID,PROUTEDETAILID,PNEXTID,PROUTETYPE,PSHEETTYPE,PROLEID,PPERSONID,PDEPARTID,PCREATORID
                                 from V_SHEET_CK_ROUTE A WHERE A.SHEETID = PSHEETID AND A.ROUTESTEPID = PNEXTID;
                            ELSE
                                 SELECT A.ROUTEID,A.ROUTESTEPID,A.NEXTSTEPID,A.ROUTETYPE,A.KINDID,A.ROLECODE,A.PERSONID,A.DEPARTID,A.CREATOR
                                 INTO PROUTEID,PROUTEDETAILID,PNEXTID,PROUTETYPE,PSHEETTYPE,PROLEID,PPERSONID,PDEPARTID,PCREATORID
                                 from V_SHEET_ROUTE A WHERE A.SHEETID = PSHEETID AND A.ROUTESTEPID = PNEXTID;
                          END CASE;
                          CTFLAG := 1;
                    ELSE
                    BEGIN
                        CTFLAG := 0;
                    END;
                    END IF;
                 ELSE
                 BEGIN
                    CTFLAG := 0;
                    --v_sql := 'SELECT 流程ID,步骤ID,后续步骤ID,前置步骤ID,审批类型,单据种类,角色ID,人员ID,申请部门ID,创建人ID  from V_SHEET_ROUTE WHERE 单据ID = '||PSHEETID ||' AND 前置步骤ID = '||PROUTEDETAILID;
                 CASE
                  /*WHEN PSheetKind='RK' THEN
                   v_sql:='SELECT A.ROUTEID,A.ROUTESTEPID,A.NEXTSTEPID,A.PREVSTEPID,A.ROUTETYPE,A.KINDID,A.ROLECODE,A.PERSONID,A.DEPARTID,A.CREATOR
                     INTO PROUTEID,PROUTEDETAILID,PNEXTID,PPREVID,PROUTETYPE,PSHEETTYPE,PROLEID,PPERSONID,PDEPARTID,PCREATORID
                   from V_SHEET_RK_ROUTE A WHERE A.SHEETID =' || PSHEETID ||' AND A.PREVSTEPID='||PROUTEDETAILID;
                  WHEN PSheetKind='CK' THEN
                   v_sql:='SELECT A.ROUTEID,A.ROUTESTEPID,A.NEXTSTEPID,A.PREVSTEPID,A.ROUTETYPE,A.KINDID,A.ROLECODE,A.PERSONID,A.DEPARTID,A.CREATOR
                     INTO PROUTEID,PROUTEDETAILID,PNEXTID,PPREVID,PROUTETYPE,PSHEETTYPE,PROLEID,PPERSONID,PDEPARTID,PCREATORID
                   from V_SHEET_RK_ROUTE A WHERE A.SHEETID =' || PSHEETID ||' AND A.PREVSTEPID='||PROUTEDETAILID;
                  ELSE
                   v_sql:='SELECT A.ROUTEID,A.ROUTESTEPID,A.NEXTSTEPID,A.PREVSTEPID,A.ROUTETYPE,A.KINDID,A.ROLECODE,A.PERSONID,A.DEPARTID,A.CREATOR
                     INTO PROUTEID,PROUTEDETAILID,PNEXTID,PPREVID,PROUTETYPE,PSHEETTYPE,PROLEID,PPERSONID,PDEPARTID,PCREATORID
                   from V_SHEET_ROUTE A WHERE A.SHEETID =' || PSHEETID ||' AND A.PREVSTEPID='||PROUTEDETAILID;*/

                   WHEN PSheetKind='RK' THEN
                   v_sql:='SELECT A.ROUTEID,A.ROUTESTEPID,A.NEXTSTEPID,A.PREVSTEPID,A.ROUTETYPE,A.KINDID,A.ROLECODE,A.PERSONID,A.DEPARTID,A.CREATOR

                   from V_SHEET_RK_ROUTE A WHERE A.SHEETID =' || PSHEETID ||' AND A.PREVSTEPID='||PROUTEDETAILID;
                  WHEN PSheetKind='CK' THEN
                   v_sql:='SELECT A.ROUTEID,A.ROUTESTEPID,A.NEXTSTEPID,A.PREVSTEPID,A.ROUTETYPE,A.KINDID,A.ROLECODE,A.PERSONID,A.DEPARTID,A.CREATOR

                   from V_SHEET_CK_ROUTE A WHERE A.SHEETID =' || PSHEETID ||' AND A.PREVSTEPID='||PROUTEDETAILID;
                  ELSE
                   v_sql:='SELECT A.ROUTEID,A.ROUTESTEPID,A.NEXTSTEPID,A.PREVSTEPID,A.ROUTETYPE,A.KINDID,A.ROLECODE,A.PERSONID,A.DEPARTID,A.CREATOR

                   from V_SHEET_ROUTE A WHERE A.SHEETID =' || PSHEETID ||' AND A.PREVSTEPID='||PROUTEDETAILID;

                END CASE;
                   --打开游标 

                    open usrs for v_sql ;

                    loop
                        fetch usrs into PROUTEID,PROUTEDETAILID,PNEXTID,PPREVID,PROUTETYPE,PSHEETTYPE,PROLEID,PPERSONID,PDEPARTID,PCREATORID;
                        exit when usrs%notfound;
                       ---根据进入条件进行判断
                               JUDGE_NEXT_ROUTE (PSheetKind,
                                                 PSHEETID,
                                                 PSHEETTYPE,
                                                 PROUTEDETAILID,
                                                 PJUDGSTRING);

                               IF PJUDGSTRING = '1'
                               THEN
                                      --如果符合条件
                                     CTFLAG := 1;
                                     exit;

                               END IF;
                    end loop;
                    close usrs;
                 END;
                 END IF;
          end loop;
       else
       begin
           IF PCOUNTZD = 0
           then
             PERRORSTRING  := '未指定制单流程';
           else
           begin
              PERRORSTRING  := '单据指定了多个制单流程，请检查';
           end;
           end if;
       end;
       end if;

end CREATE_ROUTEHISTORY;




/
--------------------------------------------------------
--  DDL for Procedure DBCK_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "DBCK_COMMIT" 
(
          PPROCID integer,
          PSHEETID integer,
          PPERSONID integer,
          retval out   varchar2
)
is

    SYS_DATE DATE;
    sonckID integer;
    TYPE REF_CURESOR_TYPE IS REF CURSOR;
    STOCK_CURSOR REF_CURESOR_TYPE;
BEGIN
        select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;

open STOCK_CURSOR for SELECT ID from V_PROCKDETAIL where SHEETID = PSHEETID;
      loop
           fetch STOCK_CURSOR into sonckID;
           exit when STOCK_CURSOR%notfound;

update WZ_STOCK  A SET  (A.STORECOUNT,A.UPDATEDATE,A.UPDATOR)=
           (SELECT A.STORECOUNT-B.SUBDETAILCOUNT ,SYS_DATE,PPERSONID FROM V_PROCKDETAIL B WHERE SHEETID=PSHEETID AND ID=sonckID)
           where Id = (SELECT EXTENDINT1 FROM V_PROCKDETAIL WHERE ID=sonckID);

          END LOOP;
        CLOSE STOCK_CURSOR;--关闭游标


end DBCK_COMMIT;


/
--------------------------------------------------------
--  DDL for Procedure DBRK_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "DBRK_COMMIT" 
(
          PPROCID integer,
          PSHEETID integer,
          PPERSONID integer,
          retval out   varchar2
)
is

    SYS_DATE DATE;
    TYPE REF_CURESOR_TYPE IS REF CURSOR;
    STOCK_CURSOR REF_CURESOR_TYPE;
BEGIN
        select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;

  INSERT INTO WZ_STOCK
    (ID,
     GUID,
     TAGCODE,
     SHEETID,
     SHEETDETAILID,
     CATEGORYID,
     MATERIALID,
     MATERIALCODE,
     MATERIALNAME,
     MATERIALBRAND,
     MATERIALMODEL,
     MATERIALSPECIFICATION,
     DESCRIPTION,
     ORDERNUM,
     RECEIVENUM,
     STORECOUNT,
     DETAILUNIT,
     /*NOTAXSUM,*/
     NOTAXPRICE,
     TAXPRICE,
     TAXRATE,
     CURRENCYUNIT,
     /*TAXSUM,*/
     STOREID,
     STORELOCATIONID,
     STORELOCATIONCODE,
     STORELOCATIONNAME,
     PROVIDERDEPID,
     PLANDEPARTID,
     STATUS,
     MEMO,
     CREATOR,
     CREATEDATE,
     ZTID,
     ISEQUIPMENT,
     OWNERTYPE,
     ENABLESN,
     SNCODE,
     DETAILUNITNAME)
    select WZSTOCK_SEQUENCE.NEXTVAL,
           SYS_GUID(),
           A.TAGCODE,
           PSHEETID,
           A.ID,
           A.CATEGORYID,
           A.MATERIALID,
           A.MATERIALCODE,
           A.MATERIALNAME,
           A.MATERIALBRAND,
           A.MATERIALMODEL,
           A.MATERIALSPECIFICATION,
           A.DESCRIPTION,
           A.ORDERNUM,
           A.RECEIVENUM,
           A.SUBDETAILCOUNT,
           A.DETAILUNIT,
           /*A.NOTAXSUM,*/
           A.NOTAXPRICE,
           A.TAXPRICE,
           A.TAXRATE,
           A.CURRENCYUNIT,
           /*A.TAXSUM,*/
           A.STOREID,
           A.STORELOCATIONID,
           A.STORELOCATIONCODE,
           A.STORELOCATIONNAME,
           A.PROVIDERDEPID,
           A.PLANDEPARTID,
           A.STATUS,
           A.MEMO,
           PPERSONID,
           SYS_DATE,
           A.DRZTID,
           A.ISEQUIPMENT,
           A.OWNERTYPE,
           A.ENABLESN,
           A.SNCODE,
           A.DETAILUNITNAME

      from V_PRORKDETAIL A where A.SHEETID = PSHEETID;


end DBRK_COMMIT;


/
--------------------------------------------------------
--  DDL for Procedure GETID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "GETID" (
strInsertSQL varchar2,
seqName varchar2,
ID out varchar2
)
is
strSql varchar(2000);
begin
execute immediate strInsertSQL;--执行插入语句
strSql:='select '||seqName||'.currval from dual';--获取id的sql语句
execute immediate strSql into ID;--执行获取id的sql语句
EXCEPTION
WHEN OTHERS THEN
DBMS_output.PUT_LINE(SQLERRM);
end GetID;




/
--------------------------------------------------------
--  DDL for Procedure GETIDS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "GETIDS" (
seqName varchar2,
nextID out varchar2,
currentID out varchar2
)
is
strSql1 varchar(2000);
strSql2 varchar(2000);
begin
strSql1:='select '||seqName||'.nextval from dual';--获取id的sql语句
execute immediate strSql1 into nextID;--执行插入语句
strSql2:='select '||seqName||'.currval from dual';--获取id的sql语句
execute immediate strSql2 into currentID;--执行获取id的sql语句
EXCEPTION
WHEN OTHERS THEN
DBMS_output.PUT_LINE(SQLERRM);
end GetIDs;




/
--------------------------------------------------------
--  DDL for Procedure GETUSABLECOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "GETUSABLECOUNT" (p_materialCode VARCHAR2)
IS
v_sql varchar2(2000);
BEGIN
  v_sql:='select SUM(storecount) storeCount,materialcode,ztid,providerdepid, f_GetOccupyCount(a.materialcode,a.ztid) occuCount,0 as zs
          from wz_stock  a where ownertype<>708 and materialcode='||p_materialCode||' group by ztid, materialcode, providerdepid
          union all
          select SUM(storecount) storeCount,materialcode,ztid,providerdepid, f_GetOccupyCount(a.materialcode,a.ztid) occuCount,1 as zs
          from wz_stock  a where ownertype=708 and materialcode='||p_materialCode||' group by ztid, materialcode, providerdepid';
 -- dbms_output.put_line(v_sql);  
 execute immediate v_sql; 
END;


/
--------------------------------------------------------
--  DDL for Procedure JUDGE_NEXT_ROUTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "JUDGE_NEXT_ROUTE" 
(
     PSHEETKIND  varchar2,
     PSHEETID       integer,
     PTYPE    varchar2,
     PROUTESTEPID       integer,
     PERRORSTRING   OUT varchar2
)
is
    tempNum number;
    tempNum_1 number;
    maxNum  number;
    PSHEETVIEW  varchar2(50);
    PSHEETTYPE  varchar2(50);
    PINPUTPROC  varchar2(100);
    PINPUTCONDITION varchar2(500);
    PSQLSTRING  varchar2(2000);
    PROUTENAME varchar2(100);
    PNAME varchar2(100);
   counta integer;
      v_sql varchar2(1000);
begin
      counta:=0;
      SELECT  A.ROUTENAME,A.name,A.INPUTPROCEDURE,A.INPUTCONDITION
      INTO PROUTENAME,PNAME,PINPUTPROC,PINPUTCONDITION
      FROM V_ROUTESTEP A WHERE ID = PROUTESTEPID;

      IF  length(PINPUTCONDITION) > 0-- or PINPUTCONDITION is not null
      THEN
          --SELECT 单据种类 INTO PSHEETTYPE FROM V_SHEET where ID = PSHEETID;
           PSHEETTYPE:=PSHEETKIND;
           if PSHEETTYPE IS NULL
           THEN
            PSHEETTYPE := PTYPE;
           END IF;
           CASE 
                WHEN  PSHEETTYPE = 'RK'   THEN PSHEETVIEW :='V_SHEET_RK';
                WHEN  PSHEETTYPE = 'CK'   THEN PSHEETVIEW :='V_SHEET_CK';
                WHEN  PSHEETTYPE = 'DBD'   THEN PSHEETVIEW :='V_SHEET_DBD';
                ELSE PSHEETVIEW :='V_SHEET';
           END case;
                 IF PSHEETID > 0
                 then
                    PSQLSTRING :='SELECT COUNT(*)  FROM '||PSHEETVIEW ||' WHERE ID =' || to_char(PSHEETID) || ' AND ' || PINPUTCONDITION;
                 ELSE
                 BEGIN
                    PSQLSTRING :='SELECT COUNT(*)  FROM '||PSHEETVIEW ||' WHERE ' || PINPUTCONDITION;
                 END;
                 end if;

                 BEGIN
                    execute immediate(PSQLSTRING) into counta;
                     IF counta>0
                     then
                       PERRORSTRING := '1';
                     ELSE
                     begin
                      PERRORSTRING := '0';
                      end;
                      end if;
                 exception
                 when NO_DATA_FOUND then

                   PERRORSTRING := PROUTENAME ||'-->'+ PNAME||': 进入条件错误：'||  PSQLSTRING;

                 END;
      ELSE
      BEGIN
         IF PINPUTPROC >''
         THEN
            PERRORSTRING := '1';
         ELSE
         BEGIN
            PERRORSTRING := '1';
         END;
         END IF;

      END;
      END IF;

end JUDGE_NEXT_ROUTE;




/
--------------------------------------------------------
--  DDL for Procedure PROC_GETMAXNUM
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "PROC_GETMAXNUM" (iFlag integer,p_item  varchar2,maxCode out varchar2)
       as
          tempNum integer;
          maxNum integer;
          currdate integer;

begin
  tempNum  := 0;
  maxNum   := 1;
  currdate := 0;
  select to_char(sysdate, 'yyyymmdd') into currdate from dual;
  select count(*)
    into tempNum
    from ST_MAXCODE
   where ST_MAXCODE_PREFIX = p_item;

  if tempNum > 0 then
    begin
      select ST_MAXCODE_SERIAL + 1
        into maxNum
        from ST_MAXCODE
       where ST_MAXCODE_PREFIX = p_item;
      update ST_MAXCODE
         set ST_MAXCODE_SERIAL = ST_MAXCODE_SERIAL + 1
       where ST_MAXCODE_PREFIX = p_item;
    end;
  else
    begin
      insert into ST_MAXCODE values (p_item, 1);
    end;
  end if;
  commit;

  DBMS_OUTPUT.PUT_LINE(iFlag);
  DBMS_OUTPUT.PUT_LINE(to_char(maxNum, '0000'));
  DBMS_OUTPUT.PUT_LINE(p_item || to_char(maxNum, '0000'));
  DBMS_OUTPUT.PUT_LINE(maxNum);
  if iFlag = 1 then
    --??????
    begin
      maxCode := to_char(to_number(p_item) * 1000000 + maxNum);
    end;
  elsif iFlag = -1 then
    begin
      maxCode := p_item || trim(to_char(maxNum, '00000'));
    end;
  elsif iFlag = -2 then
    begin
      maxCode := p_item || trim(to_char(maxNum, '00'));
    end;
  else
    --??????
    begin
      --DBMS_OUTPUT.PUT_LINE(p_item || trim(to_char(maxNum,'0000')));
      --updated by ?? 2012-7-31

      maxCode := p_item || currdate || trim(to_char(maxNum, '0000'));

    end;
  end if;
exception

  when others then
    rollback;
    DBMS_OUTPUT.PUT_LINE('流水号：' || maxCode);

end;





/
--------------------------------------------------------
--  DDL for Procedure QUERY_PAGED_DATA_1
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "QUERY_PAGED_DATA_1" 
(
       tblName in varchar2, --表名
       fldName in varchar2,    --查询解果显示字段
       pageSize in number,  --一页显示记录数
       page in number,   --当前页
       fldSort  varchar2, --排序字段，为空表示不排序
       Sort number,     --排序标识 0：正序 1：倒序
       strCondition in varchar2, --查询条件

       pageCount out number, --总分页

       Counts out number,   --总记录数

       PCURSOR out testpackage.test_cursor     --返回的记录集

) is
--定义部分
--定义sql语句字符串
v_sql varchar2(1000);
--定义两个整数
v_begin number:=(page-1)*pageSize+1; --开始记录
v_end number:=page*pageSize;         --结束记录
--排序sql
v_orderSql varchar2(100):='';
v_strCondition varchar2(300):='';
begin
  --执行部分
  --如果fldSort不为空，则进行排序，如果Sort=0为升序，1为降序
  if fldSort is not null then
    if Sort=0 then
      v_orderSql:=' order by '||fldSort;
    elsif Sort=1 then
      v_orderSql:=' order by '||fldSort||' desc';
    else
      null;
    end if;
  end if;
  --条件判断语句
  if strCondition is not null then
    v_strCondition:=' where '||strCondition;
  end if;
  v_sql:='select * from
          (select t1.* ,rownum rn from(select '|| fldName ||' from '|| tblName|| v_strCondition ||' '||v_orderSql ||') t1 where rownum<='|| v_end ||')
          where rn>='|| v_begin;
  --把游标和sql关联
  open PCURSOR for v_sql;
  --计算Counts和pageCount
  --组织一个sql
  v_sql:='select count(*) from '|| tblName || v_strCondition || ' ' ||v_orderSql;
  --执行sql,并把返回的值赋给Counts;
  execute immediate v_sql into Counts;
  --计算pageCount
  if mod(Counts,pageSize)=0 then
    pageCount:=Counts/pageSize;
  else
    pageCount:=Counts/pageSize+1;
  end if;
  --关闭游标
  --close PCURSOR;

end QUERY_PAGED_DATA_1;




/
--------------------------------------------------------
--  DDL for Procedure ROUTESTEP_OPERATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "ROUTESTEP_OPERATION" 
        (
      /*
      创建：李鹏  2016-08-25
      说明：提交待办任务
      */
      --插入代办 和插入历史的时候为防止同一人重复插入 在插入前需要进行判断是否已经插入
      PSheetKind varchar2, --PSheetKind 单据业务 RK:入库 CK:出库 Other:其他单据
      PSheetID INTEGER,   --PSheetID：单据Id
      PMenuID varchar2,    --PMenuID：菜单Id
      PRouteID INTEGER, --PRouteID:流程Id
      PWaitTaskID INTEGER,  --PWaitTaskID : 待办事项Id
      PNextStepID INTEGER,   --PNEXTSTEPID :后续步骤Id
      PNextStepOpersonID varchar2, --PNextStepOpersonID:待办处理人Id
      PButtonFlag Varchar2,  --PButtonFlag:操作按钮标记
      POPERRESULT INTEGER, --处理结果 0:未处理； 1:通过； 2：不通过； 3：驳回； 4：找回
      PCopeAdvice varchar2, --POperationAdvice：处理意见
      PJumpPath varchar2,  --PJumpPath：待办跳转路径
      POperatorID INTEGER, --POperatorID:操作人Id
      RetInt OUT INTEGER,  --RetInt:存储过程执行后返回整型标记
      RetHintStr out Varchar2, --RetHintStr:存储过程执行后返回执行提示标记
      RetErrorStr out Varchar2
      --RetErrorStr:存储过程执行后返回执行错误标记
      --如果为'1'标示成功，否则是错误信息
      )
      is
      PPSheetKind varchar2(32); -- 单据业务 RK:入库 CK:出库 Other:其他单据
      PPSheetID INTEGER;   --PSheetID：单据Id
      PPMenuID varchar2(64);   --PMenuID：菜单Id
      PPRouteID INTEGER; --PRouteID:流程Id
      PPWaitTaskID integer;  --PWaitTaskID : 待办事项Id

      PPRouteStepID integer;  --当前步骤Id
      PPRouteStepName varchar2(64); --当前步骤名称
      PPNextStepOpersonID integer;  --下一步骤处理人Id
      PSTATUS INTEGER;   --上一步骤状态
      PPNextStepOpersonList varchar2(255);--下一步骤多人处理字符串
      PPREVID INTEGER;--上一步ID

      PPRouteWaitTaskStatus integer;  --流程待办处理状态
      PPSheetStatus integer;  --提交后单据状态
      PPSheetStatus_Return integer; --返回后单据状态
      PPPrevWaitStepID integer;   --前一待办对应的步骤Id
      PPPrevWaitPersonID integer;  --前一待办对应处理人id
      PPButtonFlag varchar2(64);  --按钮标识
      PPButtonName varchar2(64);  --按钮名称

      PPOPERRESULT  integer;       --处理结果
      PPCopeAdvice varchar2(255);  --处理意见
      PPCopeResultFlag integer;   --处理结果标识
      PPJumpPath varchar2(255);    --跳转路径
      PPZTID  INTEGER;     --账套Id

      PPAduitType integer;  --流程审批类型
      PPWaitTaskStatus  integer;  --当前待办是否处理 0：为处理 1：已处理
      PPLastWaitTask INTEGER;     ---当前待办的上一待办Id 返回修改用
      PPPrevWaitTask INTEGER;     ---前一待办Id  提交找回后使用
      PPStepHint  varchar2(255);  --当前待办步骤提示
      PPNewWaitTaskFlag integer; --新待办标记
      PPAgentInfo varchar2(255);   --代理人信息
      PPOPERPROC varchar2(255);   --处理过程
      --PPRouteStepName  varchar2(255);   --流程步骤名称
      PPNEXTID INTEGER;    --下一流程Id
      PGUID varchar2(64);
      SYS_DATE date;
      maxid integer;
      HaveWaitCount integer;  --产生待办的数量

      PPTempInt integer;
      PPSQLStr  varchar(2000); --sql串
      PROUTECOUNT INTEGER; --后续步骤标记
      PSHEETDETAILID INTEGER; --单据明细Id
      PRetInt  INTEGER;
      PRetHintStr  Varchar2(255);
      PRetErrorStr  Varchar2(255);
      IsSQL INTEGER;
      IsProc INTEGER;
      TYPE WAITTASK_CURSOR_TYPE IS REF CURSOR;
      WAITTASK_CURSOR WAITTASK_CURSOR_TYPE;
      begin
        if   PMenuID is null then
           PPMenuID:=0;
        else
           PPMenuID:=PMenuID;
        end if;

        if   PRouteID is null then
           PPRouteID:=0;
        else
           PPRouteID:=PRouteID;
        end if;

        if   PWaitTaskID is null then
           PPWaitTaskID:=0;
        else
           PPWaitTaskID:=PWaitTaskID;
        end if;

        if   PNextStepOpersonID is null then
           PPNextStepOpersonID:=0;
           PPNextStepOpersonList:='';
        else
           if instr(PNextStepOpersonID,',') >0 then
           begin
             PPNextStepOpersonID:=0;
             PPNextStepOpersonList:=PNextStepOpersonID;
           end;
           ELSE
             PPNextStepOpersonID:=PNextStepOpersonID;
           end if;
        end if;

        if PSheetKind<>'' or PSheetKind is not null  then
          PPSheetKind:=PSheetKind;
        end if;

        if PCopeAdvice<>'' then
          PPCopeAdvice:=PCopeAdvice;
        end if;

        if PPZTID=0 then
          PPZTID:=1000;
        end if;

        --PPWaitTaskStatus:=0;
        PPStepHint:='等待处理';
        --数据校验
        RetErrorStr:='1';
        if  PSheetID=0 then
            PPSheetID:=0;
            RetErrorStr:='未指定单据ID,无法提交！';
        else
            PPSheetID:=PSheetID;
        end if;

        if  POPERRESULT=0 then
            PPOPERRESULT:=0;
            RetErrorStr:='未指定处理意见,无法提交！';
        else
            PPOPERRESULT:=POPERRESULT;
        end if;

        if PJumpPath='' then
          PPJumpPath:='';
          RetErrorStr:='未指定跳转路径,无法跳转！';
        else
          PPJumpPath:=PJumpPath;
        end if;

        if PButtonFlag<>'' then
          PPButtonFlag:='';
          RetErrorStr:='未指定按钮处理方式,无法提交！';
        else
          PPButtonFlag:=PButtonFlag;
        end if;

         --如果没有指定待办事项ID ，则根据单据ID查找其待办事项。只有在第一步制单提交时可以不指定待办事项的ID
         PPTempInt:=0;
         --Select count(*) from V_PROCESSDATA
         Select count(*) into PPTempInt from WZ_WAITTASK T where T.SHEETID=PPSheetID and t.handingmanid=PPNextStepOpersonID and T.STATUS=0;
         if  PPTempInt>0 and PPWaitTaskID=0 then
            Select ID into PPWaitTaskID from WZ_WAITTASK T where T.SHEETID=PPSheetID and t.handingmanid=PPNextStepOpersonID and T.STATUS=0;
         end if;
         --按钮是找回验证处理
         if PPButtonFlag='FindBack' then
           PPTempInt:=0;
           --制单环节 保存单据明细时就往待办插入一条记录 此时注意跟审核待办不一样 处理人ID为制单操作人 而提交人此时Id为0
           --当制单人正式提交单据后 制单环节的提交人Id也是操作人id
           Select count(*) into PPTempInt from WZ_WAITTASK t where t.id=PPWaitTaskID and t.handingmanid=POperatorID;
           if  PPTempInt>0 then
             Select Status,ExtendInt1 into PPWaitTaskStatus,PPLastWaitTask  from WZ_WAITTASK t where t.id=PPWaitTaskID;
             if PPWaitTaskStatus=1 then
               RetErrorStr:='业务已提交，无法找回';
             end if;
           else
             RetErrorStr:='不能找回非本人提交的业务';
           end if;
         end if;
         --按钮是取消的验证处理
         if PPButtonFlag='CancelBack' then
           PPTempInt:=0;
           Select count(*) into PPTempInt from WZ_WAITTASK t where t.id=PPWaitTaskID and PrevSubmitManID=POperatorID;
           if  PPTempInt>0 then
             Select Status,ExtendInt1 into PPWaitTaskStatus,PPLastWaitTask  from WZ_WAITTASK t where t.id=PPWaitTaskID;
             if PPWaitTaskStatus=0 then
               RetErrorStr:='业务已取消完成'; --写的有问题
             end if;
           else
             RetErrorStr:='不能取消非本人办结的业务';
           end if;
         end if;
         --按钮不是找回和取消的处理
         --fbb注释此处,此处的判断与下面的判断，逻辑冲突
         /*if  PPButtonFlag<>'FindBack' and PPButtonFlag<>'CancelBack' then
            if PPWaitTaskID=0 and PPButtonFlag<>'FindBack' and PPButtonFlag<>'CancelBack' then
               RetErrorStr:='业务已提交成功，请勿重复提交';
            else
              begin
                PPTempInt:=0;
                if  PPTempInt>0 then
                  Select Status into PPWaitTaskStatus  from WZ_WAITTASK t where t.id=PPWaitTaskID;
                  if PPWaitTaskStatus=1 then
                    RetErrorStr:='业务已提交成功，请勿重复提交';
                  end if;
                else
                  begin
                    PPTempInt:=0;
                    --人员表的扩展字段中可以指定每个人的代理人 如果待办表中处理人Id=代理人 则代理人进行处理
                    --Select count(*) into PPTempInt from V_WAITTASK t where t.id=PPWaitTaskID and t.WaitTaskAgentID=POperatorID;
                    if PPTempInt>0 then
                     -- Select AgentName INTO PPAgentInfo from V_WAITTASK t where t.id=PPWaitTaskID ;
                      PPAgentInfo:='';
                      PPAgentInfo := '(代理 '||PPAgentInfo||' 处理)';
                      Select Status into PPWaitTaskStatus  from WZ_WAITTASK t where t.id=PPWaitTaskID;
                      if PPWaitTaskStatus=1 then
                         RetErrorStr:='业务已提交成功，请勿重复提交';
                      end if;
                    else
                      begin
                        RetErrorStr :='提交失败，没有找到需要当前操作员处理的待办事项' || 'WaitTaskID:'||TO_CHAR(PPWaitTaskID) || ' 处理人ID:'||TO_CHAR(POperatorID);
                      end;
                    end if;
                  end;
                end if;
              end;
            end if;
         end if;*/

         if RetErrorStr='1' and PPButtonFlag='FindBack' then   ---如果是找回进行特殊处理
            Delete from WZ_WAITTASK t where t.id=PPWaitTaskID;
            --恢复单据的状态为上一流程记录的状态
            SELECT STATUS,ExtendInt4,ROUTESTEPID,HandingManID INTO  PPRouteWaitTaskStatus,PPSheetStatus,PPPrevWaitStepID,PPPrevWaitPersonID
            FROM WZ_WAITTASK WHERE ID = PPPrevWaitTask;
            IF PPRouteWaitTaskStatus = 1    --如果上一流程已经执行了，找回才有意义，如过找回的是转发流程，直接删除即可
            THEN
                       IF  PPAduitType <> 6
                       then
                          CASE
                          WHEN PPSheetKind='RK'  OR PSheetKind='GiftRK'  then
                            UPDATE WZ_SHEET_RK SET STATUS = PPSheetStatus,
                            ROUTE_STEPID = PPPrevWaitStepID,
                            SUBMITMANID = PPPrevWaitPersonID,
                            SUBMITTIME = NULL       WHERE ID = PPSHEETID;
                          WHEN PPSheetKind='CK' then
                            UPDATE WZ_SHEET_CK SET STATUS = PPSheetStatus,
                            ROUTE_STEPID = PPPrevWaitStepID,
                            SUBMITMANID = PPPrevWaitPersonID,
                            SUBMITTIME = NULL         WHERE ID = PPSHEETID;
                          ELSE
                             --PPAgentInfo:='';
                            UPDATE WZ_SHEET SET STATUS = PPSheetStatus,
                            ROUTE_STEPID = PPPrevWaitStepID,
                            SUBMITMANID = PPPrevWaitPersonID,
                            SUBMITTIME = NULL         WHERE ID = PPSHEETID;
                          END CASE;
                             UPDATE WZ_WAITTASK SET STATUS = 0,
                                   HANDRESULT = 0,
                                   HANDINGTIME =NULL,
                                   EXTENDSTRING1 = '等待处理',
                                   EXTENDSTRING2 = ''
                             WHERE ID = PPPrevWaitTask;
                       END IF;
            END IF;
         end if;
         IF RetErrorStr='1' and PPButtonFlag='CancelBack'  then  --如果是取消，进行特殊处理
                    --恢复单据的状态
                    SELECT ExtendInt4 INTO PPSheetStatus   FROM WZ_WAITTASK WHERE ID =PPWaitTaskID;
                    UPDATE WZ_WAITTASK SET STATUS = 0,
                                           HANDINGTIME =NULL,
                                           EXTENDSTRING1 = '等待处理',
                                           EXTENDSTRING2 = ''
                                WHERE ID =  PPWaitTaskID;
                    CASE
                    WHEN PPSheetKind='RK'  OR PSheetKind='GiftRK'  then
                        UPDATE WZ_SHEET_RK SET STATUS = PPSheetStatus,
                                         SUBMITTIME = NULL
                              WHERE ID = PPSHEETID;
                    WHEN PPSheetKind='CK' then
                        UPDATE WZ_SHEET_CK SET STATUS = PPSheetStatus,
                                         SUBMITTIME = NULL
                              WHERE ID = PPSHEETID;
                    ELSE
                        UPDATE WZ_SHEET SET STATUS = PPSheetStatus,
                                         SUBMITTIME = NULL
                              WHERE ID = PPSHEETID;
                   END CASE;
                END IF;

         IF RetErrorStr= '1' and PPButtonFlag <> 'CancelBack' AND  PPButtonFlag <> 'FindBack'
         then
                 --步骤ID,审批类型,上一待办ID,前一待办ID,步骤名称,流程ID,处理过程

                 --注释此处,并修改.ID去错，应该取步骤ID
                  /*Select ID,RouteType,A.PREVWAITID,A.PREVWAITID,
                    A.ROUTESTEPNAME AS RouteStepName,RouteID,OperProcedure into PPRouteStepID,PPAduitType,PPLastWaitTask,PPPrevWaitTask,
                    PPRouteStepName,PPRouteID,PPOPERPROC  from V_WaitTask A where id=PPWaitTaskID;*/


                    Select RouteStepID,RouteType,A.PREVWAITID,A.PREVWAITID,
                    A.ROUTESTEPNAME AS RouteStepName,RouteID,OperProcedure into PPRouteStepID,PPAduitType,PPLastWaitTask,PPPrevWaitTask,
                    PPRouteStepName,PPRouteID,PPOPERPROC  from V_WaitTask A where id=PPWaitTaskID;


                  SELECT SYS_GUID () INTO PGUID FROM DUAL;
                  select WZWAITTASK_SEQUENCE.nextval  into maxid from dual;
                  select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;
                   --创建新的流程列表
                  --CREATE_ROUTEHISTORY(PSheetKind,PSHEETID,RetErrorStr);
                    --此处获得要当前提交要跳转的下一流程  提交当前待办事项
                   --将后置流程保存在PROCESSINT2中,PROCESSINT1中保存的是上一流程，目的是为了知道当前流程是从哪个流程转过来的

                /*  fbb注释此处,并修改*/
                 /*  IF   PPNEXTID IS NULL
                   THEN
                     PPNEXTID := 0;
                   END IF;*/

                   if PNextStepID is null
                      then
                       PPNEXTID  := 0;
                       else
                       PPNEXTID :=PNextStepID;
                    end if;



                       --POPERRESULT := 1;  处理结果
                  --获取当前单据的状态,保存在PROCESSINT4中,目的是当找回或取消时,可以恢复原来单据的状态
                  --操作后单据的状态0：制单中 1、审核中、2 已完成、3、已终止 4、已挂起
                  CASE
                    WHEN PSheetKind='RK' OR PSheetKind='GiftRK' THEN
                      SELECT STATUS into PPSHEETSTATUS  FROM WZ_SHEET_RK WHERE ID = PSHEETID;
                    WHEN PSheetKind='CK' THEN
                      SELECT STATUS into PPSHEETSTATUS  FROM WZ_SHEET_CK WHERE ID = PSHEETID;
                    ELSE
                      SELECT STATUS into PPSHEETSTATUS  FROM WZ_SHEET WHERE ID = PSHEETID;
                  END CASE;
                  --  提交当前待办，和当前待办相同处理人，而且尚未除了的相同流程的所有待办都提交了
                  --如果是通过、作废或驳回（找回，重新指定处理人例外)
                  if POPERRESULT < 4 then
                  ---提交当前待办事项
                     UPDATE WZ_WAITTASK A
                        SET A.HANDINGMANID   = POperatorID,
                            A.HANDINGTIME    = SYS_DATE,
                            A.HANDSUGGESTION = PCopeAdvice,
                            A.Handresult     = POPERRESULT,
                            A.EXTENDINT2 = PPNEXTID,    --后续流程
                            A.EXTENDINT4 = PPSHEETSTATUS, --执行前单据的状态
                            STATUS           = 1 --处理标志置为已处理
                      WHERE ID = PPWaitTaskID;
                  END If;
                --HaveWaitCount:=0
             CASE
                WHEN POPERRESULT=1 THEN   --处理结果为通过
                 BEGIN
                     IF PPNEXTID > 0 THEN
                     BEGIN
                        PROUTECOUNT := 1;  --说明有后续步骤
                         --如果指定了步骤
                            add_new_waittask(
                            PPSheetKind,  --单据种类
                            PPNEXTID, --PROUTEDETAILID=PPNEXTID 流程步骤Id 当前下一步骤id就是新待办的当前步骤id PPNEXTID
                            PSHEETID,   --单据id
                            PPRouteStepID, --当前步骤id 插入待办表中的extendint1（上一步骤Id）
                            PMENUID,
                            POperatorID,   --提交人Id
                            PPNextStepOpersonID,  --下一处理人就是当前待办的处理人Id
                            PPNextStepOpersonLIST, --多个处理人Id
                            PJUMPPATH,
                            PSHEETDETAILID,  --单据明细Id
                            PPStepHint,   --待办提示
                            1000,
                            PRetInt,PRetHintStr,PRetErrorStr
                            );
                          --新建待办事项完毕
                          --PRINT @PNEXTPERSONID
                          --如果新建待办事项的处理人和当前人是同一个人，那么就
                          IF  PPNextStepOpersonID = POperatorID THEN
                          BEGIN
                              ---提交当前待办事项
                              /* UPDATE  WZ_WAITTASK A SET  A.HANDINGMANID = POperatorID,
                                                        A.HANDINGTIME = SYS_DATE,
                                                        A.HANDSUGGESTION = PCopeAdvice,
                                                        A.HANDRESULT =1,
                                                       -- OPERRESULT = 1,
                                                        STATUS = 1   --处理标志置为已处理
                                                  WHERE A.SHEETID = PSHEETID AND A.PREVSUBMITMANID = POperatorID AND A.ROUTESTEPID =  PPNEXTID;
*/
                            SELECT A.PREVID INTO PPREVID FROM BASE_ROUTESTEP A WHERE A.ID=PPNEXTID;               
                            IF PPREVID ='' THEN 
                            BEGIN
                               SELECT  A.ROUTESTEPID,A.ROUTEID,A.OPERPROCEDURE INTO PPRouteStepID,PPROUTEID,PPOPERPROC FROM V_WAITTASK A
                                      WHERE A.SHEETID = PSHEETID AND A.SUBMITMANID = POperatorID AND A.ROUTESTEPID =PPNEXTID;
                            END;
                             ELSE
                             BEGIN
                              SELECT  A.ROUTESTEPID,A.ROUTEID,A.OPERPROCEDURE INTO PPRouteStepID,PPROUTEID,PPOPERPROC FROM V_WAITTASK A
                                      WHERE A.SHEETID = PSHEETID AND A.HANDINGMANID = POperatorID AND A.ROUTESTEPID =PPNEXTID;
                             END;
                             END IF;
                           /*  Open WAITTASK_CURSOR  FOR
                               SELECT A.ROUTESTEPID from V_SHEET_CURROUTE A WHERE A.SHEETID = PSHEETID AND A.PREVID = PPRouteStepID
                               UNION   --当前步骤的后续步骤（而且后续步骤必须在当前单据流程中）
                               SELECT B.ROUTESTEPID from V_SHEET_CURROUTE B where B.SHEETID = PSHEETID AND B.ROUTESTEPID = (select A.NEXTID from V_SHEET_CURROUTE A where A.ROUTESTEPID =PPRouteStepID AND A.SHEETID = PSHEETID);
                             LOOP
                               FETCH WAITTASK_CURSOR  INTO PPNEXTID;
                               EXIT WHEN WAITTASK_CURSOR%NOTFOUND;
                                 --后的后续下一流程的ID
                                HaveWaitCount := HaveWaitCount + 1 ;
                                 --循环进行添加待办，有可能有多个待办事项
                                add_new_waittask(
                                PPSheetKind,  --单据种类
                                PPNEXTID, --PROUTEDETAILID=PPNEXTID 流程步骤Id 当前下一步骤id就是新待办的当前步骤id PPNEXTID
                                PSHEETID,   --单据id
                                PPRouteStepID, --当前步骤id 插入待办表中的extendint1（上一步骤Id）
                                PMENUID,
                                POperatorID,   --提交人Id
                                PPNextStepOpersonID,  --下一处理人就是当前待办的处理人Id
                                PPNextStepOpersonLIST, --多个处理人Id
                                PJUMPPATH,
                                PSHEETDETAILID,  --单据明细Id
                                PPStepHint,   --待办提示
                                1000,
                                PPNextStepOpersonID,PRetHintStr,PRetErrorStr
                                );
                             END LOOP;
                            CLOSE WAITTASK_CURSOR;*/--关闭游标
                           END;
                          END  IF;
                      END;
                     ELSE
                     BEGIN
                        --创建新的待办事项
                        --前置步骤是当前步骤的流程
                        PROUTECOUNT := 0;   --后续步骤标志
                        OPEN WAITTASK_CURSOR  FOR
                        SELECT A.ROUTESTEPID from V_SHEET_CURROUTE A WHERE A.SHEETID = PSHEETID AND A.PREVID = PPRouteStepID
                        UNION   --当前步骤的后续步骤（而且后续步骤必须在当前单据流程中）
                        SELECT B.ROUTESTEPID from V_SHEET_CURROUTE B where B.SHEETID = PSHEETID AND B.ROUTESTEPID = (SELECT DISTINCT A.NEXTID
                        from V_SHEET_CURROUTE A where A.ROUTESTEPID =PPRouteStepID AND A.SHEETID = PSHEETID);
                       LOOP
                        FETCH   WAITTASK_CURSOR INTO PPNEXTID;
                        EXIT WHEN WAITTASK_CURSOR%NOTFOUND;
                        BEGIN
                          --后的后续下一流程的ID
                          HaveWaitCount := HaveWaitCount + 1;  --设置后续步骤标志
                          --循环进行添加待办，有可能有多个待办事项
                          add_new_waittask(
                                PPSheetKind,  --单据种类
                                PPNEXTID, --PROUTEDETAILID=PPNEXTID 流程步骤Id 当前下一步骤id就是新待办的当前步骤id PPNEXTID
                                PSHEETID,   --单据id
                                PPRouteStepID, --当前步骤id 插入待办表中的extendint1（上一步骤Id）
                                PMENUID,
                                POperatorID,   --提交人Id
                                PPNextStepOpersonID,  --下一处理人就是当前待办的处理人Id
                                PPNextStepOpersonLIST, --多个处理人Id
                                PJUMPPATH,
                                PSHEETDETAILID,  --单据明细Id
                                PPStepHint,   --待办提示
                                1000,
                                PPNextStepOpersonID,PRetHintStr,PRetErrorStr
                                );
                        END;
                        END LOOP;
                        CLOSE WAITTASK_CURSOR;--关闭游标
                        --新建待办事项完毕
                        --PRINT @PNEXTPERSONID
                        --如果新建待办事项的处理人和当前人是同一个人，那么就
                        IF  PPNextStepOpersonID = POperatorID THEN
                        BEGIN
                            ---提交当前待办事项
                            UPDATE  WZ_WAITTASK A SET  A.HANDINGMANID = POperatorID,
                                                        A.HANDINGTIME = SYS_DATE,
                                                        A.HANDSUGGESTION = PCopeAdvice,
                                                        A.HANDRESULT =1,
                                                        STATUS = 1   --处理标志置为已处理
                                                  WHERE A.SHEETID = PSHEETID AND A.PREVSUBMITMANID = POperatorID AND A.ROUTESTEPID =  PPNEXTID;

                             SELECT A.ROUTESTEPID,A.ROUTEID,A.OPERPROCEDURE INTO PPRouteStepID,PPROUTEID,PPOPERPROC FROM V_WAITTASK A
                                    WHERE A.SHEETID = PSHEETID AND A.SUBMITMANID = POperatorID AND A.ROUTESTEPID = PPNEXTID;
                             OPEN WAITTASK_CURSOR  FOR
                             SELECT A.ROUTESTEPID from V_SHEET_CURROUTE A WHERE A.SHEETID = PSHEETID AND A.PREVID = PPRouteStepID
                             UNION   --当前步骤的后续步骤（而且后续步骤必须在当前单据流程中）
                             SELECT A.ROUTESTEPID from V_SHEET_CURROUTE A where A.SHEETID = PSHEETID AND A.ROUTESTEPID = (select A.NEXTID
                             from V_SHEET_CURROUTE A where A.ROUTESTEPID =PPRouteStepID AND A.SHEETID = PSHEETID);
                             loop
                             FETCH  WAITTASK_CURSOR INTO PPNEXTID;
                             EXIT WHEN WAITTASK_CURSOR%NOTFOUND;
                             BEGIN
                                --后的后续下一流程的ID
                                HaveWaitCount := HaveWaitCount + 1;  --设置后续步骤标志
                                --循环进行添加待办，有可能有多个待办事项
                                add_new_waittask(
                                      PPSheetKind,  --单据种类
                                      PPNEXTID, --PROUTEDETAILID=PPNEXTID 流程步骤Id 当前下一步骤id就是新待办的当前步骤id PPNEXTID
                                      PSHEETID,   --单据id
                                      PPRouteStepID, --当前步骤id 插入待办表中的extendint1（上一步骤Id）
                                      PMENUID,
                                      POperatorID,   --提交人Id
                                      PPNextStepOpersonID,  --下一处理人就是当前待办的处理人Id
                                      PPNextStepOpersonLIST, --多个处理人Id
                                      PJUMPPATH,
                                      PSHEETDETAILID,  --单据明细Id
                                      PPStepHint,   --待办提示
                                      1000,
                                      PPNextStepOpersonID,PRetHintStr,PRetErrorStr
                                      );
                             END;
                             END LOOP;
                             CLOSE WAITTASK_CURSOR;--关闭游标
                          end;
                        END IF;
                     END;
                     END IF;
                    SELECT A.SHEETSTATUSID INTO PPSHEETSTATUS FROM V_ROUTESTEP A WHERE ID = PPRouteStepID;
                  --如果单据流程已经结束了，就将单据的状态设置为已完成
                    IF HaveWaitCount = 0 THEN
                          PPSHEETSTATUS := 41;
                    end if;
                   case
                   when  PPSHEETSTATUS=39 then --第一步

                    CASE

                      WHEN PSheetKind='RK'  OR PSheetKind='GiftRK'  THEN

                              UPDATE WZ_SHEET_RK A SET STATUS = 40,
                                              ROUTE_STEPID = PPNEXTID,
                                              SUBMITMANID = POperatorID,
                                              SUBMITTIME = SYS_DATE
                                        WHERE ID = PSHEETID;
                      WHEN PSheetKind='CK' THEN
                           UPDATE WZ_SHEET_CK A SET STATUS = 40,
                                              ROUTE_STEPID = PPNEXTID,
                                              SUBMITMANID = POperatorID,
                                              SUBMITTIME = SYS_DATE
                                        WHERE ID = PSHEETID;
                      ELSE
                           UPDATE WZ_SHEET A SET STATUS = 40,
                                              ROUTE_STEPID = PPNEXTID,
                                              SUBMITMANID = POperatorID,
                                              SUBMITTIME = SYS_DATE
                                        WHERE ID = PSHEETID;
                    END CASE;

                     when  PPSHEETSTATUS=41 then --最后一步

                        CASE

                          WHEN PSheetKind='RK'  OR PSheetKind='GiftRK'  THEN

                                  UPDATE WZ_SHEET_RK A SET STATUS = PPSHEETSTATUS,

                                                  SUBMITMANID = POperatorID,
                                                  SUBMITTIME = SYS_DATE
                                            WHERE ID = PSHEETID;
                          WHEN PSheetKind='CK' THEN
                               UPDATE WZ_SHEET_CK A SET STATUS = PPSHEETSTATUS,

                                                  SUBMITMANID = POperatorID,
                                                  SUBMITTIME = SYS_DATE
                                            WHERE ID = PSHEETID;
                          ELSE
                               UPDATE WZ_SHEET A SET STATUS = PPSHEETSTATUS,

                                                  SUBMITMANID = POperatorID,
                                                  SUBMITTIME = SYS_DATE
                                            WHERE ID = PSHEETID;
                        END CASE;
                   else
                        CASE

                      WHEN PSheetKind='RK'  OR PSheetKind='GiftRK'  THEN

                              UPDATE WZ_SHEET_RK A SET STATUS = PPSHEETSTATUS,
                                              ROUTE_STEPID = PPNEXTID,
                                              SUBMITMANID = POperatorID,
                                              SUBMITTIME = SYS_DATE
                                        WHERE ID = PSHEETID;
                      WHEN PSheetKind='CK' THEN
                           UPDATE WZ_SHEET_CK A SET STATUS = PPSHEETSTATUS,
                                              ROUTE_STEPID = PPNEXTID,
                                              SUBMITMANID = POperatorID,
                                              SUBMITTIME = SYS_DATE
                                        WHERE ID = PSHEETID;
                      ELSE
                           UPDATE WZ_SHEET A SET STATUS = PPSHEETSTATUS,
                                              ROUTE_STEPID = PPNEXTID,
                                              SUBMITMANID = POperatorID,
                                              SUBMITTIME = SYS_DATE
                                        WHERE ID = PSHEETID;
                    END CASE;

             end case;
                    --执行提交后要执行的存储过程
                    --先执行指定按钮要执行的存储过程
                    --如果还设置了流程要执行的存储过程
                    IF ( PPOPERPROC > '0')  then

                                      select instr(PPOPERPROC,'_COMMIT') into IsProc from dual;
                                      select instr(PPOPERPROC,'SQL:') into IsSQL from dual;
                                      if IsProc>0 then
                                      PPSQLStr := 'BEGIN ' || PPOPERPROC ||'( :a,:b,:c,:d ) ' || '; END;';
                                      EXECUTE IMMEDIATE PPSQLStr
                                                   USING IN PPRouteStepID,
                                                   IN PSHEETID,
                                                   IN POperatorID,
                                                   OUT RetErrorStr;
                                                   end if;
                                       if IsSQL>0 then
                                       PPSQLStr := substr(PPOPERPROC,instr(PPOPERPROC,'SQL:')+4,length(PPOPERPROC)-instr(PPOPERPROC,'SQL:'));
                                       PPSQLStr := replace(PPSQLStr,'@PSHEETID',PSHEETID);
                    DBMS_OUTPUT.PUT_LINE(PPSQLStr);                 
                     execute immediate PPSQLStr;
                                       end if;
                                 end if;   
                       -- RetInt := PNEXTID;
                        RetInt := PPWaitTaskID;
                      -- PERRORSTRING ='1'
                        RetErrorStr :=to_char(POPERRESULT);
                END;
                WHEN  POPERRESULT=2 THEN   --处理结果为不通过
                BEGIN
                   --将单据设置为终止状态 已终止：42
                      PPSHEETSTATUS:=42;
                                      CASE
                      WHEN PSheetKind='RK'  OR PSheetKind='GiftRK'  THEN
                              UPDATE WZ_SHEET_RK A SET STATUS = PPSHEETSTATUS,
                                              ROUTE_STEPID = PPNEXTID,
                                              SUBMITMANID = POperatorID,
                                              SUBMITTIME = SYS_DATE
                                        WHERE ID = PSHEETID;
                      WHEN PSheetKind='CK' THEN
                           UPDATE WZ_SHEET_CK A SET STATUS = PPSHEETSTATUS,
                                              ROUTE_STEPID = PPNEXTID,
                                              SUBMITMANID = POperatorID,
                                              SUBMITTIME = SYS_DATE
                                        WHERE ID = PSHEETID;
                      ELSE
                           UPDATE WZ_SHEET A SET STATUS = PPSHEETSTATUS,
                                              ROUTE_STEPID = PPNEXTID,
                                              SUBMITMANID = POperatorID,
                                              SUBMITTIME = SYS_DATE
                                        WHERE ID = PSHEETID;
                    END CASE;
                END;
                WHEN  POPERRESULT=3 THEN   --处理结果为驳回
                BEGIN
                  add_return_waittask(
                                      PPSheetKind,  --单据种类
                                      0, --PROUTEDETAILID=PPNEXTID 流程步骤Id 当前下一步骤id就是新待办的当前步骤id PPNEXTID
                                      PSHEETID,   --单据id
                                      PPRouteStepID, --当前步骤id 插入待办表中的extendint1（上一步骤Id）
                                      PMENUID,
                                      POperatorID,   --提交人Id
                                      PPNextStepOpersonID,  --下一处理人就是当前待办的处理人Id
                                      PPNextStepOpersonLIST, --多个处理人Id
                                      PJUMPPATH,
                                      PSHEETDETAILID,  --单据明细Id
                                      PCopeAdvice,   --处理意见   待办提示
                                      1000,
                                      PPNextStepOpersonID,PRetHintStr,PRetErrorStr
                                      );
                END;
                WHEN  POPERRESULT=4 THEN   --处理结果为找回
                BEGIN
                    --如果找回时没有指定要找回的流程ID，就根据当前登录人进行查找当前未处理的PROCESSID
                    IF PPWaitTaskID = 0 THEN
                    BEGIN
                       SELECT  A.ID INTO PPTempInt FROM V_WAITTASK A WHERE A.SHEETID=PSHEETID AND A.HANDRESULT = 0 AND A.PREVSUBMITMANID = POperatorID;
                       IF PPTempInt>0 THEN
                           SELECT  ID INTO PPWaitTaskID FROM V_WAITTASK A WHERE A.SHEETID=PSHEETID AND A.HANDRESULT = 0 AND A.PREVSUBMITMANID = POperatorID;
                       END IF;
                    END;
                    END IF;
                    IF PPWaitTaskID > 0 THEN
                    BEGIN
                        --获得上一步骤的ID，上步骤的ID保存在PROCESSINT1中
                        SELECT  A.EXTENDINT1,A.PREVSUBMITMANID,A.STATUS INTO PPPrevWaitStepID ,PPPrevWaitPersonID, PSTATUS FROM WZ_WAITTASK A WHERE ID = PPWaitTaskID;
                        --删除当前待办事项
                        IF  ( PPPrevWaitStepID > 0 ) AND ( PSTATUS = 0 ) THEN
                        BEGIN
                            DELETE FROM WZ_WAITTASK WHERE ID = PPWaitTaskID;
                           --修改上一步骤的处理结果和处理状态
                            UPDATE WZ_WAITTASK A SET A.STATUS = 0,
                                                   A.HANDRESULT = 0,
                                                   A.HANDSUGGESTION = '',
                                                   A.HANDINGTIME = NULL
                                             WHERE SHEETID = PSHEETID AND A.ROUTESTEPID = PPPrevWaitStepID AND  A.HANDINGMANID = PPPrevWaitPersonID;
                        END;
                        ELSE
                        BEGIN
                            IF ( PSTATUS = 0 ) THEN
                                PRetErrorStr  := '单据已处理，无法进行找回操作!';
                            ELSE
                                PRetErrorStr  := '单据已经是初始状态，无法进行找回操作!';
                            END IF;
                        END;
                        END IF;
                    END;
                    ELSE
                      PRetErrorStr  := '当前操作员没有允许找回的待办事项!';
                    END IF ;
                END;
                WHEN  POPERRESULT=5 THEN   --处理结果为指定处理人
                BEGIN
                  RetInt:=0;
                  IF PPWaitTaskID > 0 THEN
                    BEGIN
                       SELECT A.STATUS INTO PPSHEETSTATUS FROM WZ_WAITTASK A WHERE ID =PPWaitTaskID;
                       IF PPSHEETSTATUS = 0 THEN
                       BEGIN
                       --设置除提交人、进入时间、处理人
      /*                      UPDATE PROCESSDATA SET OPERPERSONID = @PNEXTPERSONID,
                                                   STATUS = 0,
                                                   PREVPERSONID = @PPERSONID,
                                                   OPERRESULT = 0,
                                                   OPERDESCRIPTION = '',
                                                   OPERTIME = NULL,
                                                   INPUTTIME = GETDATE()
                                      WHERE ID =   PPWaitTaskID*/

                     UPDATE WZ_WAITTASK A
                        SET
                            A.HANDINGMANID   =PPNextStepOpersonID,
                            A.PREVSUBMITMANID=POperatorID,
                            A.HANDINGTIME    = null,
                            A.PREVSUBMITTIME=SYS_DATE,
                            A.HANDSUGGESTION = '',
                            A.Handresult     = 0,
                            A.EXTENDINT2 = PPNEXTID,    --后续流程
                            A.EXTENDINT4 = PPSHEETSTATUS, --执行前单据的状态
                            STATUS           = 0 --处理标志置为未处理
                      WHERE ID = PPWaitTaskID;
                       END;
                       ELSE
                          PRetErrorStr  := '单据已处理，无法变更业务处理人!';
                       end if;

                    END;
                    ELSE
                      PRetErrorStr  := '没有指定待办事项ID，无法变更业务处理人!';
                  END IF;
                END;
             END CASE;
                     --记录操作日志
                     WRITE_BASE_LOG(1,
                               PPRouteStepName,
                               '成功',
                               PSHEETID,
                               0,
                                              POperatorID,
                                              RetErrorStr);

           END if;  ---@PERRORSTRING = '1'

       dbms_output.put_line('....');
      end;




/
--------------------------------------------------------
--  DDL for Procedure ROW_TO_COL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "ROW_TO_COL" (tabname         in varchar2,  --需要进行行转列操作的表名
                                       group_col       in varchar2,  --查询结果要按某列或某些列分组的字段名
                                       column_col      in varchar2,  --要从行转成列的字段
                                       value_col       in varchar2,  --需要聚合的值字段
                                       Aggregate_func  in varchar2 default 'max',  --选用的聚合函数，可选，默认为max
                                       colorder        in varchar2 default null,   --行转列后列的排序，可选
                                       roworder        in varchar2 default null,   --行转列后记录的排序，可选
                                       when_value_null in varchar2 default '0',   --若value_col字段的值聚合后为空，则转换成该值，可选
                                       viewname        in varchar2 default 'v_tmp' --创建的视图名称，可选，默认为v_tmp
                                        )
  Authid Current_User as
  sqlstr varchar2(2000) := 'create or replace view ' || viewname ||
                           ' as select ' || group_col || ' ';
  c1     sys_refcursor;
  v1     varchar2(100);
begin
  open c1 for 'select distinct ' || column_col || ' from ' || tabname || case when colorder is not null then ' order by ' || colorder end;
  loop
    fetch c1
      into v1;
    exit when c1%notfound;
    sqlstr := sqlstr || chr(10) || ',' || case
                when when_value_null is not null then
                 'nvl('
              end || Aggregate_func || '(decode(to_char(' || column_col ||
              '),''' || v1 || ''',' || value_col || '))' || case
                when when_value_null is not null then
                 chr(44) || when_value_null || chr(41)
              end || '"' || v1 || '"';
  end loop;
  close c1;
  sqlstr := sqlstr || ' from ' || tabname || ' group by ' || group_col || case
              when roworder is not null then
               ' order by ' || roworder
            end;
  execute immediate sqlstr;
end row_to_col;




/
--------------------------------------------------------
--  DDL for Procedure SHEETCK_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SHEETCK_COMMIT" 
(
          PPROCID integer,
          PSHEETID integer,
          PPERSONID integer,
          retval out   varchar2
)
is

    SYS_DATE DATE;
    ckDetailId integer;
    TYPE REF_CURESOR_TYPE IS REF CURSOR;
    STOCK_CURSOR REF_CURESOR_TYPE;
BEGIN
        select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;

open STOCK_CURSOR for SELECT ID from WZ_SHEETCKDETAIL where SHEETID = PSHEETID;
      loop
           fetch STOCK_CURSOR into ckDetailId;
           exit when STOCK_CURSOR%notfound;
           --更新库存数据
/*           update WZ_STOCK   SET  (STORECOUNT, TOTALWEIGHT,UPDATEDATE)=(SELECT DETAILCOUNT,TOTALWEIGHT ,SYS_DATE FROM WZ_SHEETCKDETAIL A   WHERE SHEETID=PSHEETID AND SHEETDETAILID=stockid)
*/
update WZ_STOCK  A SET  (A.STORECOUNT,A.UPDATEDATE,A.UPDATOR)=
           (SELECT A.STORECOUNT-B.DETAILCOUNT ,SYS_DATE,PPERSONID FROM WZ_SHEETCKDETAIL B    
           WHERE ID=ckDetailId)
        WHERE A.ID=(SELECT EXTENDINT2 FROM WZ_SHEETCKDETAIL C WHERE C.ID=ckDetailId );
--如果是调拨出库TYPEID=772，将调拨单的状态更改为待入库774
 UPDATE  WZ_SHEET  A SET  A.STATUS=774  WHERE A.ID=(SELECT B.EXTENDINT2 FROM WZ_SHEET_CK B WHERE B.TYPEID=772 AND B.ID=PSHEETID AND B.EXTENDINT2=A.ID);
          END LOOP;
        CLOSE STOCK_CURSOR;--关闭游标


end SHEETCK_COMMIT;






/
--------------------------------------------------------
--  DDL for Procedure SHEETDB_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SHEETDB_COMMIT" 
(
          PPROCID integer,
          PSHEETID integer,--传入单据号
          PPERSONID integer,
          retval out   varchar2
)
IS
BEGIN
      --将单据的ROUTE_STEPID 改为2653中心副主任审批
      UPDATE WZ_SHEET SET Route_stepid=2653 WHERE ID=PSHEETID;

END SHEETDB_COMMIT;


/
--------------------------------------------------------
--  DDL for Procedure SHEETGIFTRK_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SHEETGIFTRK_COMMIT" (
                                           --PSHEETKIND varchar2,
                                           PPROCID   integer,
                                           PSHEETID  integer,
                                           PPERSONID integer,
                                           retval    out varchar2) is
  tempNum        number;
  SYS_DATE       DATE;
  PSHEETSTATUS   INTEGER; --单据的状态
  PID            INTEGER; --单据明细ID
  PSHEETDETAILID INTEGER; --相关明细明细ID
  PSHEETCODE     VARCHAR2(50); ---单据编号
  PPERSONCODE    VARCHAR2(50); ---登录名
  PRETINT        INTEGER;
  PRETSTRING     VARCHAR2(200);
  PERRORSTRING   VARCHAR2(200);
  p_error_flag   integer; ---费用账户验证返回值
  p_error_msg    VARCHAR2(500); ---费用账户错误信息
  PVIEWNAME      VARCHAR(64); --视图名称
BEGIN
  select to_date((to_char(sysdate, 'yyyy-MM-dd HH24:mi:ss')),
                 'yyyy-mm-dd,hh24:mi:ss')
    INTO SYS_DATE
    from dual;

  --根据入库单ID更新库存数据
  INSERT INTO WZ_STOCK
    (ID,
     GUID,
     TAGCODE,
     SHEETID,
     SHEETDETAILID,
     CATEGORYID,
     MATERIALID,
     MATERIALCODE,
     MATERIALNAME,
     MATERIALBRAND,
     MATERIALMODEL,
     MATERIALSPECIFICATION,
     DESCRIPTION,
     ORDERNUM,
     RECEIVENUM,
     STORECOUNT,
     DETAILUNIT,
     /*NOTAXSUM,*/
     NOTAXPRICE,
     TAXPRICE,
     TAXRATE,
     CURRENCYUNIT,
     /*TAXSUM,*/
     STOREID,
     STORELOCATIONID,
     STORELOCATIONCODE,
     STORELOCATIONNAME,
     PROVIDERDEPID,
     PLANDEPARTID,
     STATUS,
     MEMO,
     CREATOR,
     CREATEDATE,
     EXPIRATIONTIME,
     ZTID,
     ISEQUIPMENT,
     OWNERTYPE,
     ENABLESN,
     SNCODE,
     DETAILUNITNAME)
    select WZSTOCK_SEQUENCE.NEXTVAL,
           SYS_GUID(),
           A.TAGCODE,
           A.SHEETID,
           A.ID,
           A.CATEGORYID,
           A.MATERIALID,
           A.MATERIALCODE,
           A.MATERIALNAME,
           A.MATERIALBRAND,
           A.MATERIALMODEL,
           A.MATERIALSPECIFICATION,
           A.DESCRIPTION,
           A.ORDERNUM,
           A.RECEIVENUM,
           B.SUBDETAILCOUNT,
           A.DETAILUNIT,
           /*A.NOTAXSUM,*/
           A.NOTAXPRICE,
           A.TAXPRICE,
           A.TAXRATE,
           A.CURRENCYUNIT,
           /*A.TAXSUM,*/
           A.STOREID,
           B.STORELOCATIONID,
           B.STORELOCATIONCODE,
           B.STORELOCATIONNAME,
           A.PROVIDERDEPID,
           A.PLANDEPARTID,
           A.STATUS,
           A.MEMO,
           A.CREATOR,
           SYS_DATE,
           A.EXPIRATIONTIME,
           A.ZTID,
           A.ISEQUIPMENT,
           A.OWNERTYPE,
           A.ENABLESN,
           A.SNCODE,
           A.DETAILUNITNAME

      from V_SHEET_RKDETAIL A
      LEFT JOIN WZ_SHEETRKSUBDETAIL B ON A.ID = B.DETAILID
     where A.SHEETID = PSHEETID;

end SHEETGIFTRK_COMMIT;


/
--------------------------------------------------------
--  DDL for Procedure SHEETJCCK_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SHEETJCCK_COMMIT" 
(
          PPROCID integer,
          PSHEETID integer,
          PPERSONID integer,
          retval out   varchar2
)
is

    SYS_DATE DATE;
    stockid integer;
    TYPE REF_CURESOR_TYPE IS REF CURSOR;
    STOCK_CURSOR REF_CURESOR_TYPE;
BEGIN
        select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;

open STOCK_CURSOR for SELECT sheetdetailid from WZ_SHEETDETAIL where SHEETID = PSHEETID;
      loop
           fetch STOCK_CURSOR into stockid;
           exit when STOCK_CURSOR%notfound;
--更新库存
update WZ_STOCK  A SET  (A.STORECOUNT,A.UPDATEDATE,A.UPDATOR)=
           (SELECT A.STORECOUNT-B.DETAILCOUNT ,SYS_DATE,PPERSONID FROM WZ_SHEETDETAIL B  WHERE SHEETID=PSHEETID AND SHEETDETAILID=stockid)
           where Id = stockid;

          END LOOP;
        CLOSE STOCK_CURSOR;--关闭游标
end SHEETJCCK_COMMIT;


/
--------------------------------------------------------
--  DDL for Procedure SHEETJCRK_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SHEETJCRK_COMMIT" 
(
          --PSHEETKIND varchar2,
          PPROCID integer,
          PSHEETID integer,
          PPERSONID integer,
          retval out   varchar2
)
is
    tempNum number;
    SYS_DATE DATE;
    PSHEETSTATUS   INTEGER;      --单据的状态
    PID            INTEGER;      --单据明细ID
    PSHEETDETAILID INTEGER;      --相关明细明细ID
    PSHEETCODE     VARCHAR2(50);  ---单据编号
    PPERSONCODE    VARCHAR2(50);  ---登录名
    PRETINT        INTEGER;
    PRETSTRING     VARCHAR2(200);
    PERRORSTRING   VARCHAR2(200);
    p_error_flag integer;     ---费用账户验证返回值
    p_error_msg  VARCHAR2(500);  ---费用账户错误信息
    PVIEWNAME  VARCHAR(64);    --视图名称
BEGIN
        select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;

        --删除库存中原有对应入库单ID的记录(比如入库单被修改了之后)
        DELETE FROM WZ_STOCK A WHERE A.SHEETID =PSHEETID;
        --根据入库单ID更新库存数据
        INSERT INTO WZ_STOCK(
                      ID,
                      GUID,
                      SHEETID,
                      SHEETDETAILID,
                      CATEGORYID,
                      MATERIALID,
                      MATERIALCODE,
                      MATERIALNAME,
                      MATERIALBRAND,
                      MATERIALMODEL,
                      MATERIALSPECIFICATION,
                      DESCRIPTION,
                      STORECOUNT,
                      DETAILUNITNAME,
                      /*NOTAXSUM,*/
                      NOTAXPRICE,
                      TAXPRICE,
                      TAXRATE,
                      /*TAXSUM,*/
                      STOREID,
                      STORELOCATIONID,
                      STORELOCATIONCODE,
                      STORELOCATIONNAME,
                      STATUS,
                      MEMO,
                      CREATOR,
                      CREATEDATE,
                      ZTID  ,
                      PURCHASETYPE,
                      OWNERDEP,
                      TAGCODE
                   )
              select WZSTOCK_SEQUENCE.NEXTVAL,
                     SYS_GUID(),
                     A.SHEETID,
                     A.ID,
                     A.CATEGORYID,
                     A.MATERIALID,
                     A.MATERIALCODE,
                     A.MATERIALNAME,
                     A.MATERIALBRAND,
                     A.MATERIALMODEL,
                     A.MATERIALSPECIFICATION,
                     A.DESCRIPTION,
                     A.DETAILCOUNT,
                     A.DETAILUNITNAME,
                     /*NOTAXSUM,*/
                     A.NOTAXPRICE,
                     A.TAXPRICE,
                     A.TAXRATE,
                    /* TAXSUM,*/
                     A.STOREID,
                     A.STORELOCATIONID,
                     A.STORELOCATIONCODE,
                     A.STORELOCATIONNAME,
                     A.STATUS,
                     A.MEMO,
                     A.CREATOR,
                     SYS_DATE,
                     A.ZTID,
                     1,
                     B.OWNERDEP,
                     A.TAGCODE

                from V_JCRKDETAILS A LEFT JOIN WZ_SHEET B ON A.SHEETID=B.ID where A.SHEETID = PSHEETID  ;


end SHEETJCRK_COMMIT;


/
--------------------------------------------------------
--  DDL for Procedure SHEETJS_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SHEETJS_COMMIT" 
(
          PPROCID integer,
          PSHEETID integer,
          PPERSONID integer,
          retval out   varchar2
)
is

    SYS_DATE DATE;
    mxid integer;
    TYPE REF_CURESOR_TYPE IS REF CURSOR;
    STOCK_CURSOR REF_CURESOR_TYPE;
BEGIN
        select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;

open STOCK_CURSOR for SELECT id from v_jsdetails where SHEETID = PSHEETID;
      loop
           fetch STOCK_CURSOR into mxid;
           exit when STOCK_CURSOR%notfound;
           --更新采购数量
           update wz_orderinfo  A SET  (A.EXTENDFLOAT1,A.Updatedate,A.Updator)=
           (SELECT A.EXTENDFLOAT1-B.DETAILCOUNT,SYS_DATE,PPERSONID FROM v_jsdetails B WHERE B.SHEETID=PSHEETID AND B.ID=mxid)
           where Id = (select sheetdetailid from v_jsdetails J where J.id=mxid and J.SHEETID=PSHEETID);
          --更新物料表中是否启用序列号字段
          update base_material m set m.enablesn=(select ENABLESN from v_jsdetails where SHEETID=PSHEETID AND ID=mxid)
          where code =(select materialcode from v_jsdetails  where id=mxid and SHEETID=PSHEETID)
          and   ztid=(select ztid from v_jsdetails  where id=mxid and SHEETID=PSHEETID);
          END LOOP;
CLOSE STOCK_CURSOR;--关闭游标
 INSERT INTO WZ_RECEIVINGLOG
    (GUID,
     ORDERID,
     RELATIONGUID,
     CONTENT,
     CREATEDATE,
     CREATER,
     COUNT,
     OPERATIONTYPE,
     EXTENDINT1)
 SELECT 
     SYS_GUID(),
     A.SHEETDETAILID,
     A.GUID,
     SYS_DATE ||','|| C.NAME ||',接收了【'||A.DETAILCOUNT||'】'|| A.DETAILUNITNAME||'物料,物料编码是：'||A.MATERIALCODE,
     SYS_DATE,
     PPERSONID,
     A.DETAILCOUNT,
     1,
     A.ZTID
      FROM WZ_SHEETDETAIL A LEFT JOIN WZ_SHEET B ON A.SHEETID=B.ID LEFT JOIN BASE_PERSON C ON C.ID=B.CREATOR
     WHERE A.SHEETID = PSHEETID;
end SHEETJS_COMMIT;


/
--------------------------------------------------------
--  DDL for Procedure SHEETKCPD_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SHEETKCPD_COMMIT" (PPROCID   integer,
                                             PSHEETID  integer,
                                             PPERSONID integer,
                                             retval    out varchar2) is

  SYS_DATE DATE;
  mxid     integer;
  czweight number(18, 6);
  czcount  number(18, 6);
  pdweight number(18, 6);
  TYPE REF_CURESOR_TYPE IS REF CURSOR;
  STOCK_CURSOR REF_CURESOR_TYPE;
BEGIN
  select to_date((to_char(sysdate, 'yyyy-MM-dd HH24:mi:ss')),
                 'yyyy-mm-dd,hh24:mi:ss')
    INTO SYS_DATE
    from dual;

  open STOCK_CURSOR for
    SELECT ID from V_KCPDDETAILS where SHEETID = PSHEETID;
  loop
    fetch STOCK_CURSOR
      into mxid;
    exit when STOCK_CURSOR%notfound;

    update WZ_STOCK A SET A.STORECOUNT=0, A.UPDATEDATE=SYS_DATE, A.UPDATOR=PPERSONID WHERE
              A.ID=(SELECT sheetdetailid FROM V_KCPDDETAILS WHERE V_KCPDDETAILS.ID=mxid);


    update WZ_STOCK A
       SET (A.STORECOUNT,A.UPDATEDATE,A.UPDATOR ) = (SELECT DETAILCOUNT,SYS_DATE,PPERSONID FROM V_KCPDDETAILS B
                                                       WHERE SHEETID = PSHEETID  AND id = mxid)
     where  ID=(SELECT sheetdetailid FROM V_KCPDDETAILS WHERE V_KCPDDETAILS.ID=mxid )
       and rownum = 1;

  END LOOP;
  CLOSE STOCK_CURSOR; --关闭游标
end SHEETKCPD_COMMIT;


/
--------------------------------------------------------
--  DDL for Procedure SHEETRK_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SHEETRK_COMMIT" (
 --PSHEETKIND varchar2,
 PPROCID   integer,
 PSHEETID  integer,
 PPERSONID integer,
 retval   out varchar2) is
 tempNum   number;
 SYS_DATE       DATE;
 PSHEETSTATUS   INTEGER; --单据的状态 PID INTEGER; --单据明细ID
 PSHEETDETAILID INTEGER; --相关明细明细ID
 PSHEETCODE     VARCHAR2(50); ---单据编号
 PPERSONCODE    VARCHAR2(50); ---登录名
 PRETINT        INTEGER;
 PRETSTRING     VARCHAR2(200);
 PERRORSTRING   VARCHAR2(200);
  p_error_flag  integer; ---费用账户验证返回值
  p_error_msg   VARCHAR2(500); ---费用账户错误信息
  PVIEWNAME     VARCHAR(64); --视图名称
 BEGIN
 select to_date((to_char(sysdate, 'yyyy-MM-dd HH24:mi:ss')),
 'yyyy-mm-dd,hh24:mi:ss')
 INTO SYS_DATE
 from dual;
  --根据入库单ID更新库存数据
  INSERT INTO WZ_STOCK
 (ID,
 GUID,
 TAGCODE,
 SHEETID,
 SHEETDETAILID,
 CATEGORYID,
 MATERIALID,
 MATERIALCODE,
 MATERIALNAME,
 MATERIALBRAND,
 MATERIALMODEL,
 MATERIALSPECIFICATION,
 DESCRIPTION,
 ORDERNUM,
 RECEIVENUM,
 STORECOUNT,
 DETAILUNIT,
 NOTAXPRICE,
 TAXPRICE,
 TAXRATE,
 CURRENCYUNIT,
 STOREID,
 STORELOCATIONID,
 STORELOCATIONCODE,
 STORELOCATIONNAME,
 PROVIDERDEPID,
 PLANDEPARTID,
 STATUS,
 MEMO,
 CREATOR,
 CREATEDATE,
 EXPIRATIONTIME,
 ZTID,
 ISEQUIPMENT,
 OWNERTYPE,
 ENABLESN,
 SNCODE,
 DETAILUNITNAME,
 EXTENDDATE2)
 select WZSTOCK_SEQUENCE.NEXTVAL,
 SYS_GUID(),
 A.TAGCODE,
 A.SHEETID,
 A.ID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.MATERIALSPECIFICATION,
 A.DESCRIPTION,
 A.ORDERNUM,
 A.RECEIVENUM,
 B.SUBDETAILCOUNT,
 A.DETAILUNIT,
 (case when A.OWNERTYPE =610 then A.NOTAXPRICE   --自有
 else 0 end)  as NOTAXPRICE,
 (case when A.OWNERTYPE =610 then A.TAXPRICE   --自有
 else 0 end)  as TAXPRICE,
 (case when A.OWNERTYPE =610 then A.TAXRATE  --自有
 else 0 end)  as TAXRATE,
 A.CURRENCYUNIT,
 B.STOREID,
 B.STORELOCATIONID,
 B.STORELOCATIONCODE,
 B.STORELOCATIONNAME,
 (case when A.OWNERTYPE =609 then A.PROVIDERDEPID  --寄售
 else 0 end) as PROVIDERDEPID,
 A.PLANDEPARTID,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 SYS_DATE,
 A.EXPIRATIONTIME,
 A.ZTID,
 A.ISEQUIPMENT,
 A.OWNERTYPE,
 A.ENABLESN,
 B.SNCODE,
 A.DETAILUNITNAME,
 A.EXTENDDATE2
 from V_SHEET_RKDETAIL A
 LEFT JOIN WZ_SHEETRKSUBDETAIL B ON A.ID = B.DETAILID
 where A.SHEETID = PSHEETID;
--将调拨单状态改为已完成
 UPDATE WZ_SHEET A SET A.STATUS=41 WHERE A.ID=(SELECT EXTENDINT2 FROM WZ_SHEET_RK B WHERE B.ID=PSHEETID);
end SHEETRK_COMMIT;


/
--------------------------------------------------------
--  DDL for Procedure SHEETTH_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SHEETTH_COMMIT" 
(
          PPROCID integer,
          PSHEETID integer,
          PPERSONID integer,
          retval out   varchar2
)
is

    SYS_DATE DATE;
    mxid integer;
    TYPE REF_CURESOR_TYPE IS REF CURSOR;
    STOCK_CURSOR REF_CURESOR_TYPE;
BEGIN
        select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;

open STOCK_CURSOR for SELECT ID from WZ_SHEETDETAIL where SHEETID = PSHEETID;
      loop
           fetch STOCK_CURSOR into mxid;
           exit when STOCK_CURSOR%notfound;
           --更新库存数据
update WZ_STOCK  A SET  (A.STORECOUNT,A.UPDATEDATE,A.UPDATOR)=
           (SELECT A.STORECOUNT-B.DETAILCOUNT ,SYS_DATE,PPERSONID FROM WZ_SHEETDETAIL B
            WHERE SHEETID=PSHEETID AND B.Id=mxid)
           --where Id = (select SHEETDETAILID from WZ_SHEETDETAIL TH where TH.id=mxid);
           where Id=(select id from wz_stock where sheetdetailid=(select SHEETDETAILID from WZ_SHEETDETAIL TH where TH.id=mxid ) and STORECOUNT-(select DETAILCOUNT from wz_sheetdetail where SHEETID=PSHEETID AND Id=mxid )>=0 and rownum=1);
    --插入接收，退货日志表
INSERT INTO WZ_ReceivingLog
           (GUID,
            OperationType,
            OrderID,
            RelationGUID,
            Count,
      CreateDate,
      Content,
      ExtendInt1,
      Creater
            )
  ( SELECT F_GET_GUID(),
                2,
          C.ExtendInt1,
          D.GUID,
          A.DETAILCOUNT,
          SYS_DATE,
          CONCAT(SYS_DATE||',',E.NAME||'退了【'||A.DETAILCOUNT||'】物料,物料编码是:'||A.MATERIALCODE),
          A.ZTID,
          PPERSONID
       FROM WZ_SHEETDETAIL A --退货单明细
         INNER JOIN WZ_SheetRKSubDetail B ON A.ExtendInt8=B.ID --入库单子明细
       INNER JOIN WZ_SHEETRKDETAIL C ON B.DETAILID=C.ID--入库单明细
       INNER JOIN WZ_SHEETDETAIL D ON C.SHEETDETAILID=D.ID -- 接收单明细
       INNER JOIN BASE_PERSON E ON  A.CREATOR=E.ID
         WHERE A.ID=mxid);

    --退货后更新采购订单的可接收数量ExtendFloat1
  update wz_orderinfo a set a.ExtendFloat1=(a.ExtendFloat1+(select detailcount from wz_sheetdetail where id=mxid ))
  where a.id=( select extendint1 from wz_sheetrkdetail where id=(select detailid from wz_sheetrksubdetail where
  id=(select ExtendInt8 from  wz_sheetdetail where id= mxid)));


          END LOOP;
        CLOSE STOCK_CURSOR;--关闭游标


end SHEETTH_COMMIT;


/
--------------------------------------------------------
--  DDL for Procedure SHEETTK_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SHEETTK_COMMIT" (PPROCID   integer,
                                           PSHEETID  integer,
                                           PPERSONID integer,
                                           retval    out varchar2) is

  SYS_DATE DATE;
  tkmx  integer;  --退库明细id
  tkareaid integer;--退库库位
  ysareaid integer;--原始库位
  kcwzid   integer;--库存ID
  kccount  integer;--符合条件的库存个数
  TYPE REF_CURESOR_TYPE IS REF CURSOR;
  STOCK_CURSOR REF_CURESOR_TYPE;
BEGIN
  select to_date((to_char(sysdate, 'yyyy-MM-dd HH24:mi:ss')),
                 'yyyy-mm-dd,hh24:mi:ss')
    INTO SYS_DATE
    from dual;

  open STOCK_CURSOR for
    SELECT id from WZ_SHEETDETAIL where SHEETID = PSHEETID;
  loop
    fetch STOCK_CURSOR
      into tkmx;
    exit when STOCK_CURSOR%notfound;
    --退库明细中的原始库位与退库库位一样，则修改相对于的库存数量
    select  storelocationid ,extendint5 into tkareaid,ysareaid from wz_sheetdetail  where id=tkmx ;
    if tkareaid=ysareaid then
    update wz_stock a
       set (a.storecount, a.updatedate, a.updator) = (select a.storecount +
                                                             c.detailcount,
                                                             SYS_DATE,
                                                             PPERSONID
                                                        from wz_sheet       b,
                                                             wz_sheetdetail c
                                                       where b.id = c.sheetid
                                                         and b.id = PSHEETID
                                                         and c.id =tkmx)
     where Id = (select extendint1  from WZ_SHEETDETAIL where id=tkmx);
    else
    --退库明细中的原始库位与退库库位不一样，先查看该物料退的库位在库存中是否存在，如果没有则插入一条库存信息，有就更新
    select count(*) into kccount from wz_stock where materialcode=(select materialcode from wz_sheetdetail where id=tkmx) 
       and storelocationid=(select storelocationid from wz_sheetdetail where id=tkmx);
     begin
      if kccount>0 then
      select id into kcwzid from(select id from  wz_stock where materialcode=(select materialcode from wz_sheetdetail where id=tkmx) 
        and storelocationid=(select storelocationid from wz_sheetdetail where id=tkmx) order by storecount) where rownum=1;

       update wz_stock a
       set (a.storecount, a.updatedate, a.updator) = (select a.storecount +
                                                             c.detailcount,
                                                             SYS_DATE,
                                                             PPERSONID
                                                        from wz_sheet       b,
                                                             wz_sheetdetail c
                                                       where b.id = c.sheetid
                                                         and b.id = PSHEETID
                                                         and c.id =tkmx)
     where Id =kcwzid ;
      else
      INSERT INTO WZ_STOCK
      (ID,
       GUID,
       SHEETID,
       SHEETDETAILID,
       MATERIALID,
       MATERIALCODE,
       MATERIALNAME,
       MATERIALBRAND,
       MATERIALMODEL,
       STORECOUNT,
       DETAILUNIT,
       CURRENCYUNIT,
       STOREID,
       PROVIDERDEPID,
       STATUS,
       MEMO,
       CREATOR,
       CREATEDATE,
       ZTID,
       NOTAXPRICE,
       TAXPRICE,
       TAXRATE,
       MATERIALSPECIFICATION,
       DESCRIPTION,
       EXPIRATIONTIME, 
       ORDERNUM,
       RECEIVENUM,
       STORELOCATIONCODE,
       TAGCODE,
       STORELOCATIONNAME,
       PLANDEPARTID,
       STORELOCATIONID,
       CATEGORYID, 
       DETAILPRICE,
       DETAILSUM,
       OWNERDEP, 
       PURCHASETYPE, 
       OWNERTYPE,
       DETAILUNITNAME
       )

      select  
       WZSTOCK_SEQUENCE.NEXTVAL,
       SYS_GUID(),
       PSHEETID,
       tkmx,
       tk.MATERIALID,
       tk.MATERIALCODE,
       tk.MATERIALNAME,
       tk.MATERIALBRAND,
       tk.MATERIALMODEL,
       tk.DETAILCOUNT,
       tk.DETAILUNIT,
       tk.CURRENCYUNIT,
       tk.STOREID,
       tk.PROVIDERDEPID,
       tk.STATUS,
       tk.MEMO,
       tk.CREATOR,
       tk.CREATEDATE,
       tk.ZTID,
       tk.NOTAXPRICE,
       tk.TAXPRICE,
       tk.TAXRATE,
       tk.MATERIALSPECIFICATION,
       tk.DESCRIPTION,
       tk.EXPIRATIONTIME, 
       '',
       '',
       tk.STORELOCATIONCODE,
       tk.TAGCODE,
       tk.STORELOCATIONNAME,
       tk.PLANDEPARTID,
       tk.STORELOCATIONID,
       tk.CATEGORYID, 
       '',
      '',
       '',
       0, 
       tk.OWNERTYPE,
       tk.DETAILUNITNAME
      from wz_sheetdetail tk 
       where tk.Id = tkmx;
      end if;
     end;




    end if; 
  END LOOP;
  CLOSE STOCK_CURSOR; --关闭游标
end SHEETTK_COMMIT;




/
--------------------------------------------------------
--  DDL for Procedure SHEETYW_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SHEETYW_COMMIT" (PPROCID   integer,
                                           PSHEETID  integer,
                                           PPERSONID integer,
                                           retval    out varchar2) is

  SYS_DATE DATE;
  mxid     integer;
  TYPE REF_CURESOR_TYPE IS REF CURSOR;
  STOCK_CURSOR REF_CURESOR_TYPE;
BEGIN
  select to_date((to_char(sysdate, 'yyyy-MM-dd HH24:mi:ss')),
                 'yyyy-mm-dd,hh24:mi:ss')
    INTO SYS_DATE
    from dual;
  open STOCK_CURSOR for
    SELECT id from WZ_SHEETDETAIL where SHEETID = PSHEETID;
  loop
    fetch STOCK_CURSOR
      into mxid;
    exit when STOCK_CURSOR%notfound;
  --先更新库存数据
        update wz_stock a
           set (a.storecount, a.updatedate, a.updator) = (select a.storecount -
                                                                 c.detailcount,
                                                                 SYS_DATE,
                                                                 PPERSONID
                                                            from wz_sheet       b,
                                                                 wz_sheetdetail c
                                                           where b.id =
                                                                 c.sheetid
                                                             and b.id =
                                                                 PSHEETID
                                                             and c.id = mxid)
         where Id =
               (select sheetdetailid from WZ_SHEETDETAIL where id = mxid);
        --再插入移库移位后的数据
        INSERT INTO WZ_STOCK
          (ID,
           GUID,
           SHEETID,
           SHEETDETAILID,
           MATERIALID,
           MATERIALCODE,
           MATERIALNAME,
           MATERIALBRAND,
           MATERIALMODEL,
           STORECOUNT,
           DETAILUNIT,
           CURRENCYUNIT,
           STOREID,
           PROVIDERDEPID,
           STATUS,
           MEMO,
           CREATOR,
           CREATEDATE,
           ZTID,
           NOTAXPRICE,
           TAXPRICE,
           TAXRATE,
           MATERIALSPECIFICATION,
           DESCRIPTION,
           EXPIRATIONTIME,
           ORDERNUM,
           RECEIVENUM,
           STORELOCATIONCODE,
           TAGCODE,
           STORELOCATIONNAME,
           PLANDEPARTID,
           STORELOCATIONID,
           CATEGORYID,
           DETAILPRICE,
           DETAILSUM,
           OWNERDEP,
           PURCHASETYPE,
           ISEQUIPMENT,
           OWNERTYPE,
           ENABLESN,
           SNCODE,
           DETAILUNITNAME)

          select WZSTOCK_SEQUENCE.NEXTVAL,
                 SYS_GUID(),
                 PSHEETID,
                 mxid,
                 Z.MATERIALID,
                 Z.MATERIALCODE,
                 Z.MATERIALNAME,
                 Z.MATERIALBRAND,
                 Z.MATERIALMODEL,
                 Z.DETAILCOUNT,
                 Z.DETAILUNIT,
                 Z.CURRENCYUNIT,
                 Z.STOREID,
                 Y.PROVIDERDEPID,
                 Z.STATUS,
                 Z.MEMO,
                 Z.CREATOR,
                 Z.CREATEDATE,
                 Y.ZTID,
                 Y.NOTAXPRICE,
                 Y.TAXPRICE,
                 Y.TAXRATE,
                 Z.MATERIALSPECIFICATION,
                 Z.DESCRIPTION,
                 Y.EXPIRATIONTIME,
                 Y.ORDERNUM,
                 Y.RECEIVENUM,
                 Z.STORELOCATIONCODE,
                 Z.TAGCODE,
                 Z.STORELOCATIONNAME,
                 Y.PLANDEPARTID,
                 Z.STORELOCATIONID,
                 Z.CATEGORYID,
                 Y.DETAILPRICE,
                 Y.DETAILSUM,
                 Y.OWNERDEP,
                 Y.PURCHASETYPE,
                 Z.ISEQUIPMENT,
                 Z.OWNERTYPE,
                 Z.ENABLESN,
                 Z.SNCODE,
                 Z.DETAILUNITNAME
            FROM WZ_SHEETDETAIL Z
            LEFT JOIN WZ_STOCK Y ON Z.SHEETDETAILID = Y.ID
           WHERE Z.SHEETID = PSHEETID
             AND Z.ID = mxid;




  END LOOP;
  CLOSE STOCK_CURSOR; --关闭游标

end SHEETYW_COMMIT;



/
--------------------------------------------------------
--  DDL for Procedure SHEETZC_COMMIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SHEETZC_COMMIT" 
(
          PPROCID integer,
          PSHEETID integer,
          PPERSONID integer,
          retval out   varchar2
)
is

    SYS_DATE DATE;
    mxid integer;
    TYPE REF_CURESOR_TYPE IS REF CURSOR;
    STOCK_CURSOR REF_CURESOR_TYPE;
BEGIN
        select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;

open STOCK_CURSOR for SELECT ID from WZ_SHEETDETAIL where SHEETID = PSHEETID;
      loop
           fetch STOCK_CURSOR into mxid;
           exit when STOCK_CURSOR%notfound;
           --更新库存数据
update WZ_STOCK  A SET  (A.STORECOUNT,A.UPDATEDATE,A.UPDATOR)=
           (SELECT A.STORECOUNT-B.DETAILCOUNT ,SYS_DATE,PPERSONID FROM WZ_SHEETDETAIL B
            WHERE SHEETID=PSHEETID AND B.Id=mxid)
           --where Id = (select SHEETDETAILID from WZ_SHEETDETAIL TH where TH.id=mxid);
           where Id=(select id from wz_stock where sheetdetailid=(select SHEETDETAILID from WZ_SHEETDETAIL TH where TH.id=mxid ) and STORECOUNT-(select DETAILCOUNT from wz_sheetdetail where SHEETID=PSHEETID AND Id=mxid )>=0 and rownum=1);
 /*   --插入接收，退货日志表
INSERT INTO WZ_ReceivingLog
           (GUID,
            OperationType,
            OrderID,
            RelationGUID,
            Count,
      CreateDate,
      Content,
      ExtendInt1,
      Creater
            )
  ( SELECT F_GET_GUID(),
                2,
          C.ExtendInt1,
          D.GUID,
          A.DETAILCOUNT,
          SYS_DATE,
          CONCAT(SYS_DATE||',',E.NAME||'退了【'||A.DETAILCOUNT||'】物料,物料编码是:'||A.MATERIALCODE),
          A.ZTID,
          PPERSONID
       FROM WZ_SHEETDETAIL A --退货单明细
         INNER JOIN WZ_SheetRKSubDetail B ON A.ExtendInt8=B.ID --入库单子明细
       INNER JOIN WZ_SHEETRKDETAIL C ON B.DETAILID=C.ID--入库单明细
       INNER JOIN WZ_SHEETDETAIL D ON C.SHEETDETAILID=D.ID -- 接收单明细
       INNER JOIN BASE_PERSON E ON  A.CREATOR=E.ID
         WHERE A.ID=mxid);


    --退货后更新采购订单的可接收数量ExtendFloat1
  update wz_orderinfo a set a.ExtendFloat1=(a.ExtendFloat1+(select detailcount from wz_sheetdetail where id=mxid ))
  where a.id=( select extendint1 from wz_sheetrkdetail where id=(select detailid from wz_sheetrksubdetail where 
  id=(select ExtendInt8 from  wz_sheetdetail where id= mxid)));
*/

          END LOOP;
        CLOSE STOCK_CURSOR;--关闭游标


end SHEETZC_COMMIT;

CREATE OR REPLACE VIEW V_RKCX AS
SELECT
 A.ID,
 A.GUID,
 A.TAGCODE,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.MATERIALSPECIFICATION,
 A.DESCRIPTION,
 B.SUBDETAILCOUNT,
 A.DETAILUNIT,
 B.STOREID,
 B.STORELOCATIONID,
 B.STORELOCATIONCODE,
 B.STORELOCATIONNAME,
 A.NOTAXPRICE,
 A.TAXRATE,
 A.NOTAXSUM,
 A.TAXPRICE,
 A.TAXSUM,
 C.CODE,
 C.ROUTEID,
 C.ROUTE_STEPID,
 C.STATUS AS SHEETSTATUS ,
 C.SUBMITTIME,
 D.NAME AS HOUSENAME,
 C.ZTID,
 c.url
 FROM WZ_SHEETRKDETAIL A LEFT JOIN WZ_SHEETRKSUBDETAIL B ON A.ID=B.DETAILID
 LEFT JOIN WZ_SHEET_RK C ON A.SHEETID=C.ID
 LEFT JOIN BASE_WAREHOUSE D ON B.STOREID=D.ID WHERE C.STATUS=41 AND C.KINDID=35;


CREATE OR REPLACE VIEW V_CKCX AS
SELECT
 A.ID,
 A.GUID,
 A.TAGCODE,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.MATERIALBRAND,
 A.MATERIALMODEL,
 A.MATERIALSPECIFICATION,
 A.DESCRIPTION,
 A.DETAILCOUNT,
 A.DETAILUNIT,
 A.STOREID,
 A.STORELOCATIONID,
 A.STORELOCATIONNAME,
 A.STORELOCATIONCODE,
 B.CODE,
 B.USEDDEPARTID,
 C.NAME AS USDEDEPNAME,
 B.ZTID,
 B.Url
 FROM WZ_SHEETCKDETAIL A LEFT JOIN WZ_SHEET_CK B ON A.SHEETID=B.ID
 LEFT JOIN BASE_USEDEP C ON B.USEDDEPARTID=C.ID WHERE B.STATUS=41;




CREATE OR REPLACE VIEW V_DBDDETAILS AS
SELECT
  D.CODE,
 A.ID,
 A.GUID,
 A.SHEETID,
 A.SHEETDETAILID,
 A.CATEGORYID,
 A.MATERIALID,
 A.MATERIALCODE,
 A.MATERIALNAME,
 A.DETAILCOUNT,
 A.STOREID,
 A.PROVIDERDEPID,
 A.STATUS,
 A.MEMO,
 A.CREATOR,
 A.CREATEDATE,
 A.ZTID,
 A.DESCRIPTION,
 A.DETAILUNITNAME,
 SUBSTR(A.MATERIALCODE,1,2) AS PARCODE,
 C.NAME AS HOUSENAME,
 C.CODE AS HOUSECODE,
 CONCAT(P.NAME||'_',P.ExtendString1) AS PROVIDERNAME,
 A.STORELOCATIONCODE,
 A.Storelocationid,
--已出库数量
(SELECT NVL(SUM(H.detailcount),0) FROM  wz_sheetckdetail H INNER  JOIN WZ_SHEET_CK J ON H.SHEETID=J.ID WHERE H.SheetDetailid=A.ID ) AS YTCOUNT,
--可调数量
A.DETAILCOUNT-(SELECT NVL(SUM(H.SUBDETAILCOUNT),0) FROM  WZ_SHEETSUBDETAIL H INNER JOIN WZ_SHEETDETAIL I ON H.DETAILID=I.ID LEFT JOIN WZ_SHEET J ON I.SHEETID=J.ID WHERE H.Detailid=A.ID   and J.KINDID=506 and J.STATUS<>41) AS ISCOUNT

FROM WZ_SHEETDETAIL A
LEFT JOIN BASE_WAREHOUSE C ON A.STOREID=C.ID
LEFT JOIN WZ_SHEET D ON A.SHEETID=D.ID
LEFT JOIN BASE_SPAREPARTSCATE E ON A.CATEGORYID=E.ID
LEFT JOIN BASE_DICTIONARY F ON A.OWNERTYPE=F.ID
LEFT JOIN BASE_PROVIDER P ON A.PROVIDERDEPID=P.ID
WHERE D.KINDID=506
;







/
--------------------------------------------------------
--  DDL for Procedure STAT_KCZTSEARCH
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "STAT_KCZTSEARCH" (STAT_KC    out Sys_Refcursor,
                                            total out int,
                                            StoreID    integer,
                                            StorePosID integer,
                                            GradeLevel integer,
                                            pageIndex   int,
                                            pageSize   int 
                                            ) as
                                            
  Sqlwhere VARCHAR2(4000);
    sqlRecordCount varchar2(2000); 
     recordCount integer;
      ppageIndex integer;
   ppageSize integer;

begin
  ppageIndex  :=1  ;
  ppageSize   :=10 ;

  if pageIndex=0 or pageIndex is null
 then
  ppageIndex  :=1;
  else
  ppageIndex :=pageIndex;
end if;

if pageSize=0 or pageSize is null
 then
  ppageSize  :=10;
  else 
  ppageSize :=pageSize;
end if;




  Sqlwhere := '  select
 decode(grouping(c.name) + grouping(w.storeid),
        0,
        c.name,
        1,
         c.name||''小计'',
        ''总计'')
 AS ExtendString9,
  decode(grouping( w.storeid),
        0,
         w.storeid,
        1,
        w.storeid,
        '''')
 AS storeid,
 w.StorePosID as StorePosID,
 w.BatchNum AS BatchNum,
 w.TradeMark AS TradeMark,
 w.GradeLevel AS GradeLevel,
 d.name AS ExtendString8,
 sum(w.TotalWeight) as ExtendString10
  from WZ_Stock w
  left join BASE_WAREHOUSE C ON w.STOREPOSID = C.ID
  LEFT JOIN BASE_DICTIONARY D ON w.GRADELEVEL = D.ID
 where w.traycode is not null';

 if (StoreID <> 0) then
  Sqlwhere := Sqlwhere || ' and w.storeid =' || StoreID||'';
end if;
 if StorePosID <> 0 then
  Sqlwhere := Sqlwhere || 'and w.StorePosID =' || StorePosID||'';
end if;
 if GradeLevel <> 0 then
  Sqlwhere := Sqlwhere || ' and w.GradeLevel ='|| GradeLevel||'';
end if; 
  Sqlwhere := Sqlwhere || ' group by rollup(c.name,
                 (w.storeid, w.StorePosID, w.BatchNum, w.TradeMark,
                  w.GradeLevel, d.name))order by c.name';




 sqlRecordCount  := 'select count(*) from (' || Sqlwhere||')';
        dbms_output.put_line(sqlRecordCount);

    execute immediate sqlRecordCount into recordCount;

     Sqlwhere :='select* from  (select   b.*,rownum  rn from   ('||Sqlwhere||' )   b   ) where  RN BETWEEN  '||to_char((ppageIndex - 1)*ppageSize + 1)||' 
  and '||to_char(ppageIndex * ppageSize);
   total := recordCount;
    open STAT_KC for    Sqlwhere; 


end;




/
--------------------------------------------------------
--  DDL for Procedure STAT_PHZTSEARCH
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "STAT_PHZTSEARCH" (STAT_KC    out Sys_Refcursor,
                                            total out int,
                                            StoreID    integer,
                                            StorePosID integer,
                                            TradeMark VARCHAR2,
                                            pageIndex   int,
                                            pageSize   int
                                            ) as

  Sqlwhere VARCHAR2(4000);
    sqlRecordCount varchar2(2000);
     recordCount integer;
      ppageIndex integer;
   ppageSize integer;

begin
  ppageIndex  :=1  ;
  ppageSize   :=10 ;

  if pageIndex=0 or pageIndex is null
 then
  ppageIndex  :=1;
  else
  ppageIndex :=pageIndex;
end if;

if pageSize=0 or pageSize is null
 then
  ppageSize  :=10;
  else
  ppageSize :=pageSize;
end if;




  Sqlwhere := '  select
 decode(grouping(w.TradeMark) +grouping(w.storeid),
        0,
        w.TradeMark,
        1,
         w.TradeMark||''小计'',
        ''总计'')
 AS TradeMark,
w.storeid,

 w.StorePosID as StorePosID,
 w.BatchNum AS BatchNum,

 c.name AS ExtendString8,
 sum(w.TotalWeight) as ExtendString10
  from WZ_Stock w
  left join BASE_WAREHOUSE C ON w.STOREPOSID = C.ID
 where w.traycode is not null ';

 if (StoreID <> 0) then
  Sqlwhere := Sqlwhere || ' and w.storeid =' || StoreID||'';
end if;
 if StorePosID <> 0 then
  Sqlwhere := Sqlwhere || 'and w.StorePosID =' || StorePosID||'';
end if;
 if TradeMark <> '0' then
 ---- 输入参数 TradeMark  ： and  TradeMark =''
  Sqlwhere := Sqlwhere || TradeMark;
end if;
  Sqlwhere := Sqlwhere || '  group by rollup(w.TradeMark,
                 (w.storeid, w.StorePosID, w.BatchNum,
                  c.name))order by w.TradeMark';




 sqlRecordCount  := 'select count(*) from (' || Sqlwhere||')';
        dbms_output.put_line(sqlRecordCount);

    execute immediate sqlRecordCount into recordCount;

     Sqlwhere :='select* from  (select   b.*,rownum  rn from   ('||Sqlwhere||' )   b   ) where  RN BETWEEN  '||to_char((ppageIndex - 1)*ppageSize + 1)||'
  and '||to_char(ppageIndex * ppageSize);
   total := recordCount;
    open STAT_KC for    Sqlwhere;


end;




/
--------------------------------------------------------
--  DDL for Procedure STOCK_SZ
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "STOCK_SZ" (Store_SZ    out Sys_Refcursor, --返回结果集
                                     total       out int, --总个数
                                     sqlInto     nvarchar2, --时间查询条件 
                                     otherwhere  nvarchar2, --物料查询条件
                                     wldatewhere nvarchar2, --期初时间查询条件
                                     pageIndex   int,
                                     pageSize    int) as

  Sqlwhere    varchar2(4000);
  Sqlwhere2   varchar2(4000);
  Sqlwhere3   varchar2(4000);
  Sqlwhere4   varchar2(4000);
  recordCount integer;
  ppageIndex  integer;
  ppageSize   integer;

begin
  ppageIndex := 1;
  ppageSize  := 10;

  if pageIndex = 0 or pageIndex is null then
    ppageIndex := 1;
  else
    ppageIndex := pageIndex;
  end if;

  if pageSize = 0 or pageSize is null then
    ppageSize := 10;
  else
    ppageSize := pageSize;
  end if;

  Sqlwhere := '
    select materialcode,materialname,materialmodel,materialspecification,
     nvl(bbrkcount+bqtkcount-bqthcount-bqckcount,0) as startcount,
     nvl(bqrkmoney+bqtkmoney-bqthmoney-bqckmoney,0) as startmoney,
     nvl(tkcount+rkcount,0) as bqrcount,
     nvl(thmoney+rkmoney-thmoney-ckmoney,0) as bqrkmoney,
     nvl(ckcount+thcount,0)  as bqckcount,
     nvl(ckmoney+thmoney,0)  as bqckmoney 
   from(select materialcode,materialname,materialmodel,materialspecification,';
    dbms_output.put_line(Sqlwhere);
   Sqlwhere4:='(select nvl(sum(detail.detailcount),0) from wz_sheetrkdetail detail left join wz_sheet_rk rksheet on detail.sheetid=rksheet.id where rksheet.status=41 and detail.materialcode=a.materialcode and '|| wldatewhere ||') as bbrkcount,
   (select nvl(sum(detail.detailcount),0) from wz_sheetckdetail detail left join wz_sheet_ck cksheet on detail.sheetid=cksheet.id where cksheet.status=41 and detail.materialcode=a.materialcode and '|| wldatewhere ||') as bqckcount,
   (select nvl(sum(detail.detailcount),0) from wz_sheetdetail detail left join wz_sheet tksheet on detail.sheetid=tksheet.id where tksheet.status=41 and tksheet.kindid=315 and detail.materialcode=a.materialcode and '|| wldatewhere ||') as bqtkcount,
   (select nvl(sum(detail.detailcount),0) from wz_sheetdetail detail left join wz_sheet thsheet on detail.sheetid=thsheet.id where thsheet.status=41 and thsheet.kindid=485 and detail.materialcode=a.materialcode and '|| wldatewhere ||') as bqthcount,
   (select nvl(sum(detail.taxprice)*sum(1+detail.taxrate)*sum(detail.detailcount),0) from wz_sheetckdetail detail left join wz_sheet_ck cksheet on detail.sheetid=cksheet.id where cksheet.status=41 and detail.materialcode=a.materialcode and '|| wldatewhere ||') as bqckmoney,
   (select nvl(sum(detail.taxprice)*sum(1+detail.taxrate)*sum(detail.detailcount),0) from wz_sheetrkdetail detail left join wz_sheet_rk rksheet on detail.sheetid=rksheet.id where rksheet.status=41 and detail.materialcode=a.materialcode and '|| wldatewhere ||') as bqrkmoney,
   (select nvl(sum(detail.taxprice)*sum(1+detail.taxrate)*sum(detail.detailcount),0) from wz_sheetdetail detail left join wz_sheet tksheet on detail.sheetid=tksheet.id where tksheet.status=41 and tksheet.kindid=315 and detail.materialcode=a.materialcode and '|| wldatewhere ||') as bqtkmoney,
   (select nvl(sum(detail.taxprice)*sum(1+detail.taxrate)*sum(detail.detailcount),0) from wz_sheetdetail detail left join wz_sheet thsheet on detail.sheetid=thsheet.id where thsheet.status=41 and thsheet.kindid=485 and detail.materialcode=a.materialcode and '|| wldatewhere ||') as bqthmoney,';
  dbms_output.put_line(Sqlwhere4);
  Sqlwhere2 := '
  (select nvl(sum(detail.detailcount),0) from wz_sheetrkdetail detail left join wz_sheet_rk rksheet on detail.sheetid=rksheet.id
    where rksheet.status=41 and detail.materialcode=a.materialcode and ' ||
               sqlInto ||
               ') as rkcount,
   (select nvl(sum(detail.detailcount),0) from wz_sheetckdetail detail left join wz_sheet_ck cksheet on detail.sheetid=cksheet.id 
   where cksheet.status=41 and detail.materialcode=a.materialcode and ' ||
               sqlInto ||
               ') as ckcount,
  (select nvl(sum(detail.detailcount),0) from wz_sheetdetail detail left join wz_sheet tksheet on detail.sheetid=tksheet.id where tksheet.status=41 and tksheet.kindid=315 and detail.materialcode=a.materialcode and ' ||
               sqlInto ||
               ') as tkcount,
               (select nvl(sum(detail.detailcount),0) from wz_sheetdetail detail left join wz_sheet thsheet on detail.sheetid=thsheet.id where thsheet.status=41 and thsheet.kindid=485 and detail.materialcode=a.materialcode and ' ||
               sqlInto || ') as thcount,';
  dbms_output.put_line(Sqlwhere2);
  Sqlwhere3 := '(select nvl(sum(detail.taxprice)*sum(1+detail.taxrate)*sum(detail.detailcount),0) from wz_sheetckdetail detail left join wz_sheet_ck cksheet on detail.sheetid=cksheet.id where cksheet.status=41 and detail.materialcode=a.materialcode and ' ||
               sqlInto ||
               ') as ckmoney,
               (select nvl(sum(detail.taxprice)*sum(1+detail.taxrate)*sum(detail.detailcount),0) from wz_sheetrkdetail detail left join wz_sheet_rk rksheet on detail.sheetid=rksheet.id where rksheet.status=41 and detail.materialcode=a.materialcode and ' ||
               sqlInto ||
               ') as rkmoney,
                (select nvl(sum(detail.taxprice)*sum(1+detail.taxrate)*sum(detail.detailcount),0) from wz_sheetdetail detail left join wz_sheet tksheet on detail.sheetid=tksheet.id where tksheet.status=41 and tksheet.kindid=315 and detail.materialcode=a.materialcode and ' ||
               sqlInto ||
               ') as tkmoney,
                (select nvl(sum(detail.taxprice)*sum(1+detail.taxrate)*sum(detail.detailcount),0) from wz_sheetdetail detail left join wz_sheet thsheet on detail.sheetid=thsheet.id where thsheet.status=41 and thsheet.kindid=485 and detail.materialcode=a.materialcode and ' ||
               sqlInto ||
               ') as thmoney from wz_stock a where 1=1 and ' ||
               otherwhere || ' group by materialcode,materialname,materialmodel,materialspecification)';

  dbms_output.put_line(Sqlwhere3);

  execute immediate 'select count(*) from (' || Sqlwhere ||  Sqlwhere4 || Sqlwhere2 ||
                    Sqlwhere3 || ')'
    into recordCount;
  dbms_output.put_line(recordCount);

  total := recordCount;

  open Store_SZ for 'select* from  (select   b.*,rownum  rn from   (' || Sqlwhere || Sqlwhere4 || Sqlwhere2 || Sqlwhere3 || ' )   b   ) where  RN BETWEEN  ' || to_char((ppageIndex - 1) *
                                                                                                                                                           ppageSize + 1) || '
  and ' || to_char(ppageIndex * ppageSize);

end;




/
--------------------------------------------------------
--  DDL for Procedure STOCK_SZMX
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "STOCK_SZMX" (Store_SZMX    out Sys_Refcursor, --返回结果集
                                       total         out int, --总个数
                                       sqlInto       nvarchar2, --拼接出入库的where条件
                                       sqlChangWhere nvarchar2, --拼接库存日志中的where条件
                                       otherwhere    nvarchar2, --拼接其他where条件
                                       pageIndex     int,
                                       pageSize      int) as

  Sqlwhere       VARCHAR2(4000);
  sqlRecordCount varchar2(2000);
  recordCount    integer;
  ppageIndex     integer;
  ppageSize      integer;

begin
  ppageIndex := 1;
  ppageSize  := 10;

  if pageIndex = 0 or pageIndex is null then
    ppageIndex := 1;
  else
    ppageIndex := pageIndex;
  end if;

  if pageSize = 0 or pageSize is null then
    ppageSize := 10;
  else
    ppageSize := pageSize;
  end if;

  Sqlwhere := 'select pcnum,pno,typename,areaname,levelname,
  cast(NVL(startWeight,0) as decimal(15,3)) as startWeight,
  cast(NVL(RKWeight,0) as decimal(15,3) )as RKWeight,
  cast(NVL(CKWeight,0) as decimal(15,3)) as CKWeihgt,
  cast(NVL(endWeight,0) as decimal(15,3)) as endWeight
from (select pcnum,pno,typename,areaname,levelname,
      (NowWeight+ChangeWeight-RKWeight-CKWeight) as startWeight,RKWeight,CKWeight,(NowWeight+ChangeWeight) as endWeight
from (select a.id,a.batchnum as pcnum,a.trademark as pno,a.producttype,a.code,a.traycode,a.gradelevel,a.totalweight as NowWeight,c.name as typename,d.name as areaname,e.name as levelname,
     (select sum(b.productweight) from wz_storelog b where b.productcode=a.code and b.sheettypeid=35 and '|| sqlInto || ') as RKWeight,
     (select sum(b.productweight) from wz_storelog b where b.productcode=a.code and b.sheettypeid=36 and '|| sqlInto || ') as CKWeight,
     (select sum(b.productweight) from wz_storelog b where b.productcode=a.code and '|| sqlChangWhere || ') as ChangeWeight
   from wz_stock a left join base_dictionary c on a.producttype=c.id left join base_warehouse d on d.id=a.storeposid left join base_dictionary e on e.id=a.gradelevel
   where a.traycode is not null and '|| otherwhere ||')  )';

  dbms_output.put_line(Sqlwhere);
  sqlRecordCount := 'select count(*) from (' || Sqlwhere || ')';
  dbms_output.put_line(sqlRecordCount);

  execute immediate sqlRecordCount
    into recordCount;

  Sqlwhere := 'select* from  (select   b.*,rownum  rn from   (' || Sqlwhere ||
              ' )   b   ) where  RN BETWEEN  ' ||
              to_char((ppageIndex - 1) * ppageSize + 1) || '
    and ' || to_char(ppageIndex * ppageSize);
  dbms_output.put_line(Sqlwhere);

  total := recordCount;
  open Store_SZMX for Sqlwhere;

end;




/
--------------------------------------------------------
--  DDL for Procedure SUMMARY_PAGINATIONLIST
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SUMMARY_PAGINATIONLIST" 
(
 tableName    varchar2,    --表名/视图名
 pcolumns     varchar2,    --显示的数据列
 pwhere       varchar2,    --where条件
 porder       varchar2,    --排序字段
 pageIndex    int,         --页数
 pageSize     int,         --条数
 collweight   varchar2,    --汇总重量字段
 collcount    varchar2,    --汇总数量字段
 total        out int,     --总条数
 totalweight  out  number, --返回总重量
 totalcount   out number,  --返回总数量
 p_cursor out cur_query.my_cursor --返回数据集
 )
is

BEGIN
DECLARE
       sqlRecordCount varchar2(2000);     --得到总记录条数的sql语句
       sqlSelect varchar2(1000);          --查询语句
       recordCount integer;               --保存总记录条数的变量
       ppcolumns   varchar2(1000) ;       --显示的数据列
       pporder  varchar2(1000) ;          --排序字段
       ppwhere   varchar2(1000) ;         --where条件
       ppageIndex integer;                --页数
       ppageSize integer;                 --条数
       sqlTotalweight number;--ptotalweight ptotalcount
       sqlTotalcount number;
       sqlweight varchar2(2000);
       sqlcount varchar2(2000);
begin
       ppcolumns   := '*';
       pporder     := '';
       ppwhere     :='1=1';
       ppageIndex  :=1  ;
       ppageSize   :=10 ;
if pcolumns='' or pcolumns is null
  then
    ppcolumns :='*' ;
  else
    ppcolumns := pcolumns;
end if;

if porder='' or porder is null
  then
   pporder  := 'id asc';
  else
   pporder :=porder;
end if;

if pwhere='' or pwhere is null
  then
    ppwhere  :='1=1';
  else
    ppwhere :=pwhere;
end if;

if pageIndex=0 or pageIndex is null
 then
   ppageIndex  :=1;
  else
   ppageIndex :=pageIndex;
end if;

if pageSize=0 or pageSize is null
 then
   ppageSize  :=10;
  else
   ppageSize :=pageSize;
end if;
        sqlweight :='select sum('|| collweight ||')  from ' || tableName || '  where 1=1';
        execute immediate sqlweight into sqlTotalweight;
        sqlcount:= 'select sum('|| collcount|| ') from ' || tableName || '  where 1=1';
        execute immediate sqlcount into sqlTotalcount;
        sqlRecordCount  := 'select count(*) from ' || tableName|| ' where ' || ppwhere;
        execute immediate sqlRecordCount into recordCount;

        sqlSelect  := 'select '|| ppcolumns ||
        ' from (select ROW_NUMBER()over (order by '
        || pporder ||
        ') as tempid,t.* from '
        || tableName ||
        ' t  where '
        || ppwhere ||
        ') where tempid between '
         ||to_char((ppageIndex - 1)*ppageSize + 1) ||
         ' and '
         || to_char(ppageIndex * ppageSize);
         DBMS_OUTPUT.put_line(sqlSelect);
         -- execute immediate sqlSelect;
         total := recordCount;--把总记录数赋值输出参数。
         totalweight:=sqlTotalweight;--把总重量赋值给输出参数。
         totalcount:=sqlTotalcount;--把总数量赋值给输出参数
         open p_cursor for sqlSelect;
    end;
  end;




/
--------------------------------------------------------
--  DDL for Procedure UPDATELEVELCODE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "UPDATELEVELCODE" (p_TableName VARCHAR2)
IS
v_sql varchar2(2000);
v_companyID varchar2(50):='';
i number;
BEGIN
--如果是库存组织表需要加上公司ID
 BEGIN 
  IF p_TableName='base_organization' THEN 
   v_companyID:=to_char('100001.');
  END IF;
  END;
--先将LevelCount，LevelCode更新为空
   v_sql:='update '||p_TableName||' a set levelcode='''',levelcount=0';
 execute immediate v_sql; 
--更新父节点的LevelCount,LevelCode
  v_sql:='update '||p_TableName||' set levelcount=1,levelCode=CONCAT('''||v_companyID||''',id) where parentid=0';  
  execute immediate v_sql; 
--开始按照级别往后更新LevelCount,LevelCode
   i:=1;
   while i>0 loop
   v_sql:='select count(*) from '||p_TableName||' where levelCount=0';

   execute immediate v_sql into i;   
   v_sql:='update (select  a.levelcount,b.levelcount+1 as lcount,a.levelcode,CONCAT(b.levelcode ||''.'',a.id) as lcode
             from '||p_TableName||' a left join '||p_TableName||' b on  a.parentid=b.id 
       where b.levelcount<>0
      ) set levelcount=lcount,levelcode=lcode';
 execute immediate v_sql; 
  end loop;
END;


/
--------------------------------------------------------
--  DDL for Procedure WRITE_BASE_LOG
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "WRITE_BASE_LOG" 
(

                                    PLogType         integer,  --0 系统日志 1业务日志
                                    PLogObject       varchar2, --日志对象
                                    PLogAction       varchar2,--日志行为
                                    PSheetID         integer,
                                    PSheetdetailid   integer,
                                    POperator       integer,
                                    retval       out   varchar2
)
is
SYS_DATE DATE; --fbb 添加当前日期变量
begin
  -- IF SUBSTR(PBUSSINESSNANE,1,2) <> '查询'
   --THEN
   --fbb 把获取到当前系统日期插入到变量SYS_DATE中,在把变量插入到Base_Log中,之前写的to_date(sysdate,'yyyy/mm/dd HH24:mi:ss')插入报错
    select to_date((to_char(sysdate,'yyyy-MM-dd HH24:mi:ss')),'yyyy-mm-dd,hh24:mi:ss') INTO SYS_DATE from dual ;
   BEGIN
      INSERT INTO BASE_LOG (LogType,  --0 系统日志 1业务日志
                           LogObject,  --日志对象
                           LogAction, --日志行为
                           SheetID,
                           Sheetdetailid,
                           LogTime,
                           Operator)
                   VALUES (PLogType,
                           PLogObject,
                           PLogAction,
                           PSheetID,
                           PSheetdetailid,
                           SYS_DATE,POperator);

          retval := '1';
     exception
          when OTHERS then
          retval := '插入系统操作日志失败';
   END;
   --END IF;
end WRITE_BASE_LOG;




/
--------------------------------------------------------
--  DDL for Package CUR_QUERY
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "CUR_QUERY" as    type my_cursor is ref cursor;  end cur_query;    



/
--------------------------------------------------------
--  DDL for Package PGK_PERSON
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "PGK_PERSON" IS
  TYPE retcursor IS REF CURSOR;

   PROCEDURE update_email(email_in  VARCHAR2,
                     id_in NUMBER);
  end;




/
--------------------------------------------------------
--  DDL for Package PKG_PERSON
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "PKG_PERSON" IS
  TYPE retcursor IS REF CURSOR;

  PROCEDURE update_email(email_in VARCHAR2, id_in NUMBER);
  PROCEDURE getpersonlist(OT_LIST OUT RETCURSOR);


end;




/
--------------------------------------------------------
--  DDL for Package TESTPACKAGE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "TESTPACKAGE" as  type test_cursor is ref cursor;  end testpackage;    



/
--------------------------------------------------------
--  DDL for Package Body PKG_PERSON
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "PKG_PERSON" is

  ------------------------------------
  --用途：增加一条记录
  --项目名称：
  --说明：
  --时间：2013/11/27 15:53:16
  ------------------------------------
  PROCEDURE update_email(email_in VARCHAR2, id_in NUMBER) is
  BEGIN
    update base_person set email = email_in where id = id_in;
    COMMIT;
  END;

  PROCEDURE getpersonlist(OT_LIST OUT RETCURSOR) IS
  BEGIN
    OPEN OT_LIST FOR
      SELECt * FROM base_person;
  END;

end;


/
--------------------------------------------------------
--  DDL for Function F_GETOCCUPYCOUNT
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "F_GETOCCUPYCOUNT" (p_materialCode IN VARCHAR2, p_ZTID IN integer)
    RETURN decimal
AS
    v_dbOccupyCount   decimal := 0;
    v_llOccupyCount   decimal := 0;
    V_OccupyCount     decimal := 0;
     V_ckCount     decimal := 0;
BEGIN
--调拨占用数量
    SELECT  NVL(SUM(C.Detailcount), 0) into v_dbOccupyCount
                         FROM WZ_SHEETDETAIL C
                        INNER JOIN WZ_SHEET D ON C.SHEETID = D.ID
                        WHERE D.Ztid=p_ZTID
                              AND c.materialcode=p_materialCode
                              AND D.KINDID in(506)
                              AND D.STATUS = 40 ;
--领用占用数量                            
    select NVL(sum(b.detailcount),0) into v_llOccupyCount  from wz_sheet a
                    inner join wz_sheetdetail b on a.id=b.sheetid
                    where a.kindid=650 and a.status in(40,41) and a.ztid=p_ZTID and b.materialcode=p_materialCode;

--领用出库释放数量


      select NVL(SUM(d.detailcount),0) into V_ckCount from wz_sheet_ck c
                      inner join wz_sheetckdetail d on c.id=d.sheetid
                      where c.status=41 and c.ztid=p_ZTID and d.materialcode=p_materialCode;

--
  V_OccupyCount:=v_llOccupyCount+v_dbOccupyCount-V_ckCount;

    RETURN V_OccupyCount;
END f_GetOccupyCount;


/
--------------------------------------------------------
--  DDL for Function F_GETSTOCKUSECOUNT
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "F_GETSTOCKUSECOUNT" (p_materialCode IN VARCHAR2, p_ZTID IN integer)
    RETURN decimal
AS
    v_stockUseCount   decimal := 0;
BEGIN
    SELECT NVL(SUM(stock.storecount),0)- NVL(f_getoccupycount(stock.materialcode,stock.Ztid),0) into v_stockUseCount
   from  wz_stock stock
   where stock.storecount>0 and stock.materialcode=p_materialCode and stock.ztid=p_ZTID
     group by stock.materialcode,stock.Ztid;   

     if v_stockUseCount is null  then
       v_stockUseCount:=0;
     end if;

    RETURN v_stockUseCount;
END f_GetStockUseCount;





/
--------------------------------------------------------
--  DDL for Function F_GET_GUID
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "F_GET_GUID" 
RETURN VARCHAR
IS
guid VARCHAR (50);
BEGIN
guid := lower(RAWTOHEX(sys_guid()));
RETURN
substr(guid,1,8)||'-'||substr(guid,9,4)||'-'||substr(guid,13,4)||'-'||substr(guid,17,4)||'-'||substr(guid,21,12);
END F_get_GUid;


/
--------------------------------------------------------
--  DDL for Function F_SPLITTOINT
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "F_SPLITTOINT" (p_string IN VARCHAR2, p_delimiter IN VARCHAR2)
    RETURN str_split
    PIPELINED
AS
    v_length   NUMBER := LENGTH(p_string);
    v_start    NUMBER := 1;
    v_index    NUMBER;
BEGIN
    WHILE(v_start <= v_length)
    LOOP
        v_index := INSTR(p_string, p_delimiter, v_start);

        IF v_index = 0
        THEN
            PIPE ROW(SUBSTR(p_string, v_start));
            v_start := v_length + 1;
        ELSE
            PIPE ROW(SUBSTR(p_string, v_start, v_index - v_start));
            v_start := v_index + 1;
        END IF;
    END LOOP;

    RETURN;
END f_SplitToInt;




/
--------------------------------------------------------
--  Constraints for Table ACT_GE_BYTEARRAY
--------------------------------------------------------

  ALTER TABLE "ACT_GE_BYTEARRAY" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_GE_BYTEARRAY" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "ACT_GE_BYTEARRAY" ADD CHECK (GENERATED_ IN (1,0)) ENABLE;
 
  ALTER TABLE "ACT_GE_BYTEARRAY" ADD CHECK (GENERATED_ IN (1,0)) ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_GE_PROPERTY
--------------------------------------------------------

  ALTER TABLE "ACT_GE_PROPERTY" MODIFY ("NAME_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_GE_PROPERTY" ADD PRIMARY KEY ("NAME_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_HI_ACTINST
--------------------------------------------------------

  ALTER TABLE "ACT_HI_ACTINST" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_ACTINST" MODIFY ("PROC_DEF_ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_ACTINST" MODIFY ("PROC_INST_ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_ACTINST" MODIFY ("EXECUTION_ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_ACTINST" MODIFY ("ACT_ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_ACTINST" MODIFY ("ACT_TYPE_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_ACTINST" MODIFY ("START_TIME_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_ACTINST" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_HI_COMMENT
--------------------------------------------------------

  ALTER TABLE "ACT_HI_COMMENT" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_COMMENT" MODIFY ("TIME_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_COMMENT" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_HI_IDENTITYLINK
--------------------------------------------------------

  ALTER TABLE "ACT_HI_IDENTITYLINK" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_IDENTITYLINK" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_HI_PROCINST
--------------------------------------------------------

  ALTER TABLE "ACT_HI_PROCINST" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_PROCINST" MODIFY ("PROC_INST_ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_PROCINST" MODIFY ("PROC_DEF_ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_PROCINST" MODIFY ("START_TIME_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_PROCINST" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "ACT_HI_PROCINST" ADD UNIQUE ("PROC_INST_ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_HI_TASKINST
--------------------------------------------------------

  ALTER TABLE "ACT_HI_TASKINST" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_TASKINST" MODIFY ("START_TIME_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_TASKINST" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_HI_VARINST
--------------------------------------------------------

  ALTER TABLE "ACT_HI_VARINST" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_VARINST" MODIFY ("NAME_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_HI_VARINST" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_ID_GROUP
--------------------------------------------------------

  ALTER TABLE "ACT_ID_GROUP" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_ID_GROUP" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_RE_DEPLOYMENT
--------------------------------------------------------

  ALTER TABLE "ACT_RE_DEPLOYMENT" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_RE_DEPLOYMENT" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_RE_MODEL
--------------------------------------------------------

  ALTER TABLE "ACT_RE_MODEL" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_RE_MODEL" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_RE_PROCDEF
--------------------------------------------------------

  ALTER TABLE "ACT_RE_PROCDEF" ADD CONSTRAINT "ACT_UNIQ_PROCDEF" UNIQUE ("KEY_", "VERSION_", "TENANT_ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "ACT_RE_PROCDEF" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_RE_PROCDEF" MODIFY ("KEY_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_RE_PROCDEF" MODIFY ("VERSION_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_RE_PROCDEF" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "ACT_RE_PROCDEF" ADD CHECK (HAS_START_FORM_KEY_ IN (1,0)) ENABLE;
 
  ALTER TABLE "ACT_RE_PROCDEF" ADD CHECK (HAS_GRAPHICAL_NOTATION_ IN (1,0)) ENABLE;
 
  ALTER TABLE "ACT_RE_PROCDEF" ADD CHECK (HAS_START_FORM_KEY_ IN (1,0)) ENABLE;
 
  ALTER TABLE "ACT_RE_PROCDEF" ADD CHECK (HAS_GRAPHICAL_NOTATION_ IN (1,0)) ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_RU_EXECUTION
--------------------------------------------------------

  ALTER TABLE "ACT_RU_EXECUTION" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_RU_EXECUTION" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "ACT_RU_EXECUTION" ADD CHECK (IS_ACTIVE_ IN (1,0)) ENABLE;
 
  ALTER TABLE "ACT_RU_EXECUTION" ADD CHECK (IS_CONCURRENT_ IN (1,0)) ENABLE;
 
  ALTER TABLE "ACT_RU_EXECUTION" ADD CHECK (IS_SCOPE_ IN (1,0)) ENABLE;
 
  ALTER TABLE "ACT_RU_EXECUTION" ADD CHECK (IS_EVENT_SCOPE_ IN (1,0)) ENABLE;
 
  ALTER TABLE "ACT_RU_EXECUTION" ADD CHECK (IS_ACTIVE_ IN (1,0)) ENABLE;
 
  ALTER TABLE "ACT_RU_EXECUTION" ADD CHECK (IS_CONCURRENT_ IN (1,0)) ENABLE;
 
  ALTER TABLE "ACT_RU_EXECUTION" ADD CHECK (IS_SCOPE_ IN (1,0)) ENABLE;
 
  ALTER TABLE "ACT_RU_EXECUTION" ADD CHECK (IS_EVENT_SCOPE_ IN (1,0)) ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_RU_IDENTITYLINK
--------------------------------------------------------

  ALTER TABLE "ACT_RU_IDENTITYLINK" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_RU_IDENTITYLINK" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_RU_TASK
--------------------------------------------------------

  ALTER TABLE "ACT_RU_TASK" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_RU_TASK" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ACT_RU_VARIABLE
--------------------------------------------------------

  ALTER TABLE "ACT_RU_VARIABLE" MODIFY ("ID_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_RU_VARIABLE" MODIFY ("TYPE_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_RU_VARIABLE" MODIFY ("NAME_" NOT NULL ENABLE);
 
  ALTER TABLE "ACT_RU_VARIABLE" ADD PRIMARY KEY ("ID_")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table BASE_APPLYDEP
--------------------------------------------------------

  ALTER TABLE "BASE_APPLYDEP" ADD CONSTRAINT "PK_BASE_APPLYDEP" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_APPLYDEP" MODIFY ("ID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_APPLYDEP" MODIFY ("CODE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_APPLYDEP" MODIFY ("ZTID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_APPLYDEP" MODIFY ("SUBJECTSGROUP" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_APPLYDEP" MODIFY ("STATUS" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_BUTTON
--------------------------------------------------------

  ALTER TABLE "BASE_BUTTON" ADD CONSTRAINT "B_PK" PRIMARY KEY ("CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_BUTTON" MODIFY ("CODE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_BUTTON" MODIFY ("NAME" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_BUTTON" MODIFY ("STATUS" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_CATEGORY_ASSET
--------------------------------------------------------

  ALTER TABLE "BASE_CATEGORY_ASSET" ADD CONSTRAINT "PK_BASE_CATEGORY_ASSET" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_CATEGORY_ASSET" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_COMPANY
--------------------------------------------------------

  ALTER TABLE "BASE_COMPANY" ADD CONSTRAINT "BC_PK" PRIMARY KEY ("COMPANYID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_COMPANY" MODIFY ("COMPANYID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_COMPANY" MODIFY ("COMPANYCODE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_COMPANY" MODIFY ("COMPANYNAME" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_COMPANY" MODIFY ("SORT" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_COMPANY" MODIFY ("ENABLED" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_DICTIONARY
--------------------------------------------------------

  ALTER TABLE "BASE_DICTIONARY" ADD CONSTRAINT "BD_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_DICTIONARY" MODIFY ("ID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_DICTIONARY" MODIFY ("GUID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_DICTIONARY" MODIFY ("CODE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_DIC_ACT
--------------------------------------------------------

  ALTER TABLE "BASE_DIC_ACT" MODIFY ("ID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_DIC_ACT" MODIFY ("DICID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_DIC_ACT" MODIFY ("MODELID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_DIC_ACT" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table BASE_FORMPRINT
--------------------------------------------------------

  ALTER TABLE "BASE_FORMPRINT" ADD CONSTRAINT "PK_FORMPRINT" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_FORMPRINT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_FORMSET
--------------------------------------------------------

  ALTER TABLE "BASE_FORMSET" ADD CONSTRAINT "BF_PK" PRIMARY KEY ("FORMDATA_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_FORMSET" MODIFY ("FORMDATA_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_FORMSET_BASE
--------------------------------------------------------

  ALTER TABLE "BASE_FORMSET_BASE" ADD CONSTRAINT "BFB_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_FORMSET_BASE" MODIFY ("ID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_FORMSET_BASE" MODIFY ("FORMDATA_BASEID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_LOG
--------------------------------------------------------

  ALTER TABLE "BASE_LOG" ADD CONSTRAINT "ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 458752 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_LOG" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_MAPPING
--------------------------------------------------------

  ALTER TABLE "BASE_MAPPING" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_MATERIAL
--------------------------------------------------------

  ALTER TABLE "BASE_MATERIAL" ADD CONSTRAINT "BM_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 5242880 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_MATERIAL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_MENU
--------------------------------------------------------

  ALTER TABLE "BASE_MENU" ADD CONSTRAINT "M_PK" PRIMARY KEY ("CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_MENU" MODIFY ("CODE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_MENU" MODIFY ("NAME" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_MENU" MODIFY ("TYPE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_MENU" MODIFY ("BUTTONMODE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_MENU" MODIFY ("SORT" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_MENU" MODIFY ("STATUS" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_MENUBUTTON
--------------------------------------------------------

  ALTER TABLE "BASE_MENUBUTTON" ADD CONSTRAINT "MB_PK" PRIMARY KEY ("MENUCODE", "BUTTONCODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_MENUBUTTON" MODIFY ("MENUCODE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_MENUBUTTON" MODIFY ("BUTTONCODE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_MENUBUTTON" MODIFY ("BUTTONSORT" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_MENUBUTTON" MODIFY ("BUTTONTEXT" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_OFFICES_SCOPE
--------------------------------------------------------

  ALTER TABLE "BASE_OFFICES_SCOPE" ADD CONSTRAINT "PK_BASE_OFFICES_SCOPE" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_OFFICES_SCOPE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_ORGANIZATION
--------------------------------------------------------

  ALTER TABLE "BASE_ORGANIZATION" ADD CONSTRAINT "BO_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_ORGANIZATION" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_PERSON
--------------------------------------------------------

  ALTER TABLE "BASE_PERSON" ADD CONSTRAINT "BP_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_PERSON" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_PERSON_SCOPE
--------------------------------------------------------

  ALTER TABLE "BASE_PERSON_SCOPE" ADD CONSTRAINT "SCOPEID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_PERSON_SCOPE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_PRINTTEMP
--------------------------------------------------------

  ALTER TABLE "BASE_PRINTTEMP" ADD CONSTRAINT "PK_BASE_PRINTTEMP" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table BASE_PROVIDER
--------------------------------------------------------

  ALTER TABLE "BASE_PROVIDER" ADD CONSTRAINT "BPK_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_PROVIDER" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_RECEIPT
--------------------------------------------------------

  ALTER TABLE "BASE_RECEIPT" ADD CONSTRAINT "BR_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_RECEIPT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_ROLE
--------------------------------------------------------

  ALTER TABLE "BASE_ROLE" ADD CONSTRAINT "BRC_PK" PRIMARY KEY ("ROLECODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_ROLE" MODIFY ("ROLECODE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_ROLE" MODIFY ("ROLENAME" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_ROLE" MODIFY ("ROLETYPE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_ROLE" MODIFY ("SORT" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_ROLE" MODIFY ("ENABLED" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_ROLEMENU
--------------------------------------------------------

  ALTER TABLE "BASE_ROLEMENU" ADD CONSTRAINT "BCD_PK" PRIMARY KEY ("ROLECODE", "MENUCODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_ROLEMENU" MODIFY ("ROLECODE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_ROLEMENU" MODIFY ("MENUCODE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_ROLEMENUBUTTON
--------------------------------------------------------

  ALTER TABLE "BASE_ROLEMENUBUTTON" ADD CONSTRAINT "MBD_PK" PRIMARY KEY ("ROLECODE", "MENUCODE", "BUTTONCODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_ROLEMENUBUTTON" MODIFY ("ROLECODE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_ROLEMENUBUTTON" MODIFY ("MENUCODE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_ROLEMENUBUTTON" MODIFY ("BUTTONCODE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_ROUTESTEP
--------------------------------------------------------

  ALTER TABLE "BASE_ROUTESTEP" ADD CONSTRAINT "BRS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_ROUTESTEP" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_SPAREPARTSCATE
--------------------------------------------------------

  ALTER TABLE "BASE_SPAREPARTSCATE" ADD CONSTRAINT "BS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 131072 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_SPAREPARTSCATE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_UNITCONVERSION
--------------------------------------------------------

  ALTER TABLE "BASE_UNITCONVERSION" ADD CONSTRAINT "BUNIT_PK" PRIMARY KEY ("UNITID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_UNITCONVERSION" MODIFY ("UNITID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_USEDEP
--------------------------------------------------------

  ALTER TABLE "BASE_USEDEP" ADD CONSTRAINT "PK_BASE_USEDEP" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_USEDEP" MODIFY ("ID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_USEDEP" MODIFY ("ERPID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_USEDEP" MODIFY ("CODE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_USEDEP" MODIFY ("NAME" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_USEDEP" MODIFY ("ORGANIZATIONID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_USEDEP" MODIFY ("STATUS" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_USERROLE
--------------------------------------------------------

  ALTER TABLE "BASE_USERROLE" ADD CONSTRAINT "BU_PK" PRIMARY KEY ("USERID", "ROLECODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_USERROLE" MODIFY ("USERID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_USERROLE" MODIFY ("ROLECODE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_USERROLES
--------------------------------------------------------

  ALTER TABLE "BASE_USERROLES" MODIFY ("USERID" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_USERROLES" MODIFY ("ROLECODE" NOT NULL ENABLE);
 
  ALTER TABLE "BASE_USERROLES" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BASE_WAREHOUSE
--------------------------------------------------------

  ALTER TABLE "BASE_WAREHOUSE" ADD CONSTRAINT "BW_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 2097152 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "BASE_WAREHOUSE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INF_TASK
--------------------------------------------------------

  ALTER TABLE "INF_TASK" ADD CONSTRAINT "PK_INFTASK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "INF_TASK" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INF_TASKLOG
--------------------------------------------------------

  ALTER TABLE "INF_TASKLOG" ADD CONSTRAINT "PK_INFTASKLOG" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 2097152 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "INF_TASKLOG" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MES_CK
--------------------------------------------------------

  ALTER TABLE "MES_CK" ADD CONSTRAINT "PK_MES_CK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "MES_CK" MODIFY ("ID" NOT NULL ENABLE);
 
  ALTER TABLE "MES_CK" MODIFY ("LOCATOR_ID" NOT NULL ENABLE);
 
  ALTER TABLE "MES_CK" MODIFY ("TRANS_QUANTITY" NOT NULL ENABLE);
 
  ALTER TABLE "MES_CK" MODIFY ("QUANTITY" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MES_RK
--------------------------------------------------------

  ALTER TABLE "MES_RK" ADD CONSTRAINT "PK_MES_RK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "MES_RK" MODIFY ("ID" NOT NULL ENABLE);
 
  ALTER TABLE "MES_RK" MODIFY ("LOCATOR_ID" NOT NULL ENABLE);
 
  ALTER TABLE "MES_RK" MODIFY ("QUANTITY" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ST_MAXCODE
--------------------------------------------------------

  ALTER TABLE "ST_MAXCODE" ADD CONSTRAINT "PK_ST_MAXCODE" PRIMARY KEY ("ST_MAXCODE_PREFIX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "ST_MAXCODE" MODIFY ("ST_MAXCODE_PREFIX" NOT NULL ENABLE);
 
  ALTER TABLE "ST_MAXCODE" MODIFY ("ST_MAXCODE_SERIAL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SYS_FORMTEMPLATE
--------------------------------------------------------

  ALTER TABLE "SYS_FORMTEMPLATE" MODIFY ("ID" NOT NULL ENABLE);
 
  ALTER TABLE "SYS_FORMTEMPLATE" MODIFY ("PROCESSDEFINITIONKEY" NOT NULL ENABLE);
 
  ALTER TABLE "SYS_FORMTEMPLATE" MODIFY ("FORMTEMCARD" NOT NULL ENABLE);
 
  ALTER TABLE "SYS_FORMTEMPLATE" MODIFY ("FORMTEMNAME" NOT NULL ENABLE);
 
  ALTER TABLE "SYS_FORMTEMPLATE" MODIFY ("FORMTEMPRE" NOT NULL ENABLE);
 
  ALTER TABLE "SYS_FORMTEMPLATE" MODIFY ("FORMTEMSTA" NOT NULL ENABLE);
 
  ALTER TABLE "SYS_FORMTEMPLATE" MODIFY ("FORMTEMDIC" NOT NULL ENABLE);
 
  ALTER TABLE "SYS_FORMTEMPLATE" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TEMP_DATA
--------------------------------------------------------

  ALTER TABLE "TEMP_DATA" MODIFY ("ID" NOT NULL ENABLE);
 
  ALTER TABLE "TEMP_DATA" ADD CONSTRAINT "TEMP_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table WZ_ATTACHFILE
--------------------------------------------------------

  ALTER TABLE "WZ_ATTACHFILE" ADD CONSTRAINT "PK_WZ_ATTACHFILE" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_ATTACHFILE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_ORDERINFO
--------------------------------------------------------

  ALTER TABLE "WZ_ORDERINFO" ADD CONSTRAINT "PK_WZ_ORDERINFO" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_ORDERINFO" MODIFY ("ID" NOT NULL ENABLE);
 
  ALTER TABLE "WZ_ORDERINFO" MODIFY ("ORDERID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_PDDETAIL
--------------------------------------------------------

  ALTER TABLE "WZ_PDDETAIL" ADD CONSTRAINT "PK_WZ_PDDETAIL" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_PDDETAIL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_PURCHASEPLAN
--------------------------------------------------------

  ALTER TABLE "WZ_PURCHASEPLAN" ADD CONSTRAINT "PK_WZ_PURCHASEPLAN" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_PURCHASEPLAN" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_RECEIVINGLOG
--------------------------------------------------------

  ALTER TABLE "WZ_RECEIVINGLOG" ADD CONSTRAINT "PK_WZ_RECEIVINGLOG" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_RECEIVINGLOG" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_ROUTEHISTORY
--------------------------------------------------------

  ALTER TABLE "WZ_ROUTEHISTORY" ADD CONSTRAINT "SHEETROUTEHISTORY_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 131072 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_ROUTEHISTORY" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_SHEET
--------------------------------------------------------

  ALTER TABLE "WZ_SHEET" ADD CONSTRAINT "PK_WZ_SHEET" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_SHEET" MODIFY ("GUID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_SHEETCKDETAIL
--------------------------------------------------------

  ALTER TABLE "WZ_SHEETCKDETAIL" ADD CONSTRAINT "PK_WZ_SHEETCKDETAIL" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_SHEETCKDETAIL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_SHEETDETAIL
--------------------------------------------------------

  ALTER TABLE "WZ_SHEETDETAIL" ADD CONSTRAINT "PK_WZ_SHEETDETAIL" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_SHEETDETAIL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_SHEETRKDETAIL
--------------------------------------------------------

  ALTER TABLE "WZ_SHEETRKDETAIL" ADD CONSTRAINT "PK_WZ_SHEETRKDETAIL" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_SHEETRKDETAIL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_SHEETRKSUBDETAIL
--------------------------------------------------------

  ALTER TABLE "WZ_SHEETRKSUBDETAIL" MODIFY ("ID" NOT NULL ENABLE);
 
  ALTER TABLE "WZ_SHEETRKSUBDETAIL" ADD CONSTRAINT "WZSUBRK_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table WZ_SHEETSUBDETAIL
--------------------------------------------------------

  ALTER TABLE "WZ_SHEETSUBDETAIL" MODIFY ("ID" NOT NULL ENABLE);
 
  ALTER TABLE "WZ_SHEETSUBDETAIL" ADD CONSTRAINT "WZSUB_ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1
  FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table WZ_SHEET_CK
--------------------------------------------------------

  ALTER TABLE "WZ_SHEET_CK" ADD CONSTRAINT "PK_WZ_SHEET_CK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_SHEET_CK" MODIFY ("GUID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_SHEET_RK
--------------------------------------------------------

  ALTER TABLE "WZ_SHEET_RK" ADD CONSTRAINT "PK_WZ_SHEET_RK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_SHEET_RK" MODIFY ("GUID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_STOCK
--------------------------------------------------------

  ALTER TABLE "WZ_STOCK" ADD CONSTRAINT "PK_WZ_STOCK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_STOCK" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_STOCKSUBDETAIL
--------------------------------------------------------

  ALTER TABLE "WZ_STOCKSUBDETAIL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WZ_STORELOG
--------------------------------------------------------

  ALTER TABLE "WZ_STORELOG" ADD CONSTRAINT "WZ_STOCKLOGID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table WZ_WAITTASK
--------------------------------------------------------

  ALTER TABLE "WZ_WAITTASK" ADD CONSTRAINT "PK_WZ_WAITTASK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EWMSDB"  ENABLE;
 
  ALTER TABLE "WZ_WAITTASK" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table ACT_GE_BYTEARRAY
--------------------------------------------------------

  ALTER TABLE "ACT_GE_BYTEARRAY" ADD CONSTRAINT "ACT_FK_BYTEARR_DEPL" FOREIGN KEY ("DEPLOYMENT_ID_")
	  REFERENCES "ACT_RE_DEPLOYMENT" ("ID_") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ACT_RE_MODEL
--------------------------------------------------------

  ALTER TABLE "ACT_RE_MODEL" ADD CONSTRAINT "ACT_FK_MODEL_DEPLOYMENT" FOREIGN KEY ("DEPLOYMENT_ID_")
	  REFERENCES "ACT_RE_DEPLOYMENT" ("ID_") ENABLE;
 
  ALTER TABLE "ACT_RE_MODEL" ADD CONSTRAINT "ACT_FK_MODEL_SOURCE" FOREIGN KEY ("EDITOR_SOURCE_VALUE_ID_")
	  REFERENCES "ACT_GE_BYTEARRAY" ("ID_") ENABLE;
 
  ALTER TABLE "ACT_RE_MODEL" ADD CONSTRAINT "ACT_FK_MODEL_SOURCE_EXTRA" FOREIGN KEY ("EDITOR_SOURCE_EXTRA_VALUE_ID_")
	  REFERENCES "ACT_GE_BYTEARRAY" ("ID_") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ACT_RU_EXECUTION
--------------------------------------------------------

  ALTER TABLE "ACT_RU_EXECUTION" ADD CONSTRAINT "ACT_FK_EXE_PARENT" FOREIGN KEY ("PARENT_ID_")
	  REFERENCES "ACT_RU_EXECUTION" ("ID_") ENABLE;
 
  ALTER TABLE "ACT_RU_EXECUTION" ADD CONSTRAINT "ACT_FK_EXE_PROCDEF" FOREIGN KEY ("PROC_DEF_ID_")
	  REFERENCES "ACT_RE_PROCDEF" ("ID_") ENABLE;
 
  ALTER TABLE "ACT_RU_EXECUTION" ADD CONSTRAINT "ACT_FK_EXE_PROCINST" FOREIGN KEY ("PROC_INST_ID_")
	  REFERENCES "ACT_RU_EXECUTION" ("ID_") ENABLE;
 
  ALTER TABLE "ACT_RU_EXECUTION" ADD CONSTRAINT "ACT_FK_EXE_SUPER" FOREIGN KEY ("SUPER_EXEC_")
	  REFERENCES "ACT_RU_EXECUTION" ("ID_") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ACT_RU_IDENTITYLINK
--------------------------------------------------------

  ALTER TABLE "ACT_RU_IDENTITYLINK" ADD CONSTRAINT "ACT_FK_ATHRZ_PROCEDEF" FOREIGN KEY ("PROC_DEF_ID_")
	  REFERENCES "ACT_RE_PROCDEF" ("ID_") ENABLE;
 
  ALTER TABLE "ACT_RU_IDENTITYLINK" ADD CONSTRAINT "ACT_FK_IDL_PROCINST" FOREIGN KEY ("PROC_INST_ID_")
	  REFERENCES "ACT_RU_EXECUTION" ("ID_") ENABLE;
 
  ALTER TABLE "ACT_RU_IDENTITYLINK" ADD CONSTRAINT "ACT_FK_TSKASS_TASK" FOREIGN KEY ("TASK_ID_")
	  REFERENCES "ACT_RU_TASK" ("ID_") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ACT_RU_TASK
--------------------------------------------------------

  ALTER TABLE "ACT_RU_TASK" ADD CONSTRAINT "ACT_FK_TASK_EXE" FOREIGN KEY ("EXECUTION_ID_")
	  REFERENCES "ACT_RU_EXECUTION" ("ID_") ENABLE;
 
  ALTER TABLE "ACT_RU_TASK" ADD CONSTRAINT "ACT_FK_TASK_PROCDEF" FOREIGN KEY ("PROC_DEF_ID_")
	  REFERENCES "ACT_RE_PROCDEF" ("ID_") ENABLE;
 
  ALTER TABLE "ACT_RU_TASK" ADD CONSTRAINT "ACT_FK_TASK_PROCINST" FOREIGN KEY ("PROC_INST_ID_")
	  REFERENCES "ACT_RU_EXECUTION" ("ID_") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ACT_RU_VARIABLE
--------------------------------------------------------

  ALTER TABLE "ACT_RU_VARIABLE" ADD CONSTRAINT "ACT_FK_VAR_BYTEARRAY" FOREIGN KEY ("BYTEARRAY_ID_")
	  REFERENCES "ACT_GE_BYTEARRAY" ("ID_") ENABLE;
 
  ALTER TABLE "ACT_RU_VARIABLE" ADD CONSTRAINT "ACT_FK_VAR_EXE" FOREIGN KEY ("EXECUTION_ID_")
	  REFERENCES "ACT_RU_EXECUTION" ("ID_") ENABLE;
 
  ALTER TABLE "ACT_RU_VARIABLE" ADD CONSTRAINT "ACT_FK_VAR_PROCINST" FOREIGN KEY ("PROC_INST_ID_")
	  REFERENCES "ACT_RU_EXECUTION" ("ID_") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BASE_DICTIONARY
--------------------------------------------------------

  ALTER TABLE "BASE_DICTIONARY" ADD CONSTRAINT "FK_6W3OSL9HS9FR5WBWPKL3BNYRY" FOREIGN KEY ("PARENTID")
	  REFERENCES "BASE_DICTIONARY" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BASE_ROLEMENU
--------------------------------------------------------

  ALTER TABLE "BASE_ROLEMENU" ADD CONSTRAINT "FK_LY5XHFE29KMT89P82J8N7FVGS" FOREIGN KEY ("MENUCODE")
	  REFERENCES "BASE_MENU" ("CODE") ENABLE;
 
  ALTER TABLE "BASE_ROLEMENU" ADD CONSTRAINT "FK_PYJGW2SWL07GTIO3KI5TK908O" FOREIGN KEY ("ROLECODE")
	  REFERENCES "BASE_ROLE" ("ROLECODE") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table INF_TASK
--------------------------------------------------------

  ALTER TABLE "INF_TASK" ADD CONSTRAINT "FK_CUX66XWD9P79HILC7NCM6T9U9" FOREIGN KEY ("SUPPLYSYSTEM")
	  REFERENCES "BASE_DICTIONARY" ("ID") ENABLE;
 
  ALTER TABLE "INF_TASK" ADD CONSTRAINT "FK_PYP7QPUYF26VIP2EPBX6L9T6P" FOREIGN KEY ("CALLSYSTEM")
	  REFERENCES "BASE_DICTIONARY" ("ID") ENABLE;
